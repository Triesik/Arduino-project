
IoT-SEP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000626  00800200  00005b6e  00005c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000011e5  00800826  00800826  00006228  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c28  00000000  00000000  000062c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f1f4  00000000  00000000  00006eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e75  00000000  00000000  000160e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000708b  00000000  00000000  00019f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002738  00000000  00000000  00020fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000464a  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cbfa  00000000  00000000  00027d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  0003495c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	48 c2       	rjmp	.+1168   	; 0x492 <__ctors_end>
       2:	00 00       	nop
       4:	67 c2       	rjmp	.+1230   	; 0x4d4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c2       	rjmp	.+1226   	; 0x4d4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c2       	rjmp	.+1222   	; 0x4d4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c2       	rjmp	.+1218   	; 0x4d4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c2       	rjmp	.+1214   	; 0x4d4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c2       	rjmp	.+1210   	; 0x4d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c2       	rjmp	.+1206   	; 0x4d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c2       	rjmp	.+1202   	; 0x4d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c2       	rjmp	.+1198   	; 0x4d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c2       	rjmp	.+1194   	; 0x4d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c2       	rjmp	.+1190   	; 0x4d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_12>
      34:	4f c2       	rjmp	.+1182   	; 0x4d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c2       	rjmp	.+1178   	; 0x4d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c2       	rjmp	.+1174   	; 0x4d4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c2       	rjmp	.+1170   	; 0x4d4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c2       	rjmp	.+1166   	; 0x4d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c2       	rjmp	.+1162   	; 0x4d4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c2       	rjmp	.+1158   	; 0x4d4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c2       	rjmp	.+1154   	; 0x4d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c2       	rjmp	.+1150   	; 0x4d4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c2       	rjmp	.+1146   	; 0x4d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c2       	rjmp	.+1142   	; 0x4d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c2       	rjmp	.+1138   	; 0x4d4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 16 23 	jmp	0x462c	; 0x462c <__vector_25>
      68:	0c 94 68 23 	jmp	0x46d0	; 0x46d0 <__vector_26>
      6c:	33 c2       	rjmp	.+1126   	; 0x4d4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c2       	rjmp	.+1122   	; 0x4d4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c2       	rjmp	.+1118   	; 0x4d4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c2       	rjmp	.+1114   	; 0x4d4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c2       	rjmp	.+1110   	; 0x4d4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c2       	rjmp	.+1106   	; 0x4d4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c2       	rjmp	.+1102   	; 0x4d4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c2       	rjmp	.+1098   	; 0x4d4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c2       	rjmp	.+1094   	; 0x4d4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__vector_36>
      94:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__vector_37>
      98:	1d c2       	rjmp	.+1082   	; 0x4d4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <__vector_39>
      a0:	19 c2       	rjmp	.+1074   	; 0x4d4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	17 c2       	rjmp	.+1070   	; 0x4d4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	15 c2       	rjmp	.+1066   	; 0x4d4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	13 c2       	rjmp	.+1062   	; 0x4d4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	11 c2       	rjmp	.+1058   	; 0x4d4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0f c2       	rjmp	.+1054   	; 0x4d4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0d c2       	rjmp	.+1050   	; 0x4d4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0b c2       	rjmp	.+1046   	; 0x4d4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	09 c2       	rjmp	.+1042   	; 0x4d4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	07 c2       	rjmp	.+1038   	; 0x4d4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	05 c2       	rjmp	.+1034   	; 0x4d4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__vector_51>
      d0:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__vector_52>
      d4:	ff c1       	rjmp	.+1022   	; 0x4d4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__vector_54>
      dc:	0c 94 2a 25 	jmp	0x4a54	; 0x4a54 <__vector_55>
      e0:	f9 c1       	rjmp	.+1010   	; 0x4d4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	b8 26       	eor	r11, r24
      fa:	28 27       	eor	r18, r24
      fc:	28 27       	eor	r18, r24
      fe:	28 27       	eor	r18, r24
     100:	28 27       	eor	r18, r24
     102:	28 27       	eor	r18, r24
     104:	28 27       	eor	r18, r24
     106:	28 27       	eor	r18, r24
     108:	b8 26       	eor	r11, r24
     10a:	28 27       	eor	r18, r24
     10c:	28 27       	eor	r18, r24
     10e:	28 27       	eor	r18, r24
     110:	28 27       	eor	r18, r24
     112:	28 27       	eor	r18, r24
     114:	28 27       	eor	r18, r24
     116:	28 27       	eor	r18, r24
     118:	ba 26       	eor	r11, r26
     11a:	28 27       	eor	r18, r24
     11c:	28 27       	eor	r18, r24
     11e:	28 27       	eor	r18, r24
     120:	28 27       	eor	r18, r24
     122:	28 27       	eor	r18, r24
     124:	28 27       	eor	r18, r24
     126:	28 27       	eor	r18, r24
     128:	28 27       	eor	r18, r24
     12a:	28 27       	eor	r18, r24
     12c:	28 27       	eor	r18, r24
     12e:	28 27       	eor	r18, r24
     130:	28 27       	eor	r18, r24
     132:	28 27       	eor	r18, r24
     134:	28 27       	eor	r18, r24
     136:	28 27       	eor	r18, r24
     138:	ba 26       	eor	r11, r26
     13a:	28 27       	eor	r18, r24
     13c:	28 27       	eor	r18, r24
     13e:	28 27       	eor	r18, r24
     140:	28 27       	eor	r18, r24
     142:	28 27       	eor	r18, r24
     144:	28 27       	eor	r18, r24
     146:	28 27       	eor	r18, r24
     148:	28 27       	eor	r18, r24
     14a:	28 27       	eor	r18, r24
     14c:	28 27       	eor	r18, r24
     14e:	28 27       	eor	r18, r24
     150:	28 27       	eor	r18, r24
     152:	28 27       	eor	r18, r24
     154:	28 27       	eor	r18, r24
     156:	28 27       	eor	r18, r24
     158:	24 27       	eor	r18, r20
     15a:	28 27       	eor	r18, r24
     15c:	28 27       	eor	r18, r24
     15e:	28 27       	eor	r18, r24
     160:	28 27       	eor	r18, r24
     162:	28 27       	eor	r18, r24
     164:	28 27       	eor	r18, r24
     166:	28 27       	eor	r18, r24
     168:	ef 26       	eor	r14, r31
     16a:	28 27       	eor	r18, r24
     16c:	28 27       	eor	r18, r24
     16e:	28 27       	eor	r18, r24
     170:	28 27       	eor	r18, r24
     172:	28 27       	eor	r18, r24
     174:	28 27       	eor	r18, r24
     176:	28 27       	eor	r18, r24
     178:	28 27       	eor	r18, r24
     17a:	28 27       	eor	r18, r24
     17c:	28 27       	eor	r18, r24
     17e:	28 27       	eor	r18, r24
     180:	28 27       	eor	r18, r24
     182:	28 27       	eor	r18, r24
     184:	28 27       	eor	r18, r24
     186:	28 27       	eor	r18, r24
     188:	e3 26       	eor	r14, r19
     18a:	28 27       	eor	r18, r24
     18c:	28 27       	eor	r18, r24
     18e:	28 27       	eor	r18, r24
     190:	28 27       	eor	r18, r24
     192:	28 27       	eor	r18, r24
     194:	28 27       	eor	r18, r24
     196:	28 27       	eor	r18, r24
     198:	07 27       	eor	r16, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	01 e0       	ldi	r16, 0x01	; 1
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	f1 e3       	ldi	r31, 0x31	; 49
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	29 d6       	rcall	.+3154   	; 0xe1e <uxListRemove>
     1cc:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <uxCurrentNumberOfTasks>
     1d6:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 00 18 	sts	0x1800, r24	; 0x801800 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	76 d5       	rcall	.+2796   	; 0xcd6 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	74 d5       	rcall	.+2792   	; 0xcd6 <vPortFree>
     1ee:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	e4 d6       	rcall	.+3528   	; 0xfc8 <vPortYield>
     200:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <pxCurrentTimerList>
     232:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	10 c1       	rjmp	.+544    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     27e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <pxCurrentTimerList>
     282:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	c2 d5       	rcall	.+2948   	; 0xe1e <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
     31c:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
     320:	0e 94 5f 0b 	call	0x16be	; 0x16be <vQueueWaitForMessageRestricted>
     324:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	4d d6       	rcall	.+3226   	; 0xfc8 <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	64 d5       	rcall	.+2760   	; 0xe1e <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	4e d4       	rcall	.+2204   	; 0xcd6 <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
     450:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
     454:	0e 94 c7 0a 	call	0x158e	; 0x158e <xQueueReceive>
     458:	81 11       	cpse	r24, r1
     45a:	6d cf       	rjmp	.-294    	; 0x336 <prvTimerTask+0x130>
     45c:	e8 ce       	rjmp	.-560    	; 0x22e <prvTimerTask+0x28>
     45e:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
     462:	ce 01       	movw	r24, r28
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <prvSampleTimeNow>
     46a:	6b 87       	std	Y+11, r22	; 0x0b
     46c:	7c 87       	std	Y+12, r23	; 0x0c
     46e:	8d 87       	std	Y+13, r24	; 0x0d
     470:	9e 87       	std	Y+14, r25	; 0x0e
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	81 11       	cpse	r24, r1
     476:	5c cf       	rjmp	.-328    	; 0x330 <prvTimerTask+0x12a>
     478:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <pxOverflowTimerList>
     47c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <pxOverflowTimerList+0x1>
     480:	80 81       	ld	r24, Z
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	81 11       	cpse	r24, r1
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	28 2c       	mov	r2, r8
     48a:	39 2c       	mov	r3, r9
     48c:	4a 2c       	mov	r4, r10
     48e:	5b 2c       	mov	r5, r11
     490:	39 cf       	rjmp	.-398    	; 0x304 <prvTimerTask+0xfe>

00000492 <__ctors_end>:
     492:	11 24       	eor	r1, r1
     494:	1f be       	out	0x3f, r1	; 63
     496:	cf ef       	ldi	r28, 0xFF	; 255
     498:	d1 e2       	ldi	r29, 0x21	; 33
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	00 e0       	ldi	r16, 0x00	; 0
     4a0:	0c bf       	out	0x3c, r16	; 60

000004a2 <__do_copy_data>:
     4a2:	18 e0       	ldi	r17, 0x08	; 8
     4a4:	a0 e0       	ldi	r26, 0x00	; 0
     4a6:	b2 e0       	ldi	r27, 0x02	; 2
     4a8:	ee e6       	ldi	r30, 0x6E	; 110
     4aa:	fb e5       	ldi	r31, 0x5B	; 91
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0b bf       	out	0x3b, r16	; 59
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__do_copy_data+0x14>
     4b2:	07 90       	elpm	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	a6 32       	cpi	r26, 0x26	; 38
     4b8:	b1 07       	cpc	r27, r17
     4ba:	d9 f7       	brne	.-10     	; 0x4b2 <__do_copy_data+0x10>

000004bc <__do_clear_bss>:
     4bc:	2a e1       	ldi	r18, 0x1A	; 26
     4be:	a6 e2       	ldi	r26, 0x26	; 38
     4c0:	b8 e0       	ldi	r27, 0x08	; 8
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <.do_clear_bss_start>

000004c4 <.do_clear_bss_loop>:
     4c4:	1d 92       	st	X+, r1

000004c6 <.do_clear_bss_start>:
     4c6:	ab 30       	cpi	r26, 0x0B	; 11
     4c8:	b2 07       	cpc	r27, r18
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <.do_clear_bss_loop>
     4cc:	0e 94 05 1a 	call	0x340a	; 0x340a <main>
     4d0:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <_exit>

000004d4 <__bad_interrupt>:
     4d4:	95 cd       	rjmp	.-1238   	; 0x0 <__vectors>

000004d6 <co2sensor_create>:


void co2sensor_destroy(Co2Sensor_t self){
	
	if(NULL !=self){
		free(self);
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <calloc>
     4e2:	08 95       	ret

000004e4 <co2_meassure>:
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	8c 01       	movw	r16, r24
     4ec:	0e 94 79 21 	call	0x42f2	; 0x42f2 <mh_z19_take_meassuring>
     4f0:	c8 2f       	mov	r28, r24
     4f2:	f8 01       	movw	r30, r16
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	0e 94 a8 21 	call	0x4350	; 0x4350 <mh_z19_get_co2_ppm>
     4fc:	8c 2f       	mov	r24, r28
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <co2get_measurment>:
}


uint16_t co2get_measurment(Co2Sensor_t self) {
	return self->co2;
}
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	91 81       	ldd	r25, Z+1	; 0x01
     50c:	08 95       	ret

0000050e <configuration_create>:
	self->max_temperature = temperature;
}

uint16_t get_max_temperature_setting(Configuration_t self) {
	return self->max_temperature;
}
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <calloc>
     51a:	08 95       	ret

0000051c <set_max_temperature>:
     51c:	fc 01       	movw	r30, r24
     51e:	71 83       	std	Z+1, r23	; 0x01
     520:	60 83       	st	Z, r22
     522:	08 95       	ret

00000524 <set_temperature_current>:

void set_temperature_current(Configuration_t self, uint16_t temperature)
{
	self->current_temperature = temperature;
     524:	fc 01       	movw	r30, r24
     526:	73 83       	std	Z+3, r23	; 0x03
     528:	62 83       	std	Z+2, r22	; 0x02
     52a:	08 95       	ret

0000052c <operate_window>:
}

void operate_window(Configuration_t self)
{
	if(self->max_temperature > 0)
     52c:	fc 01       	movw	r30, r24
     52e:	20 81       	ld	r18, Z
     530:	31 81       	ldd	r19, Z+1	; 0x01
     532:	21 15       	cp	r18, r1
     534:	31 05       	cpc	r19, r1
     536:	41 f0       	breq	.+16     	; 0x548 <operate_window+0x1c>
	{
		if(self->max_temperature >= self->current_temperature)
     538:	82 81       	ldd	r24, Z+2	; 0x02
     53a:	93 81       	ldd	r25, Z+3	; 0x03
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	10 f0       	brcs	.+4      	; 0x546 <operate_window+0x1a>
		{
			servo_open();
     542:	1a c1       	rjmp	.+564    	; 0x778 <servo_open>
     544:	08 95       	ret
		}
		else if(self->max_temperature < self->current_temperature)
		{
			servo_close();
     546:	1d c1       	rjmp	.+570    	; 0x782 <servo_close>
     548:	08 95       	ret

0000054a <humptempsensor_create>:
     54a:	61 e0       	ldi	r22, 0x01	; 1
	return rc;
}

void tempsensor_destroy(HumTempSensor_t self) {
	if (NULL != self) {
		free(self);
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <calloc>
     556:	08 95       	ret

00000558 <inithtdrivers>:
     558:	0e 94 4d 1b 	call	0x369a	; 0x369a <hih8120Create>
     55c:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <hih8120Wakeup>
     560:	08 95       	ret

00000562 <temphum_meassure>:
	}
}

hih8120DriverReturnCode_t temphum_meassure(HumTempSensor_t self) {
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
	hih8120DriverReturnCode_t rc;
	rc = hih8120Meassure();
     56a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <hih8120Meassure>
     56e:	18 2f       	mov	r17, r24
	self->temperature = hih8120GetHumidity();
     570:	0e 94 8b 1b 	call	0x3716	; 0x3716 <hih8120GetHumidity>
     574:	68 83       	st	Y, r22
     576:	79 83       	std	Y+1, r23	; 0x01
     578:	8a 83       	std	Y+2, r24	; 0x02
     57a:	9b 83       	std	Y+3, r25	; 0x03
	self->humidity = hih8120GetTemperature();
     57c:	0e 94 9f 1b 	call	0x373e	; 0x373e <hih8120GetTemperature>
     580:	6c 83       	std	Y+4, r22	; 0x04
     582:	7d 83       	std	Y+5, r23	; 0x05
     584:	8e 83       	std	Y+6, r24	; 0x06
     586:	9f 83       	std	Y+7, r25	; 0x07
	return rc;
}
     588:	81 2f       	mov	r24, r17
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	08 95       	ret

00000592 <humget_measurment>:


float humget_measurment(HumTempSensor_t self) {
	return self->humidity;
     592:	fc 01       	movw	r30, r24
     594:	64 81       	ldd	r22, Z+4	; 0x04
     596:	75 81       	ldd	r23, Z+5	; 0x05
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	97 81       	ldd	r25, Z+7	; 0x07
}
     59c:	08 95       	ret

0000059e <tempget_measurment>:

float tempget_measurment(HumTempSensor_t self) {
	return self->temperature;
     59e:	fc 01       	movw	r30, r24
     5a0:	60 81       	ld	r22, Z
     5a2:	71 81       	ldd	r23, Z+1	; 0x01
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
}
     5a8:	08 95       	ret

000005aa <network_setup>:

e_LoRa_return_code_t lorawan_send(lora_payload_t uplink_payload) {
	e_LoRa_return_code_t lc;
	lora_driver_sent_upload_message(false, &uplink_payload);
	return lc;
}
     5aa:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <lora_driver_rn2483_factory_reset>
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <network_setup+0x10>
     5b2:	8e e6       	ldi	r24, 0x6E	; 110
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     5ba:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <lora_driver_configure_to_eu868>
     5be:	88 23       	and	r24, r24
     5c0:	21 f0       	breq	.+8      	; 0x5ca <network_setup+0x20>
     5c2:	83 e8       	ldi	r24, 0x83	; 131
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     5ca:	86 e2       	ldi	r24, 0x26	; 38
     5cc:	98 e0       	ldi	r25, 0x08	; 8
     5ce:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <lora_driver_get_rn2483_hweui>
     5d2:	88 23       	and	r24, r24
     5d4:	21 f0       	breq	.+8      	; 0x5de <network_setup+0x34>
     5d6:	8e e9       	ldi	r24, 0x9E	; 158
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     5de:	46 e2       	ldi	r20, 0x26	; 38
     5e0:	58 e0       	ldi	r21, 0x08	; 8
     5e2:	63 eb       	ldi	r22, 0xB3	; 179
     5e4:	72 e0       	ldi	r23, 0x02	; 2
     5e6:	84 ed       	ldi	r24, 0xD4	; 212
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	0e 94 96 20 	call	0x412c	; 0x412c <lora_driver_set_otaa_identity>
     5ee:	88 23       	and	r24, r24
     5f0:	21 f0       	breq	.+8      	; 0x5fa <network_setup+0x50>
     5f2:	85 ee       	ldi	r24, 0xE5	; 229
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     5fa:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <lora_driver_save_mac>
     5fe:	88 23       	and	r24, r24
     600:	21 f0       	breq	.+8      	; 0x60a <network_setup+0x60>
     602:	8d ef       	ldi	r24, 0xFD	; 253
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <lora_driver_join>
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	31 f4       	brne	.+12     	; 0x620 <network_setup+0x76>
     614:	82 e1       	ldi	r24, 0x12	; 18
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	08 95       	ret

00000624 <send_and_receive>:

uint16_t send_and_receive(MessageBufferHandle_t received_buffer)
{
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	2c 97       	sbiw	r28, 0x0c	; 12
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	7c 01       	movw	r14, r24
	size_t xDataBytes;
	MessageBufferHandle_t payload_received;
	uint16_t co2_to_set = 0;
	lora_payload_t payload_to_send;
	e_LoRa_return_code_t lrc;
	xDataBytes = xMessageBufferReceive(received_buffer, (void*)payload_to_send.bytes, sizeof(payload_to_send), 200);
     642:	08 ec       	ldi	r16, 0xC8	; 200
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	4c e0       	ldi	r20, 0x0C	; 12
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	be 01       	movw	r22, r28
     650:	6d 5f       	subi	r22, 0xFD	; 253
     652:	7f 4f       	sbci	r23, 0xFF	; 255
     654:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xStreamBufferReceive>
	payload_to_send.port_no = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	89 83       	std	Y+1, r24	; 0x01
	payload_to_send.len = 6;
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8a 83       	std	Y+2, r24	; 0x02
	lrc = lora_driver_sent_upload_message(false, &payload_to_send);
     660:	be 01       	movw	r22, r28
     662:	6f 5f       	subi	r22, 0xFF	; 255
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <lora_driver_sent_upload_message>
	//the return code specifies whether data was sent correctly and whether there is any downlink
	if ((lrc == LoRa_MAC_TX_OK  ))
     66c:	8d 30       	cpi	r24, 0x0D	; 13
     66e:	41 f4       	brne	.+16     	; 0x680 <send_and_receive+0x5c>
	{
		puts("sent successfully, no down link");
     670:	8e e2       	ldi	r24, 0x2E	; 46
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
		xStreamBufferReset(received_buffer);
     678:	c7 01       	movw	r24, r14
     67a:	0e 94 90 0c 	call	0x1920	; 0x1920 <xStreamBufferReset>
     67e:	19 c0       	rjmp	.+50     	; 0x6b2 <send_and_receive+0x8e>
	}

	else if(lrc == LoRa_MAC_RX)
     680:	8e 30       	cpi	r24, 0x0E	; 14
     682:	99 f4       	brne	.+38     	; 0x6aa <send_and_receive+0x86>
	{
		xDataBytes = xMessageBufferReceive(payload_received, (void*)co2_to_set, sizeof(co2_to_set), 200);
     684:	08 ec       	ldi	r16, 0xC8	; 200
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	42 e0       	ldi	r20, 0x02	; 2
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xStreamBufferReceive>
		if (xDataBytes > 0)
     69c:	89 2b       	or	r24, r25
     69e:	49 f0       	breq	.+18     	; 0x6b2 <send_and_receive+0x8e>
		{
			puts("sent successfully, with down link");
     6a0:	8e e4       	ldi	r24, 0x4E	; 78
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
			return co2_to_set; 
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <send_and_receive+0x8e>
		}
	}
	else
	{
		puts("couldn't send the data, please contact the administrator");
     6aa:	80 e7       	ldi	r24, 0x70	; 112
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
	}
	
	return co2_to_set;
}
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2c 96       	adiw	r28, 0x0c	; 12
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	08 95       	ret

000006d0 <SensorDataPackageHandler_create>:
}

void SensorDataPackageHandler_destroy(SensorDataPackageHandler_t self){
	
	if(NULL !=self){
		free(self);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <calloc>
     6dc:	08 95       	ret

000006de <set_dph_temperature>:
	}
}

void set_dph_temperature(SensorDataPackageHandler_t self ,float temperature)
{
	self->temperature_to_pack = temperature;
     6de:	fc 01       	movw	r30, r24
     6e0:	42 83       	std	Z+2, r20	; 0x02
     6e2:	53 83       	std	Z+3, r21	; 0x03
     6e4:	64 83       	std	Z+4, r22	; 0x04
     6e6:	75 83       	std	Z+5, r23	; 0x05
     6e8:	08 95       	ret

000006ea <set_dph_humidity>:
}

void set_dph_humidity(SensorDataPackageHandler_t self ,float humidity)
{
	self->humidity_to_pack = humidity;
     6ea:	fc 01       	movw	r30, r24
     6ec:	46 83       	std	Z+6, r20	; 0x06
     6ee:	57 83       	std	Z+7, r21	; 0x07
     6f0:	60 87       	std	Z+8, r22	; 0x08
     6f2:	71 87       	std	Z+9, r23	; 0x09
     6f4:	08 95       	ret

000006f6 <set_dph_co2>:
}

void set_dph_co2(SensorDataPackageHandler_t self, uint16_t co2)
{
	self->co2_to_pack = co2;
     6f6:	fc 01       	movw	r30, r24
     6f8:	71 83       	std	Z+1, r23	; 0x01
     6fa:	60 83       	st	Z, r22
     6fc:	08 95       	ret

000006fe <assemble_payload>:
}


lora_payload_t assemble_payload(SensorDataPackageHandler_t self) {
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ec 01       	movw	r28, r24
     70c:	8b 01       	movw	r16, r22

	lora_payload_t uplink_payload;
	uint8_t temppayload = round(self->temperature_to_pack);
     70e:	fb 01       	movw	r30, r22
     710:	62 81       	ldd	r22, Z+2	; 0x02
     712:	73 81       	ldd	r23, Z+3	; 0x03
     714:	84 81       	ldd	r24, Z+4	; 0x04
     716:	95 81       	ldd	r25, Z+5	; 0x05
     718:	0e 94 a5 1a 	call	0x354a	; 0x354a <round>
     71c:	0e 94 13 1a 	call	0x3426	; 0x3426 <__fixunssfsi>
     720:	e6 2e       	mov	r14, r22
	uint8_t humpayload = round(self->humidity_to_pack);
     722:	f8 01       	movw	r30, r16
     724:	66 81       	ldd	r22, Z+6	; 0x06
     726:	77 81       	ldd	r23, Z+7	; 0x07
     728:	80 85       	ldd	r24, Z+8	; 0x08
     72a:	91 85       	ldd	r25, Z+9	; 0x09
     72c:	0e 94 a5 1a 	call	0x354a	; 0x354a <round>
     730:	0e 94 13 1a 	call	0x3426	; 0x3426 <__fixunssfsi>
     734:	f6 2e       	mov	r15, r22
	uint8_t co2payload = round(self->co2_to_pack);
     736:	f8 01       	movw	r30, r16
     738:	60 81       	ld	r22, Z
     73a:	71 81       	ldd	r23, Z+1	; 0x01
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 3f 1a 	call	0x347e	; 0x347e <__floatunsisf>
     744:	0e 94 a5 1a 	call	0x354a	; 0x354a <round>
     748:	0e 94 13 1a 	call	0x3426	; 0x3426 <__fixunssfsi>
     74c:	16 2f       	mov	r17, r22
	uplink_payload.bytes[2] = humpayload >> 8;
	uplink_payload.bytes[3] = humpayload & 0xFF;
	uplink_payload.bytes[4] = co2payload >> 8;
	uplink_payload.bytes[5] = co2payload & 0xFF;
	
	puts("package assembled");
     74e:	89 ea       	ldi	r24, 0xA9	; 169
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
	return uplink_payload;
     756:	1a 82       	std	Y+2, r1	; 0x02
     758:	eb 82       	std	Y+3, r14	; 0x03
     75a:	1c 82       	std	Y+4, r1	; 0x04
     75c:	fd 82       	std	Y+5, r15	; 0x05
     75e:	1e 82       	std	Y+6, r1	; 0x06
     760:	1f 83       	std	Y+7, r17	; 0x07
	
}
     762:	ce 01       	movw	r24, r28
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	08 95       	ret

00000772 <initservodriver>:
#include <rcServo.h>


void initservodriver()
{
	rcServoCreate();
     772:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <rcServoCreate>
     776:	08 95       	ret

00000778 <servo_open>:
}

void servo_open(){
	uint8_t servoNo = 0;
	
	rcServoSet(servoNo, 100);
     778:	64 e6       	ldi	r22, 0x64	; 100
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <rcServoSet>
     780:	08 95       	ret

00000782 <servo_close>:
}

void servo_close(){
	uint8_t servoNo = 0;
	
	rcServoSet(servoNo, 0);
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <rcServoSet>
     78a:	08 95       	ret

0000078c <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     78c:	e7 e0       	ldi	r30, 0x07	; 7
     78e:	f1 e0       	ldi	r31, 0x01	; 1
     790:	80 81       	ld	r24, Z
     792:	8f 60       	ori	r24, 0x0F	; 15
     794:	80 83       	st	Z, r24
     796:	08 95       	ret

00000798 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     798:	e8 e0       	ldi	r30, 0x08	; 8
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	90 81       	ld	r25, Z
     79e:	90 7f       	andi	r25, 0xF0	; 240
     7a0:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     7a2:	90 81       	ld	r25, Z
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	98 2b       	or	r25, r24
     7a8:	90 83       	st	Z, r25
     7aa:	08 95       	ret

000007ac <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     7ac:	e8 e0       	ldi	r30, 0x08	; 8
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	80 81       	ld	r24, Z
     7b2:	80 7f       	andi	r24, 0xF0	; 240
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	80 e1       	ldi	r24, 0x10	; 16
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	d1 d1       	rcall	.+930    	; 0xb64 <pvPortMalloc>
     7c2:	ec 01       	movw	r28, r24
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	39 f0       	breq	.+14     	; 0x7d6 <xEventGroupCreate+0x1e>
     7c8:	fc 01       	movw	r30, r24
     7ca:	11 92       	st	Z+, r1
     7cc:	11 92       	st	Z+, r1
     7ce:	11 92       	st	Z+, r1
     7d0:	11 92       	st	Z+, r1
     7d2:	cf 01       	movw	r24, r30
     7d4:	b1 d2       	rcall	.+1378   	; 0xd38 <vListInitialise>
     7d6:	ce 01       	movw	r24, r28
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <xEventGroupWaitBits>:
     7de:	2f 92       	push	r2
     7e0:	3f 92       	push	r3
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	4a 01       	movw	r8, r20
     806:	5b 01       	movw	r10, r22
     808:	62 2e       	mov	r6, r18
     80a:	70 2e       	mov	r7, r16
     80c:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
     810:	28 80       	ld	r2, Y
     812:	39 80       	ldd	r3, Y+1	; 0x01
     814:	4a 80       	ldd	r4, Y+2	; 0x02
     816:	5b 80       	ldd	r5, Y+3	; 0x03
     818:	01 11       	cpse	r16, r1
     81a:	0d c0       	rjmp	.+26     	; 0x836 <xEventGroupWaitBits+0x58>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	b2 01       	movw	r22, r4
     820:	a1 01       	movw	r20, r2
     822:	48 21       	and	r20, r8
     824:	59 21       	and	r21, r9
     826:	6a 21       	and	r22, r10
     828:	7b 21       	and	r23, r11
     82a:	45 2b       	or	r20, r21
     82c:	46 2b       	or	r20, r22
     82e:	47 2b       	or	r20, r23
     830:	79 f4       	brne	.+30     	; 0x850 <xEventGroupWaitBits+0x72>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0d c0       	rjmp	.+26     	; 0x850 <xEventGroupWaitBits+0x72>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	b2 01       	movw	r22, r4
     83a:	a1 01       	movw	r20, r2
     83c:	48 21       	and	r20, r8
     83e:	59 21       	and	r21, r9
     840:	6a 21       	and	r22, r10
     842:	7b 21       	and	r23, r11
     844:	48 15       	cp	r20, r8
     846:	59 05       	cpc	r21, r9
     848:	6a 05       	cpc	r22, r10
     84a:	7b 05       	cpc	r23, r11
     84c:	09 f0       	breq	.+2      	; 0x850 <xEventGroupWaitBits+0x72>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	88 23       	and	r24, r24
     852:	81 f0       	breq	.+32     	; 0x874 <xEventGroupWaitBits+0x96>
     854:	66 20       	and	r6, r6
     856:	09 f4       	brne	.+2      	; 0x85a <xEventGroupWaitBits+0x7c>
     858:	6b c0       	rjmp	.+214    	; 0x930 <xEventGroupWaitBits+0x152>
     85a:	80 94       	com	r8
     85c:	90 94       	com	r9
     85e:	a0 94       	com	r10
     860:	b0 94       	com	r11
     862:	82 20       	and	r8, r2
     864:	93 20       	and	r9, r3
     866:	a4 20       	and	r10, r4
     868:	b5 20       	and	r11, r5
     86a:	88 82       	st	Y, r8
     86c:	99 82       	std	Y+1, r9	; 0x01
     86e:	aa 82       	std	Y+2, r10	; 0x02
     870:	bb 82       	std	Y+3, r11	; 0x03
     872:	5e c0       	rjmp	.+188    	; 0x930 <xEventGroupWaitBits+0x152>
     874:	c1 14       	cp	r12, r1
     876:	d1 04       	cpc	r13, r1
     878:	e1 04       	cpc	r14, r1
     87a:	f1 04       	cpc	r15, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <xEventGroupWaitBits+0xa2>
     87e:	58 c0       	rjmp	.+176    	; 0x930 <xEventGroupWaitBits+0x152>
     880:	66 20       	and	r6, r6
     882:	29 f0       	breq	.+10     	; 0x88e <xEventGroupWaitBits+0xb0>
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	03 c0       	rjmp	.+6      	; 0x894 <xEventGroupWaitBits+0xb6>
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	ba 01       	movw	r22, r20
     894:	71 10       	cpse	r7, r1
     896:	74 60       	ori	r23, 0x04	; 4
     898:	48 29       	or	r20, r8
     89a:	59 29       	or	r21, r9
     89c:	6a 29       	or	r22, r10
     89e:	7b 29       	or	r23, r11
     8a0:	97 01       	movw	r18, r14
     8a2:	86 01       	movw	r16, r12
     8a4:	ce 01       	movw	r24, r28
     8a6:	04 96       	adiw	r24, 0x04	; 4
     8a8:	0e 94 ca 12 	call	0x2594	; 0x2594 <vTaskPlaceOnUnorderedEventList>
     8ac:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     8b0:	81 11       	cpse	r24, r1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <xEventGroupWaitBits+0xd8>
     8b4:	89 d3       	rcall	.+1810   	; 0xfc8 <vPortYield>
     8b6:	0e 94 57 14 	call	0x28ae	; 0x28ae <uxTaskResetEventItemValue>
     8ba:	91 fd       	sbrc	r25, 1
     8bc:	35 c0       	rjmp	.+106    	; 0x928 <xEventGroupWaitBits+0x14a>
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	0f 92       	push	r0
     8c4:	68 81       	ld	r22, Y
     8c6:	79 81       	ldd	r23, Y+1	; 0x01
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	9b 81       	ldd	r25, Y+3	; 0x03
     8cc:	71 10       	cpse	r7, r1
     8ce:	0d c0       	rjmp	.+26     	; 0x8ea <xEventGroupWaitBits+0x10c>
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	75 01       	movw	r14, r10
     8d4:	64 01       	movw	r12, r8
     8d6:	c6 22       	and	r12, r22
     8d8:	d7 22       	and	r13, r23
     8da:	e8 22       	and	r14, r24
     8dc:	f9 22       	and	r15, r25
     8de:	cd 28       	or	r12, r13
     8e0:	ce 28       	or	r12, r14
     8e2:	cf 28       	or	r12, r15
     8e4:	79 f4       	brne	.+30     	; 0x904 <xEventGroupWaitBits+0x126>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	0d c0       	rjmp	.+26     	; 0x904 <xEventGroupWaitBits+0x126>
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	75 01       	movw	r14, r10
     8ee:	64 01       	movw	r12, r8
     8f0:	c6 22       	and	r12, r22
     8f2:	d7 22       	and	r13, r23
     8f4:	e8 22       	and	r14, r24
     8f6:	f9 22       	and	r15, r25
     8f8:	c8 14       	cp	r12, r8
     8fa:	d9 04       	cpc	r13, r9
     8fc:	ea 04       	cpc	r14, r10
     8fe:	fb 04       	cpc	r15, r11
     900:	09 f0       	breq	.+2      	; 0x904 <xEventGroupWaitBits+0x126>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	22 23       	and	r18, r18
     906:	71 f0       	breq	.+28     	; 0x924 <xEventGroupWaitBits+0x146>
     908:	66 20       	and	r6, r6
     90a:	61 f0       	breq	.+24     	; 0x924 <xEventGroupWaitBits+0x146>
     90c:	80 94       	com	r8
     90e:	90 94       	com	r9
     910:	a0 94       	com	r10
     912:	b0 94       	com	r11
     914:	86 22       	and	r8, r22
     916:	97 22       	and	r9, r23
     918:	a8 22       	and	r10, r24
     91a:	b9 22       	and	r11, r25
     91c:	88 82       	st	Y, r8
     91e:	99 82       	std	Y+1, r9	; 0x01
     920:	aa 82       	std	Y+2, r10	; 0x02
     922:	bb 82       	std	Y+3, r11	; 0x03
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	1b 01       	movw	r2, r22
     92a:	2c 01       	movw	r4, r24
     92c:	55 24       	eor	r5, r5
     92e:	02 c0       	rjmp	.+4      	; 0x934 <xEventGroupWaitBits+0x156>
     930:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     934:	c2 01       	movw	r24, r4
     936:	b1 01       	movw	r22, r2
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	6f 90       	pop	r6
     954:	5f 90       	pop	r5
     956:	4f 90       	pop	r4
     958:	3f 90       	pop	r3
     95a:	2f 90       	pop	r2
     95c:	08 95       	ret

0000095e <xEventGroupClearBits>:
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	0f 92       	push	r0
     968:	fc 01       	movw	r30, r24
     96a:	00 81       	ld	r16, Z
     96c:	11 81       	ldd	r17, Z+1	; 0x01
     96e:	22 81       	ldd	r18, Z+2	; 0x02
     970:	33 81       	ldd	r19, Z+3	; 0x03
     972:	40 95       	com	r20
     974:	50 95       	com	r21
     976:	60 95       	com	r22
     978:	70 95       	com	r23
     97a:	40 23       	and	r20, r16
     97c:	51 23       	and	r21, r17
     97e:	62 23       	and	r22, r18
     980:	73 23       	and	r23, r19
     982:	40 83       	st	Z, r20
     984:	51 83       	std	Z+1, r21	; 0x01
     986:	62 83       	std	Z+2, r22	; 0x02
     988:	73 83       	std	Z+3, r23	; 0x03
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	c9 01       	movw	r24, r18
     990:	b8 01       	movw	r22, r16
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	ec 01       	movw	r28, r24
     9ba:	6a 01       	movw	r12, r20
     9bc:	7b 01       	movw	r14, r22
    itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9be:	8c 01       	movw	r16, r24
     9c0:	09 5f       	subi	r16, 0xF9	; 249
     9c2:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     9c4:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     9c8:	eb 85       	ldd	r30, Y+11	; 0x0b
     9ca:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     9cc:	88 81       	ld	r24, Y
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	aa 81       	ldd	r26, Y+2	; 0x02
     9d2:	bb 81       	ldd	r27, Y+3	; 0x03
     9d4:	c8 2a       	or	r12, r24
     9d6:	d9 2a       	or	r13, r25
     9d8:	ea 2a       	or	r14, r26
     9da:	fb 2a       	or	r15, r27
     9dc:	c8 82       	st	Y, r12
     9de:	d9 82       	std	Y+1, r13	; 0x01
     9e0:	ea 82       	std	Y+2, r14	; 0x02
     9e2:	fb 82       	std	Y+3, r15	; 0x03

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     9e4:	0e 17       	cp	r16, r30
     9e6:	1f 07       	cpc	r17, r31
     9e8:	09 f4       	brne	.+2      	; 0x9ec <xEventGroupSetBits+0x54>
     9ea:	45 c0       	rjmp	.+138    	; 0xa76 <xEventGroupSetBits+0xde>
     9ec:	c1 2c       	mov	r12, r1
     9ee:	d1 2c       	mov	r13, r1
     9f0:	76 01       	movw	r14, r12
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     9f2:	99 24       	eor	r9, r9
     9f4:	93 94       	inc	r9
     9f6:	81 2c       	mov	r8, r1
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
     9f8:	a4 80       	ldd	r10, Z+4	; 0x04
     9fa:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	a2 81       	ldd	r26, Z+2	; 0x02
     a02:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     a04:	ac 01       	movw	r20, r24
     a06:	bd 01       	movw	r22, r26
     a08:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     a0a:	b2 fd       	sbrc	r27, 2
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <xEventGroupSetBits+0x94>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     a0e:	48 80       	ld	r4, Y
     a10:	59 80       	ldd	r5, Y+1	; 0x01
     a12:	6a 80       	ldd	r6, Y+2	; 0x02
     a14:	7b 80       	ldd	r7, Y+3	; 0x03
     a16:	44 22       	and	r4, r20
     a18:	55 22       	and	r5, r21
     a1a:	66 22       	and	r6, r22
     a1c:	77 22       	and	r7, r23
     a1e:	29 2d       	mov	r18, r9
     a20:	45 28       	or	r4, r5
     a22:	46 28       	or	r4, r6
     a24:	47 28       	or	r4, r7
     a26:	89 f4       	brne	.+34     	; 0xa4a <xEventGroupSetBits+0xb2>
     a28:	28 2d       	mov	r18, r8
     a2a:	0f c0       	rjmp	.+30     	; 0xa4a <xEventGroupSetBits+0xb2>
     a2c:	48 80       	ld	r4, Y
     a2e:	59 80       	ldd	r5, Y+1	; 0x01
     a30:	6a 80       	ldd	r6, Y+2	; 0x02
     a32:	7b 80       	ldd	r7, Y+3	; 0x03
     a34:	44 22       	and	r4, r20
     a36:	55 22       	and	r5, r21
     a38:	66 22       	and	r6, r22
     a3a:	77 22       	and	r7, r23
     a3c:	29 2d       	mov	r18, r9
     a3e:	44 16       	cp	r4, r20
     a40:	55 06       	cpc	r5, r21
     a42:	66 06       	cpc	r6, r22
     a44:	77 06       	cpc	r7, r23
     a46:	09 f0       	breq	.+2      	; 0xa4a <xEventGroupSetBits+0xb2>
     a48:	28 2d       	mov	r18, r8
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     a4a:	22 23       	and	r18, r18
     a4c:	71 f0       	breq	.+28     	; 0xa6a <xEventGroupSetBits+0xd2>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     a4e:	b0 ff       	sbrs	r27, 0
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <xEventGroupSetBits+0xc2>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     a52:	c4 2a       	or	r12, r20
     a54:	d5 2a       	or	r13, r21
     a56:	e6 2a       	or	r14, r22
     a58:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                item before removing the task from the event list.  The
                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                that is was unblocked due to its required bits matching, rather
                than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     a5a:	48 81       	ld	r20, Y
     a5c:	59 81       	ldd	r21, Y+1	; 0x01
     a5e:	6a 81       	ldd	r22, Y+2	; 0x02
     a60:	7b 81       	ldd	r23, Y+3	; 0x03
     a62:	72 60       	ori	r23, 0x02	; 2
     a64:	cf 01       	movw	r24, r30
     a66:	0e 94 50 13 	call	0x26a0	; 0x26a0 <vTaskRemoveFromUnorderedEventList>
     a6a:	ea 2d       	mov	r30, r10
     a6c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     a6e:	0e 17       	cp	r16, r30
     a70:	1f 07       	cpc	r17, r31
     a72:	11 f6       	brne	.-124    	; 0x9f8 <xEventGroupSetBits+0x60>
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <xEventGroupSetBits+0xe4>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     a76:	c1 2c       	mov	r12, r1
     a78:	d1 2c       	mov	r13, r1
     a7a:	76 01       	movw	r14, r12
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
        bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     a7c:	c0 94       	com	r12
     a7e:	d0 94       	com	r13
     a80:	e0 94       	com	r14
     a82:	f0 94       	com	r15
     a84:	88 81       	ld	r24, Y
     a86:	99 81       	ldd	r25, Y+1	; 0x01
     a88:	aa 81       	ldd	r26, Y+2	; 0x02
     a8a:	bb 81       	ldd	r27, Y+3	; 0x03
     a8c:	c8 22       	and	r12, r24
     a8e:	d9 22       	and	r13, r25
     a90:	ea 22       	and	r14, r26
     a92:	fb 22       	and	r15, r27
     a94:	c8 82       	st	Y, r12
     a96:	d9 82       	std	Y+1, r13	; 0x01
     a98:	ea 82       	std	Y+2, r14	; 0x02
     a9a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     a9c:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     aa0:	68 81       	ld	r22, Y
     aa2:	79 81       	ldd	r23, Y+1	; 0x01
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	9b 81       	ldd	r25, Y+3	; 0x03
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	9f 90       	pop	r9
     abe:	8f 90       	pop	r8
     ac0:	7f 90       	pop	r7
     ac2:	6f 90       	pop	r6
     ac4:	5f 90       	pop	r5
     ac6:	4f 90       	pop	r4
     ac8:	08 95       	ret

00000aca <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     ad0:	ef e3       	ldi	r30, 0x3F	; 63
     ad2:	f8 e0       	ldi	r31, 0x08	; 8
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <prvInsertBlockIntoFreeList+0xe>
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	31 81       	ldd	r19, Z+1	; 0x01
     adc:	2a 17       	cp	r18, r26
     ade:	3b 07       	cpc	r19, r27
     ae0:	d0 f3       	brcs	.-12     	; 0xad6 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	af 01       	movw	r20, r30
     ae8:	48 0f       	add	r20, r24
     aea:	59 1f       	adc	r21, r25
     aec:	a4 17       	cp	r26, r20
     aee:	b5 07       	cpc	r27, r21
     af0:	49 f4       	brne	.+18     	; 0xb04 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	4d 91       	ld	r20, X+
     af6:	5c 91       	ld	r21, X
     af8:	13 97       	sbiw	r26, 0x03	; 3
     afa:	84 0f       	add	r24, r20
     afc:	95 1f       	adc	r25, r21
     afe:	93 83       	std	Z+3, r25	; 0x03
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     b04:	12 96       	adiw	r26, 0x02	; 2
     b06:	8d 91       	ld	r24, X+
     b08:	9c 91       	ld	r25, X
     b0a:	13 97       	sbiw	r26, 0x03	; 3
     b0c:	ed 01       	movw	r28, r26
     b0e:	c8 0f       	add	r28, r24
     b10:	d9 1f       	adc	r29, r25
     b12:	2c 17       	cp	r18, r28
     b14:	3d 07       	cpc	r19, r29
     b16:	d9 f4       	brne	.+54     	; 0xb4e <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     b18:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <pxEnd>
     b1c:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <pxEnd+0x1>
     b20:	c2 17       	cp	r28, r18
     b22:	d3 07       	cpc	r29, r19
     b24:	81 f0       	breq	.+32     	; 0xb46 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     b26:	2a 81       	ldd	r18, Y+2	; 0x02
     b28:	3b 81       	ldd	r19, Y+3	; 0x03
     b2a:	82 0f       	add	r24, r18
     b2c:	93 1f       	adc	r25, r19
     b2e:	13 96       	adiw	r26, 0x03	; 3
     b30:	9c 93       	st	X, r25
     b32:	8e 93       	st	-X, r24
     b34:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     b36:	c0 81       	ld	r28, Z
     b38:	d1 81       	ldd	r29, Z+1	; 0x01
     b3a:	88 81       	ld	r24, Y
     b3c:	99 81       	ldd	r25, Y+1	; 0x01
     b3e:	11 96       	adiw	r26, 0x01	; 1
     b40:	9c 93       	st	X, r25
     b42:	8e 93       	st	-X, r24
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	dc 93       	st	X, r29
     b4a:	ce 93       	st	-X, r28
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	3c 93       	st	X, r19
     b52:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     b54:	ae 17       	cp	r26, r30
     b56:	bf 07       	cpc	r27, r31
     b58:	11 f0       	breq	.+4      	; 0xb5e <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     b5a:	b1 83       	std	Z+1, r27	; 0x01
     b5c:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     b76:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     b7a:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <pxEnd>
     b7e:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <pxEnd+0x1>
     b82:	89 2b       	or	r24, r25
     b84:	41 f5       	brne	.+80     	; 0xbd6 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b86:	ef e3       	ldi	r30, 0x3F	; 63
     b88:	f8 e0       	ldi	r31, 0x08	; 8
     b8a:	a3 e4       	ldi	r26, 0x43	; 67
     b8c:	b8 e0       	ldi	r27, 0x08	; 8
     b8e:	b1 83       	std	Z+1, r27	; 0x01
     b90:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     b92:	13 82       	std	Z+3, r1	; 0x03
     b94:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     b96:	ef ed       	ldi	r30, 0xDF	; 223
     b98:	f7 e1       	ldi	r31, 0x17	; 23
     b9a:	f0 93 3e 08 	sts	0x083E, r31	; 0x80083e <pxEnd+0x1>
     b9e:	e0 93 3d 08 	sts	0x083D, r30	; 0x80083d <pxEnd>
	pxEnd->xBlockSize = 0;
     ba2:	13 82       	std	Z+3, r1	; 0x03
     ba4:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     baa:	8c e9       	ldi	r24, 0x9C	; 156
     bac:	9f e0       	ldi	r25, 0x0F	; 15
     bae:	13 96       	adiw	r26, 0x03	; 3
     bb0:	9c 93       	st	X, r25
     bb2:	8e 93       	st	-X, r24
     bb4:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     bb6:	ed 93       	st	X+, r30
     bb8:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bba:	90 93 3a 08 	sts	0x083A, r25	; 0x80083a <xMinimumEverFreeBytesRemaining+0x1>
     bbe:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bc2:	90 93 3c 08 	sts	0x083C, r25	; 0x80083c <xFreeBytesRemaining+0x1>
     bc6:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e8       	ldi	r25, 0x80	; 128
     bce:	90 93 38 08 	sts	0x0838, r25	; 0x800838 <xBlockAllocatedBit+0x1>
     bd2:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     bd6:	e0 90 37 08 	lds	r14, 0x0837	; 0x800837 <xBlockAllocatedBit>
     bda:	f0 90 38 08 	lds	r15, 0x0838	; 0x800838 <xBlockAllocatedBit+0x1>
     bde:	c7 01       	movw	r24, r14
     be0:	8c 23       	and	r24, r28
     be2:	9d 23       	and	r25, r29
     be4:	89 2b       	or	r24, r25
     be6:	09 f0       	breq	.+2      	; 0xbea <pvPortMalloc+0x86>
     be8:	66 c0       	rjmp	.+204    	; 0xcb6 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     bea:	20 97       	sbiw	r28, 0x00	; 0
     bec:	09 f4       	brne	.+2      	; 0xbf0 <pvPortMalloc+0x8c>
     bee:	66 c0       	rjmp	.+204    	; 0xcbc <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     bf0:	ae 01       	movw	r20, r28
     bf2:	4c 5f       	subi	r20, 0xFC	; 252
     bf4:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     bf6:	09 f4       	brne	.+2      	; 0xbfa <pvPortMalloc+0x96>
     bf8:	5e c0       	rjmp	.+188    	; 0xcb6 <pvPortMalloc+0x152>
     bfa:	00 91 3b 08 	lds	r16, 0x083B	; 0x80083b <xFreeBytesRemaining>
     bfe:	10 91 3c 08 	lds	r17, 0x083C	; 0x80083c <xFreeBytesRemaining+0x1>
     c02:	04 17       	cp	r16, r20
     c04:	15 07       	cpc	r17, r21
     c06:	08 f4       	brcc	.+2      	; 0xc0a <pvPortMalloc+0xa6>
     c08:	56 c0       	rjmp	.+172    	; 0xcb6 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     c0a:	c0 91 3f 08 	lds	r28, 0x083F	; 0x80083f <xStart>
     c0e:	d0 91 40 08 	lds	r29, 0x0840	; 0x800840 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     c12:	ef e3       	ldi	r30, 0x3F	; 63
     c14:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <pvPortMalloc+0xb8>
     c18:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     c1a:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c1c:	2a 81       	ldd	r18, Y+2	; 0x02
     c1e:	3b 81       	ldd	r19, Y+3	; 0x03
     c20:	24 17       	cp	r18, r20
     c22:	35 07       	cpc	r19, r21
     c24:	28 f4       	brcc	.+10     	; 0xc30 <pvPortMalloc+0xcc>
     c26:	28 81       	ld	r18, Y
     c28:	39 81       	ldd	r19, Y+1	; 0x01
     c2a:	21 15       	cp	r18, r1
     c2c:	31 05       	cpc	r19, r1
     c2e:	a1 f7       	brne	.-24     	; 0xc18 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     c30:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <pxEnd>
     c34:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <pxEnd+0x1>
     c38:	c8 17       	cp	r28, r24
     c3a:	d9 07       	cpc	r29, r25
     c3c:	e1 f1       	breq	.+120    	; 0xcb6 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     c3e:	c0 80       	ld	r12, Z
     c40:	d1 80       	ldd	r13, Z+1	; 0x01
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	c8 0e       	add	r12, r24
     c46:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     c48:	88 81       	ld	r24, Y
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	3b 81       	ldd	r19, Y+3	; 0x03
     c54:	24 1b       	sub	r18, r20
     c56:	35 0b       	sbc	r19, r21
     c58:	29 30       	cpi	r18, 0x09	; 9
     c5a:	31 05       	cpc	r19, r1
     c5c:	48 f0       	brcs	.+18     	; 0xc70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     c5e:	ce 01       	movw	r24, r28
     c60:	84 0f       	add	r24, r20
     c62:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     c64:	fc 01       	movw	r30, r24
     c66:	33 83       	std	Z+3, r19	; 0x03
     c68:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     c6a:	5b 83       	std	Y+3, r21	; 0x03
     c6c:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     c6e:	2d df       	rcall	.-422    	; 0xaca <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	08 1b       	sub	r16, r24
     c76:	19 0b       	sbc	r17, r25
     c78:	10 93 3c 08 	sts	0x083C, r17	; 0x80083c <xFreeBytesRemaining+0x1>
     c7c:	00 93 3b 08 	sts	0x083B, r16	; 0x80083b <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     c80:	20 91 39 08 	lds	r18, 0x0839	; 0x800839 <xMinimumEverFreeBytesRemaining>
     c84:	30 91 3a 08 	lds	r19, 0x083A	; 0x80083a <xMinimumEverFreeBytesRemaining+0x1>
     c88:	02 17       	cp	r16, r18
     c8a:	13 07       	cpc	r17, r19
     c8c:	20 f4       	brcc	.+8      	; 0xc96 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     c8e:	10 93 3a 08 	sts	0x083A, r17	; 0x80083a <xMinimumEverFreeBytesRemaining+0x1>
     c92:	00 93 39 08 	sts	0x0839, r16	; 0x800839 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     c96:	e8 2a       	or	r14, r24
     c98:	f9 2a       	or	r15, r25
     c9a:	fb 82       	std	Y+3, r15	; 0x03
     c9c:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     c9e:	19 82       	std	Y+1, r1	; 0x01
     ca0:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     ca2:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     ca6:	c1 14       	cp	r12, r1
     ca8:	d1 04       	cpc	r13, r1
     caa:	59 f4       	brne	.+22     	; 0xcc2 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     cac:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <vApplicationMallocFailedHook>
     cb0:	c1 2c       	mov	r12, r1
     cb2:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     cb6:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     cba:	f8 cf       	rjmp	.-16     	; 0xcac <pvPortMalloc+0x148>
     cbc:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
     cc0:	f5 cf       	rjmp	.-22     	; 0xcac <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     cc2:	c6 01       	movw	r24, r12
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	08 95       	ret

00000cd6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	51 f1       	breq	.+84     	; 0xd32 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     cde:	fc 01       	movw	r30, r24
     ce0:	34 97       	sbiw	r30, 0x04	; 4
     ce2:	22 81       	ldd	r18, Z+2	; 0x02
     ce4:	33 81       	ldd	r19, Z+3	; 0x03
     ce6:	40 91 37 08 	lds	r20, 0x0837	; 0x800837 <xBlockAllocatedBit>
     cea:	50 91 38 08 	lds	r21, 0x0838	; 0x800838 <xBlockAllocatedBit+0x1>
     cee:	b9 01       	movw	r22, r18
     cf0:	64 23       	and	r22, r20
     cf2:	75 23       	and	r23, r21
     cf4:	67 2b       	or	r22, r23
     cf6:	e9 f0       	breq	.+58     	; 0xd32 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	67 2b       	or	r22, r23
     cfe:	c9 f4       	brne	.+50     	; 0xd32 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     d00:	ef 01       	movw	r28, r30
     d02:	40 95       	com	r20
     d04:	50 95       	com	r21
     d06:	24 23       	and	r18, r20
     d08:	35 23       	and	r19, r21
     d0a:	33 83       	std	Z+3, r19	; 0x03
     d0c:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     d0e:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     d12:	20 91 3b 08 	lds	r18, 0x083B	; 0x80083b <xFreeBytesRemaining>
     d16:	30 91 3c 08 	lds	r19, 0x083C	; 0x80083c <xFreeBytesRemaining+0x1>
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	90 93 3c 08 	sts	0x083C, r25	; 0x80083c <xFreeBytesRemaining+0x1>
     d26:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     d2a:	ce 01       	movw	r24, r28
     d2c:	ce de       	rcall	.-612    	; 0xaca <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     d2e:	0e 94 9f 11 	call	0x233e	; 0x233e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d38:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d3a:	03 96       	adiw	r24, 0x03	; 3
     d3c:	92 83       	std	Z+2, r25	; 0x02
     d3e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     d40:	4f ef       	ldi	r20, 0xFF	; 255
     d42:	5f ef       	ldi	r21, 0xFF	; 255
     d44:	ba 01       	movw	r22, r20
     d46:	43 83       	std	Z+3, r20	; 0x03
     d48:	54 83       	std	Z+4, r21	; 0x04
     d4a:	65 83       	std	Z+5, r22	; 0x05
     d4c:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d4e:	90 87       	std	Z+8, r25	; 0x08
     d50:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d52:	92 87       	std	Z+10, r25	; 0x0a
     d54:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d56:	10 82       	st	Z, r1
     d58:	08 95       	ret

00000d5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     d5a:	fc 01       	movw	r30, r24
     d5c:	13 86       	std	Z+11, r1	; 0x0b
     d5e:	12 86       	std	Z+10, r1	; 0x0a
     d60:	08 95       	ret

00000d62 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	9c 01       	movw	r18, r24
     d68:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     d6a:	dc 01       	movw	r26, r24
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	cd 91       	ld	r28, X+
     d70:	dc 91       	ld	r29, X
     d72:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     d74:	d5 83       	std	Z+5, r29	; 0x05
     d76:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d78:	8e 81       	ldd	r24, Y+6	; 0x06
     d7a:	9f 81       	ldd	r25, Y+7	; 0x07
     d7c:	97 83       	std	Z+7, r25	; 0x07
     d7e:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     d80:	8e 81       	ldd	r24, Y+6	; 0x06
     d82:	9f 81       	ldd	r25, Y+7	; 0x07
     d84:	dc 01       	movw	r26, r24
     d86:	15 96       	adiw	r26, 0x05	; 5
     d88:	7c 93       	st	X, r23
     d8a:	6e 93       	st	-X, r22
     d8c:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     d8e:	7f 83       	std	Y+7, r23	; 0x07
     d90:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     d92:	33 87       	std	Z+11, r19	; 0x0b
     d94:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     d96:	f9 01       	movw	r30, r18
     d98:	80 81       	ld	r24, Z
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
     d9c:	80 83       	st	Z, r24
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     dae:	08 81       	ld	r16, Y
     db0:	19 81       	ldd	r17, Y+1	; 0x01
     db2:	2a 81       	ldd	r18, Y+2	; 0x02
     db4:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     db6:	0f 3f       	cpi	r16, 0xFF	; 255
     db8:	4f ef       	ldi	r20, 0xFF	; 255
     dba:	14 07       	cpc	r17, r20
     dbc:	24 07       	cpc	r18, r20
     dbe:	34 07       	cpc	r19, r20
     dc0:	21 f4       	brne	.+8      	; 0xdca <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     dc2:	fc 01       	movw	r30, r24
     dc4:	a1 85       	ldd	r26, Z+9	; 0x09
     dc6:	b2 85       	ldd	r27, Z+10	; 0x0a
     dc8:	11 c0       	rjmp	.+34     	; 0xdec <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     dca:	dc 01       	movw	r26, r24
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vListInsert+0x2e>
     dd0:	df 01       	movw	r26, r30
     dd2:	14 96       	adiw	r26, 0x04	; 4
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	15 97       	sbiw	r26, 0x05	; 5
     dda:	40 81       	ld	r20, Z
     ddc:	51 81       	ldd	r21, Z+1	; 0x01
     dde:	62 81       	ldd	r22, Z+2	; 0x02
     de0:	73 81       	ldd	r23, Z+3	; 0x03
     de2:	04 17       	cp	r16, r20
     de4:	15 07       	cpc	r17, r21
     de6:	26 07       	cpc	r18, r22
     de8:	37 07       	cpc	r19, r23
     dea:	90 f7       	brcc	.-28     	; 0xdd0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     dec:	14 96       	adiw	r26, 0x04	; 4
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	15 97       	sbiw	r26, 0x05	; 5
     df4:	fd 83       	std	Y+5, r31	; 0x05
     df6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     df8:	d7 83       	std	Z+7, r29	; 0x07
     dfa:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     dfc:	bf 83       	std	Y+7, r27	; 0x07
     dfe:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     e00:	15 96       	adiw	r26, 0x05	; 5
     e02:	dc 93       	st	X, r29
     e04:	ce 93       	st	-X, r28
     e06:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     e08:	9b 87       	std	Y+11, r25	; 0x0b
     e0a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 81       	ld	r18, Z
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	20 83       	st	Z, r18
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     e24:	a2 85       	ldd	r26, Z+10	; 0x0a
     e26:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e28:	c4 81       	ldd	r28, Z+4	; 0x04
     e2a:	d5 81       	ldd	r29, Z+5	; 0x05
     e2c:	86 81       	ldd	r24, Z+6	; 0x06
     e2e:	97 81       	ldd	r25, Z+7	; 0x07
     e30:	9f 83       	std	Y+7, r25	; 0x07
     e32:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e34:	c6 81       	ldd	r28, Z+6	; 0x06
     e36:	d7 81       	ldd	r29, Z+7	; 0x07
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	95 81       	ldd	r25, Z+5	; 0x05
     e3c:	9d 83       	std	Y+5, r25	; 0x05
     e3e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	8d 91       	ld	r24, X+
     e44:	9c 91       	ld	r25, X
     e46:	12 97       	sbiw	r26, 0x02	; 2
     e48:	e8 17       	cp	r30, r24
     e4a:	f9 07       	cpc	r31, r25
     e4c:	31 f4       	brne	.+12     	; 0xe5a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     e4e:	86 81       	ldd	r24, Z+6	; 0x06
     e50:	97 81       	ldd	r25, Z+7	; 0x07
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	9c 93       	st	X, r25
     e56:	8e 93       	st	-X, r24
     e58:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     e5a:	13 86       	std	Z+11, r1	; 0x0b
     e5c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     e5e:	8c 91       	ld	r24, X
     e60:	81 50       	subi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     e64:	8c 91       	ld	r24, X
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     e6c:	31 e1       	ldi	r19, 0x11	; 17
     e6e:	fc 01       	movw	r30, r24
     e70:	30 83       	st	Z, r19
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	22 e2       	ldi	r18, 0x22	; 34
     e76:	20 83       	st	Z, r18
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	a3 e3       	ldi	r26, 0x33	; 51
     e7c:	a0 83       	st	Z, r26
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	60 83       	st	Z, r22
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	70 83       	st	Z, r23
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	10 82       	st	Z, r1
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	10 82       	st	Z, r1
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	60 e8       	ldi	r22, 0x80	; 128
     e92:	60 83       	st	Z, r22
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	10 82       	st	Z, r1
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	10 82       	st	Z, r1
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	10 82       	st	Z, r1
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	60 83       	st	Z, r22
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	63 e0       	ldi	r22, 0x03	; 3
     eaa:	60 83       	st	Z, r22
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	64 e0       	ldi	r22, 0x04	; 4
     eb0:	60 83       	st	Z, r22
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	65 e0       	ldi	r22, 0x05	; 5
     eb6:	60 83       	st	Z, r22
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	60 83       	st	Z, r22
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	67 e0       	ldi	r22, 0x07	; 7
     ec2:	60 83       	st	Z, r22
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	68 e0       	ldi	r22, 0x08	; 8
     ec8:	60 83       	st	Z, r22
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	69 e0       	ldi	r22, 0x09	; 9
     ece:	60 83       	st	Z, r22
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	60 e1       	ldi	r22, 0x10	; 16
     ed4:	60 83       	st	Z, r22
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	30 83       	st	Z, r19
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	32 e1       	ldi	r19, 0x12	; 18
     ede:	30 83       	st	Z, r19
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	33 e1       	ldi	r19, 0x13	; 19
     ee4:	30 83       	st	Z, r19
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	34 e1       	ldi	r19, 0x14	; 20
     eea:	30 83       	st	Z, r19
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	35 e1       	ldi	r19, 0x15	; 21
     ef0:	30 83       	st	Z, r19
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	36 e1       	ldi	r19, 0x16	; 22
     ef6:	30 83       	st	Z, r19
     ef8:	31 97       	sbiw	r30, 0x01	; 1
     efa:	37 e1       	ldi	r19, 0x17	; 23
     efc:	30 83       	st	Z, r19
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	38 e1       	ldi	r19, 0x18	; 24
     f02:	30 83       	st	Z, r19
     f04:	31 97       	sbiw	r30, 0x01	; 1
     f06:	39 e1       	ldi	r19, 0x19	; 25
     f08:	30 83       	st	Z, r19
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	30 e2       	ldi	r19, 0x20	; 32
     f0e:	30 83       	st	Z, r19
     f10:	31 97       	sbiw	r30, 0x01	; 1
     f12:	31 e2       	ldi	r19, 0x21	; 33
     f14:	30 83       	st	Z, r19
     f16:	31 97       	sbiw	r30, 0x01	; 1
     f18:	20 83       	st	Z, r18
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	23 e2       	ldi	r18, 0x23	; 35
     f1e:	20 83       	st	Z, r18
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	40 83       	st	Z, r20
     f24:	31 97       	sbiw	r30, 0x01	; 1
     f26:	50 83       	st	Z, r21
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	26 e2       	ldi	r18, 0x26	; 38
     f2c:	20 83       	st	Z, r18
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	27 e2       	ldi	r18, 0x27	; 39
     f32:	20 83       	st	Z, r18
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	28 e2       	ldi	r18, 0x28	; 40
     f38:	20 83       	st	Z, r18
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	29 e2       	ldi	r18, 0x29	; 41
     f3e:	20 83       	st	Z, r18
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	20 e3       	ldi	r18, 0x30	; 48
     f44:	20 83       	st	Z, r18
     f46:	31 97       	sbiw	r30, 0x01	; 1
     f48:	21 e3       	ldi	r18, 0x31	; 49
     f4a:	20 83       	st	Z, r18
     f4c:	89 97       	sbiw	r24, 0x29	; 41
     f4e:	08 95       	ret

00000f50 <xPortStartScheduler>:
     f50:	a8 95       	wdr
     f52:	90 ec       	ldi	r25, 0xC0	; 192
     f54:	88 e1       	ldi	r24, 0x18	; 24
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	a8 95       	wdr
     f5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     f66:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
     f6a:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
     f6e:	cd 91       	ld	r28, X+
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	dd 91       	ld	r29, X+
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	9f 90       	pop	r9
     fa4:	8f 90       	pop	r8
     fa6:	7f 90       	pop	r7
     fa8:	6f 90       	pop	r6
     faa:	5f 90       	pop	r5
     fac:	4f 90       	pop	r4
     fae:	3f 90       	pop	r3
     fb0:	2f 90       	pop	r2
     fb2:	1f 90       	pop	r1
     fb4:	0f 90       	pop	r0
     fb6:	0c be       	out	0x3c, r0	; 60
     fb8:	0f 90       	pop	r0
     fba:	0b be       	out	0x3b, r0	; 59
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	08 95       	ret
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	08 95       	ret

00000fc8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	0f 92       	push	r0
     fd0:	0b b6       	in	r0, 0x3b	; 59
     fd2:	0f 92       	push	r0
     fd4:	0c b6       	in	r0, 0x3c	; 60
     fd6:	0f 92       	push	r0
     fd8:	1f 92       	push	r1
     fda:	11 24       	eor	r1, r1
     fdc:	2f 92       	push	r2
     fde:	3f 92       	push	r3
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    101c:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1020:	0d b6       	in	r0, 0x3d	; 61
    1022:	0d 92       	st	X+, r0
    1024:	0e b6       	in	r0, 0x3e	; 62
    1026:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1028:	0e 94 34 12 	call	0x2468	; 0x2468 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    102c:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    1030:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1034:	cd 91       	ld	r28, X+
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	dd 91       	ld	r29, X+
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	9f 90       	pop	r9
    106a:	8f 90       	pop	r8
    106c:	7f 90       	pop	r7
    106e:	6f 90       	pop	r6
    1070:	5f 90       	pop	r5
    1072:	4f 90       	pop	r4
    1074:	3f 90       	pop	r3
    1076:	2f 90       	pop	r2
    1078:	1f 90       	pop	r1
    107a:	0f 90       	pop	r0
    107c:	0c be       	out	0x3c, r0	; 60
    107e:	0f 90       	pop	r0
    1080:	0b be       	out	0x3b, r0	; 59
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1088:	08 95       	ret

0000108a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	0f 92       	push	r0
    1092:	0b b6       	in	r0, 0x3b	; 59
    1094:	0f 92       	push	r0
    1096:	0c b6       	in	r0, 0x3c	; 60
    1098:	0f 92       	push	r0
    109a:	1f 92       	push	r1
    109c:	11 24       	eor	r1, r1
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    10de:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    10e2:	0d b6       	in	r0, 0x3d	; 61
    10e4:	0d 92       	st	X+, r0
    10e6:	0e b6       	in	r0, 0x3e	; 62
    10e8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    10ea:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    10ec:	0e 94 ca 10 	call	0x2194	; 0x2194 <xTaskIncrementTick>
    10f0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    10f2:	0e 94 34 12 	call	0x2468	; 0x2468 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    10f6:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    10fa:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    10fe:	cd 91       	ld	r28, X+
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	dd 91       	ld	r29, X+
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	7f 90       	pop	r7
    1138:	6f 90       	pop	r6
    113a:	5f 90       	pop	r5
    113c:	4f 90       	pop	r4
    113e:	3f 90       	pop	r3
    1140:	2f 90       	pop	r2
    1142:	1f 90       	pop	r1
    1144:	0f 90       	pop	r0
    1146:	0c be       	out	0x3c, r0	; 60
    1148:	0f 90       	pop	r0
    114a:	0b be       	out	0x3b, r0	; 59
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1152:	08 95       	ret

00001154 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1154:	9a df       	rcall	.-204    	; 0x108a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1156:	18 95       	reti

00001158 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	0f 92       	push	r0
    115e:	fc 01       	movw	r30, r24
    1160:	96 8d       	ldd	r25, Z+30	; 0x1e
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	91 11       	cpse	r25, r1
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret

0000116e <prvCopyDataToQueue>:
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	04 2f       	mov	r16, r20
    117a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    117c:	48 a1       	ldd	r20, Y+32	; 0x20
    117e:	41 11       	cpse	r20, r1
    1180:	0c c0       	rjmp	.+24     	; 0x119a <prvCopyDataToQueue+0x2c>
    1182:	88 81       	ld	r24, Y
    1184:	99 81       	ldd	r25, Y+1	; 0x01
    1186:	89 2b       	or	r24, r25
    1188:	09 f0       	breq	.+2      	; 0x118c <prvCopyDataToQueue+0x1e>
    118a:	42 c0       	rjmp	.+132    	; 0x1210 <prvCopyDataToQueue+0xa2>
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	0e 94 17 14 	call	0x282e	; 0x282e <xTaskPriorityDisinherit>
    1194:	1d 82       	std	Y+5, r1	; 0x05
    1196:	1c 82       	std	Y+4, r1	; 0x04
    1198:	42 c0       	rjmp	.+132    	; 0x121e <prvCopyDataToQueue+0xb0>
    119a:	01 11       	cpse	r16, r1
    119c:	17 c0       	rjmp	.+46     	; 0x11cc <prvCopyDataToQueue+0x5e>
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    11a8:	28 a1       	ldd	r18, Y+32	; 0x20
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	9b 81       	ldd	r25, Y+3	; 0x03
    11ae:	82 0f       	add	r24, r18
    11b0:	91 1d       	adc	r25, r1
    11b2:	9b 83       	std	Y+3, r25	; 0x03
    11b4:	8a 83       	std	Y+2, r24	; 0x02
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	82 17       	cp	r24, r18
    11bc:	93 07       	cpc	r25, r19
    11be:	50 f1       	brcs	.+84     	; 0x1214 <prvCopyDataToQueue+0xa6>
    11c0:	88 81       	ld	r24, Y
    11c2:	99 81       	ldd	r25, Y+1	; 0x01
    11c4:	9b 83       	std	Y+3, r25	; 0x03
    11c6:	8a 83       	std	Y+2, r24	; 0x02
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	29 c0       	rjmp	.+82     	; 0x121e <prvCopyDataToQueue+0xb0>
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	9f 81       	ldd	r25, Y+7	; 0x07
    11d2:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    11d6:	88 a1       	ldd	r24, Y+32	; 0x20
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	91 95       	neg	r25
    11dc:	81 95       	neg	r24
    11de:	91 09       	sbc	r25, r1
    11e0:	2e 81       	ldd	r18, Y+6	; 0x06
    11e2:	3f 81       	ldd	r19, Y+7	; 0x07
    11e4:	28 0f       	add	r18, r24
    11e6:	39 1f       	adc	r19, r25
    11e8:	3f 83       	std	Y+7, r19	; 0x07
    11ea:	2e 83       	std	Y+6, r18	; 0x06
    11ec:	48 81       	ld	r20, Y
    11ee:	59 81       	ldd	r21, Y+1	; 0x01
    11f0:	24 17       	cp	r18, r20
    11f2:	35 07       	cpc	r19, r21
    11f4:	30 f4       	brcc	.+12     	; 0x1202 <prvCopyDataToQueue+0x94>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	9f 83       	std	Y+7, r25	; 0x07
    1200:	8e 83       	std	Y+6, r24	; 0x06
    1202:	02 30       	cpi	r16, 0x02	; 2
    1204:	49 f4       	brne	.+18     	; 0x1218 <prvCopyDataToQueue+0xaa>
    1206:	11 23       	and	r17, r17
    1208:	49 f0       	breq	.+18     	; 0x121c <prvCopyDataToQueue+0xae>
    120a:	11 50       	subi	r17, 0x01	; 1
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	07 c0       	rjmp	.+14     	; 0x121e <prvCopyDataToQueue+0xb0>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	05 c0       	rjmp	.+10     	; 0x121e <prvCopyDataToQueue+0xb0>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	03 c0       	rjmp	.+6      	; 0x121e <prvCopyDataToQueue+0xb0>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	01 c0       	rjmp	.+2      	; 0x121e <prvCopyDataToQueue+0xb0>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	1f 5f       	subi	r17, 0xFF	; 255
    1220:	1e 8f       	std	Y+30, r17	; 0x1e
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <prvCopyDataFromQueue>:
    122c:	fc 01       	movw	r30, r24
    122e:	40 a1       	ldd	r20, Z+32	; 0x20
    1230:	44 23       	and	r20, r20
    1232:	a9 f0       	breq	.+42     	; 0x125e <prvCopyDataFromQueue+0x32>
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	26 81       	ldd	r18, Z+6	; 0x06
    1238:	37 81       	ldd	r19, Z+7	; 0x07
    123a:	24 0f       	add	r18, r20
    123c:	35 1f       	adc	r19, r21
    123e:	37 83       	std	Z+7, r19	; 0x07
    1240:	26 83       	std	Z+6, r18	; 0x06
    1242:	84 81       	ldd	r24, Z+4	; 0x04
    1244:	95 81       	ldd	r25, Z+5	; 0x05
    1246:	28 17       	cp	r18, r24
    1248:	39 07       	cpc	r19, r25
    124a:	20 f0       	brcs	.+8      	; 0x1254 <prvCopyDataFromQueue+0x28>
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	97 83       	std	Z+7, r25	; 0x07
    1252:	86 83       	std	Z+6, r24	; 0x06
    1254:	cb 01       	movw	r24, r22
    1256:	66 81       	ldd	r22, Z+6	; 0x06
    1258:	77 81       	ldd	r23, Z+7	; 0x07
    125a:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <memcpy>
    125e:	08 95       	ret

00001260 <prvUnlockQueue>:
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	8c 01       	movw	r16, r24
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	0f 92       	push	r0
    1272:	fc 01       	movw	r30, r24
    1274:	c2 a1       	ldd	r28, Z+34	; 0x22
    1276:	1c 16       	cp	r1, r28
    1278:	ac f4       	brge	.+42     	; 0x12a4 <prvUnlockQueue+0x44>
    127a:	83 89       	ldd	r24, Z+19	; 0x13
    127c:	81 11       	cpse	r24, r1
    127e:	06 c0       	rjmp	.+12     	; 0x128c <prvUnlockQueue+0x2c>
    1280:	11 c0       	rjmp	.+34     	; 0x12a4 <prvUnlockQueue+0x44>
    1282:	f8 01       	movw	r30, r16
    1284:	83 89       	ldd	r24, Z+19	; 0x13
    1286:	81 11       	cpse	r24, r1
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <prvUnlockQueue+0x34>
    128a:	0c c0       	rjmp	.+24     	; 0x12a4 <prvUnlockQueue+0x44>
    128c:	78 01       	movw	r14, r16
    128e:	f3 e1       	ldi	r31, 0x13	; 19
    1290:	ef 0e       	add	r14, r31
    1292:	f1 1c       	adc	r15, r1
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    129a:	81 11       	cpse	r24, r1
    129c:	0e 94 00 14 	call	0x2800	; 0x2800 <vTaskMissedYield>
    12a0:	c1 50       	subi	r28, 0x01	; 1
    12a2:	79 f7       	brne	.-34     	; 0x1282 <prvUnlockQueue+0x22>
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	f8 01       	movw	r30, r16
    12a8:	82 a3       	std	Z+34, r24	; 0x22
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	0f 92       	push	r0
    12b4:	c1 a1       	ldd	r28, Z+33	; 0x21
    12b6:	1c 16       	cp	r1, r28
    12b8:	ac f4       	brge	.+42     	; 0x12e4 <prvUnlockQueue+0x84>
    12ba:	80 85       	ldd	r24, Z+8	; 0x08
    12bc:	81 11       	cpse	r24, r1
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <prvUnlockQueue+0x6c>
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <prvUnlockQueue+0x84>
    12c2:	f8 01       	movw	r30, r16
    12c4:	80 85       	ldd	r24, Z+8	; 0x08
    12c6:	81 11       	cpse	r24, r1
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <prvUnlockQueue+0x74>
    12ca:	0c c0       	rjmp	.+24     	; 0x12e4 <prvUnlockQueue+0x84>
    12cc:	78 01       	movw	r14, r16
    12ce:	f8 e0       	ldi	r31, 0x08	; 8
    12d0:	ef 0e       	add	r14, r31
    12d2:	f1 1c       	adc	r15, r1
    12d4:	c7 01       	movw	r24, r14
    12d6:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    12da:	81 11       	cpse	r24, r1
    12dc:	0e 94 00 14 	call	0x2800	; 0x2800 <vTaskMissedYield>
    12e0:	c1 50       	subi	r28, 0x01	; 1
    12e2:	79 f7       	brne	.-34     	; 0x12c2 <prvUnlockQueue+0x62>
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	f8 01       	movw	r30, r16
    12e8:	81 a3       	std	Z+33, r24	; 0x21
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	08 95       	ret

000012fa <xQueueGenericReset>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	0f 92       	push	r0
    1306:	e8 81       	ld	r30, Y
    1308:	f9 81       	ldd	r31, Y+1	; 0x01
    130a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    130c:	28 a1       	ldd	r18, Y+32	; 0x20
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	82 9f       	mul	r24, r18
    1314:	a0 01       	movw	r20, r0
    1316:	83 9f       	mul	r24, r19
    1318:	50 0d       	add	r21, r0
    131a:	92 9f       	mul	r25, r18
    131c:	50 0d       	add	r21, r0
    131e:	11 24       	eor	r1, r1
    1320:	4e 0f       	add	r20, r30
    1322:	5f 1f       	adc	r21, r31
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	1e 8e       	std	Y+30, r1	; 0x1e
    132a:	fb 83       	std	Y+3, r31	; 0x03
    132c:	ea 83       	std	Y+2, r30	; 0x02
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	82 9f       	mul	r24, r18
    1332:	a0 01       	movw	r20, r0
    1334:	83 9f       	mul	r24, r19
    1336:	50 0d       	add	r21, r0
    1338:	92 9f       	mul	r25, r18
    133a:	50 0d       	add	r21, r0
    133c:	11 24       	eor	r1, r1
    133e:	cf 01       	movw	r24, r30
    1340:	84 0f       	add	r24, r20
    1342:	95 1f       	adc	r25, r21
    1344:	9f 83       	std	Y+7, r25	; 0x07
    1346:	8e 83       	std	Y+6, r24	; 0x06
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	89 a3       	std	Y+33, r24	; 0x21
    134c:	8a a3       	std	Y+34, r24	; 0x22
    134e:	61 11       	cpse	r22, r1
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <xQueueGenericReset+0x6e>
    1352:	88 85       	ldd	r24, Y+8	; 0x08
    1354:	88 23       	and	r24, r24
    1356:	71 f0       	breq	.+28     	; 0x1374 <xQueueGenericReset+0x7a>
    1358:	ce 01       	movw	r24, r28
    135a:	08 96       	adiw	r24, 0x08	; 8
    135c:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    1360:	88 23       	and	r24, r24
    1362:	41 f0       	breq	.+16     	; 0x1374 <xQueueGenericReset+0x7a>
    1364:	31 de       	rcall	.-926    	; 0xfc8 <vPortYield>
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <xQueueGenericReset+0x7a>
    1368:	ce 01       	movw	r24, r28
    136a:	08 96       	adiw	r24, 0x08	; 8
    136c:	e5 dc       	rcall	.-1590   	; 0xd38 <vListInitialise>
    136e:	ce 01       	movw	r24, r28
    1370:	43 96       	adiw	r24, 0x13	; 19
    1372:	e2 dc       	rcall	.-1596   	; 0xd38 <vListInitialise>
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <xQueueGenericCreate>:
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	08 2f       	mov	r16, r24
    138c:	16 2f       	mov	r17, r22
    138e:	f4 2e       	mov	r15, r20
    1390:	66 23       	and	r22, r22
    1392:	b9 f0       	breq	.+46     	; 0x13c2 <xQueueGenericCreate+0x42>
    1394:	86 9f       	mul	r24, r22
    1396:	c0 01       	movw	r24, r0
    1398:	11 24       	eor	r1, r1
    139a:	85 96       	adiw	r24, 0x25	; 37
    139c:	e3 db       	rcall	.-2106   	; 0xb64 <pvPortMalloc>
    139e:	ec 01       	movw	r28, r24
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	41 f4       	brne	.+16     	; 0x13b4 <xQueueGenericCreate+0x34>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <xQueueGenericCreate+0x4e>
    13a6:	0f 8f       	std	Y+31, r16	; 0x1f
    13a8:	18 a3       	std	Y+32, r17	; 0x20
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	ce 01       	movw	r24, r28
    13ae:	a5 df       	rcall	.-182    	; 0x12fa <xQueueGenericReset>
    13b0:	fc a2       	std	Y+36, r15	; 0x24
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <xQueueGenericCreate+0x4e>
    13b4:	85 96       	adiw	r24, 0x25	; 37
    13b6:	99 83       	std	Y+1, r25	; 0x01
    13b8:	88 83       	st	Y, r24
    13ba:	f5 cf       	rjmp	.-22     	; 0x13a6 <xQueueGenericCreate+0x26>
    13bc:	d9 83       	std	Y+1, r29	; 0x01
    13be:	c8 83       	st	Y, r28
    13c0:	f2 cf       	rjmp	.-28     	; 0x13a6 <xQueueGenericCreate+0x26>
    13c2:	85 e2       	ldi	r24, 0x25	; 37
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	ce db       	rcall	.-2148   	; 0xb64 <pvPortMalloc>
    13c8:	ec 01       	movw	r28, r24
    13ca:	89 2b       	or	r24, r25
    13cc:	b9 f7       	brne	.-18     	; 0x13bc <xQueueGenericCreate+0x3c>
    13ce:	ce 01       	movw	r24, r28
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	08 95       	ret

000013dc <xQueueGenericSend>:
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	29 97       	sbiw	r28, 0x09	; 9
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	7c 01       	movw	r14, r24
    1404:	5b 01       	movw	r10, r22
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	3f 83       	std	Y+7, r19	; 0x07
    140a:	48 87       	std	Y+8, r20	; 0x08
    140c:	59 87       	std	Y+9, r21	; 0x09
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	99 24       	eor	r9, r9
    1412:	93 94       	inc	r9
    1414:	6c 01       	movw	r12, r24
    1416:	88 e0       	ldi	r24, 0x08	; 8
    1418:	c8 0e       	add	r12, r24
    141a:	d1 1c       	adc	r13, r1
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	0f 92       	push	r0
    1422:	f7 01       	movw	r30, r14
    1424:	96 8d       	ldd	r25, Z+30	; 0x1e
    1426:	87 8d       	ldd	r24, Z+31	; 0x1f
    1428:	98 17       	cp	r25, r24
    142a:	10 f0       	brcs	.+4      	; 0x1430 <xQueueGenericSend+0x54>
    142c:	02 30       	cpi	r16, 0x02	; 2
    142e:	b1 f4       	brne	.+44     	; 0x145c <xQueueGenericSend+0x80>
    1430:	40 2f       	mov	r20, r16
    1432:	b5 01       	movw	r22, r10
    1434:	c7 01       	movw	r24, r14
    1436:	9b de       	rcall	.-714    	; 0x116e <prvCopyDataToQueue>
    1438:	f7 01       	movw	r30, r14
    143a:	93 89       	ldd	r25, Z+19	; 0x13
    143c:	99 23       	and	r25, r25
    143e:	41 f0       	breq	.+16     	; 0x1450 <xQueueGenericSend+0x74>
    1440:	c7 01       	movw	r24, r14
    1442:	43 96       	adiw	r24, 0x13	; 19
    1444:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    1448:	88 23       	and	r24, r24
    144a:	21 f0       	breq	.+8      	; 0x1454 <xQueueGenericSend+0x78>
    144c:	bd dd       	rcall	.-1158   	; 0xfc8 <vPortYield>
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <xQueueGenericSend+0x78>
    1450:	81 11       	cpse	r24, r1
    1452:	ba dd       	rcall	.-1164   	; 0xfc8 <vPortYield>
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	4e c0       	rjmp	.+156    	; 0x14f8 <xQueueGenericSend+0x11c>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	a8 85       	ldd	r26, Y+8	; 0x08
    1462:	b9 85       	ldd	r27, Y+9	; 0x09
    1464:	89 2b       	or	r24, r25
    1466:	8a 2b       	or	r24, r26
    1468:	8b 2b       	or	r24, r27
    146a:	21 f4       	brne	.+8      	; 0x1474 <xQueueGenericSend+0x98>
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	42 c0       	rjmp	.+132    	; 0x14f8 <xQueueGenericSend+0x11c>
    1474:	11 11       	cpse	r17, r1
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <xQueueGenericSend+0xa6>
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	0e 94 9a 13 	call	0x2734	; 0x2734 <vTaskInternalSetTimeOutState>
    1480:	19 2d       	mov	r17, r9
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	72 d6       	rcall	.+3300   	; 0x216c <vTaskSuspendAll>
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	0f 92       	push	r0
    148e:	f7 01       	movw	r30, r14
    1490:	81 a1       	ldd	r24, Z+33	; 0x21
    1492:	8f 3f       	cpi	r24, 0xFF	; 255
    1494:	09 f4       	brne	.+2      	; 0x1498 <xQueueGenericSend+0xbc>
    1496:	11 a2       	std	Z+33, r1	; 0x21
    1498:	f7 01       	movw	r30, r14
    149a:	82 a1       	ldd	r24, Z+34	; 0x22
    149c:	8f 3f       	cpi	r24, 0xFF	; 255
    149e:	09 f4       	brne	.+2      	; 0x14a2 <xQueueGenericSend+0xc6>
    14a0:	12 a2       	std	Z+34, r1	; 0x22
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	be 01       	movw	r22, r28
    14a8:	6a 5f       	subi	r22, 0xFA	; 250
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 ab 13 	call	0x2756	; 0x2756 <xTaskCheckForTimeOut>
    14b4:	81 11       	cpse	r24, r1
    14b6:	1c c0       	rjmp	.+56     	; 0x14f0 <xQueueGenericSend+0x114>
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	0f 92       	push	r0
    14be:	f7 01       	movw	r30, r14
    14c0:	96 8d       	ldd	r25, Z+30	; 0x1e
    14c2:	87 8d       	ldd	r24, Z+31	; 0x1f
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	98 13       	cpse	r25, r24
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <xQueueGenericSend+0x10c>
    14cc:	4e 81       	ldd	r20, Y+6	; 0x06
    14ce:	5f 81       	ldd	r21, Y+7	; 0x07
    14d0:	68 85       	ldd	r22, Y+8	; 0x08
    14d2:	79 85       	ldd	r23, Y+9	; 0x09
    14d4:	c6 01       	movw	r24, r12
    14d6:	0e 94 b3 12 	call	0x2566	; 0x2566 <vTaskPlaceOnEventList>
    14da:	c7 01       	movw	r24, r14
    14dc:	c1 de       	rcall	.-638    	; 0x1260 <prvUnlockQueue>
    14de:	2f d7       	rcall	.+3678   	; 0x233e <xTaskResumeAll>
    14e0:	81 11       	cpse	r24, r1
    14e2:	9c cf       	rjmp	.-200    	; 0x141c <xQueueGenericSend+0x40>
    14e4:	71 dd       	rcall	.-1310   	; 0xfc8 <vPortYield>
    14e6:	9a cf       	rjmp	.-204    	; 0x141c <xQueueGenericSend+0x40>
    14e8:	c7 01       	movw	r24, r14
    14ea:	ba de       	rcall	.-652    	; 0x1260 <prvUnlockQueue>
    14ec:	28 d7       	rcall	.+3664   	; 0x233e <xTaskResumeAll>
    14ee:	96 cf       	rjmp	.-212    	; 0x141c <xQueueGenericSend+0x40>
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 de       	rcall	.-660    	; 0x1260 <prvUnlockQueue>
    14f4:	24 d7       	rcall	.+3656   	; 0x233e <xTaskResumeAll>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	29 96       	adiw	r28, 0x09	; 9
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	08 95       	ret

0000151c <xQueueGenericSendFromISR>:
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	8a 01       	movw	r16, r20
    152a:	fc 01       	movw	r30, r24
    152c:	56 8d       	ldd	r21, Z+30	; 0x1e
    152e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1530:	53 17       	cp	r21, r19
    1532:	10 f0       	brcs	.+4      	; 0x1538 <xQueueGenericSendFromISR+0x1c>
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	e9 f4       	brne	.+58     	; 0x1572 <xQueueGenericSendFromISR+0x56>
    1538:	42 2f       	mov	r20, r18
    153a:	78 01       	movw	r14, r16
    153c:	ec 01       	movw	r28, r24
    153e:	1a a1       	ldd	r17, Y+34	; 0x22
    1540:	16 de       	rcall	.-980    	; 0x116e <prvCopyDataToQueue>
    1542:	1f 3f       	cpi	r17, 0xFF	; 255
    1544:	81 f4       	brne	.+32     	; 0x1566 <xQueueGenericSendFromISR+0x4a>
    1546:	8b 89       	ldd	r24, Y+19	; 0x13
    1548:	88 23       	and	r24, r24
    154a:	a9 f0       	breq	.+42     	; 0x1576 <xQueueGenericSendFromISR+0x5a>
    154c:	ce 01       	movw	r24, r28
    154e:	43 96       	adiw	r24, 0x13	; 19
    1550:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    1554:	88 23       	and	r24, r24
    1556:	89 f0       	breq	.+34     	; 0x157a <xQueueGenericSendFromISR+0x5e>
    1558:	e1 14       	cp	r14, r1
    155a:	f1 04       	cpc	r15, r1
    155c:	81 f0       	breq	.+32     	; 0x157e <xQueueGenericSendFromISR+0x62>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	f7 01       	movw	r30, r14
    1562:	80 83       	st	Z, r24
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <xQueueGenericSendFromISR+0x64>
    1566:	ff 24       	eor	r15, r15
    1568:	f3 94       	inc	r15
    156a:	f1 0e       	add	r15, r17
    156c:	fa a2       	std	Y+34, r15	; 0x22
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <xQueueGenericSendFromISR+0x64>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <xQueueGenericSendFromISR+0x64>
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <xQueueGenericSendFromISR+0x64>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <xQueueGenericSendFromISR+0x64>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	08 95       	ret

0000158e <xQueueReceive>:
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	29 97       	sbiw	r28, 0x09	; 9
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	8c 01       	movw	r16, r24
    15b6:	5b 01       	movw	r10, r22
    15b8:	2e 83       	std	Y+6, r18	; 0x06
    15ba:	3f 83       	std	Y+7, r19	; 0x07
    15bc:	48 87       	std	Y+8, r20	; 0x08
    15be:	59 87       	std	Y+9, r21	; 0x09
    15c0:	e1 2c       	mov	r14, r1
    15c2:	99 24       	eor	r9, r9
    15c4:	93 94       	inc	r9
    15c6:	6c 01       	movw	r12, r24
    15c8:	83 e1       	ldi	r24, 0x13	; 19
    15ca:	c8 0e       	add	r12, r24
    15cc:	d1 1c       	adc	r13, r1
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	0f 92       	push	r0
    15d4:	f8 01       	movw	r30, r16
    15d6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    15d8:	ff 20       	and	r15, r15
    15da:	99 f0       	breq	.+38     	; 0x1602 <xQueueReceive+0x74>
    15dc:	b5 01       	movw	r22, r10
    15de:	c8 01       	movw	r24, r16
    15e0:	25 de       	rcall	.-950    	; 0x122c <prvCopyDataFromQueue>
    15e2:	fa 94       	dec	r15
    15e4:	f8 01       	movw	r30, r16
    15e6:	f6 8e       	std	Z+30, r15	; 0x1e
    15e8:	80 85       	ldd	r24, Z+8	; 0x08
    15ea:	88 23       	and	r24, r24
    15ec:	31 f0       	breq	.+12     	; 0x15fa <xQueueReceive+0x6c>
    15ee:	c8 01       	movw	r24, r16
    15f0:	08 96       	adiw	r24, 0x08	; 8
    15f2:	0e 94 0e 13 	call	0x261c	; 0x261c <xTaskRemoveFromEventList>
    15f6:	81 11       	cpse	r24, r1
    15f8:	e7 dc       	rcall	.-1586   	; 0xfc8 <vPortYield>
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	4c c0       	rjmp	.+152    	; 0x169a <xQueueReceive+0x10c>
    1602:	8e 81       	ldd	r24, Y+6	; 0x06
    1604:	9f 81       	ldd	r25, Y+7	; 0x07
    1606:	a8 85       	ldd	r26, Y+8	; 0x08
    1608:	b9 85       	ldd	r27, Y+9	; 0x09
    160a:	89 2b       	or	r24, r25
    160c:	8a 2b       	or	r24, r26
    160e:	8b 2b       	or	r24, r27
    1610:	21 f4       	brne	.+8      	; 0x161a <xQueueReceive+0x8c>
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	40 c0       	rjmp	.+128    	; 0x169a <xQueueReceive+0x10c>
    161a:	e1 10       	cpse	r14, r1
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <xQueueReceive+0x9a>
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	0e 94 9a 13 	call	0x2734	; 0x2734 <vTaskInternalSetTimeOutState>
    1626:	e9 2c       	mov	r14, r9
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	9f d5       	rcall	.+2878   	; 0x216c <vTaskSuspendAll>
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	0f 92       	push	r0
    1634:	f8 01       	movw	r30, r16
    1636:	81 a1       	ldd	r24, Z+33	; 0x21
    1638:	8f 3f       	cpi	r24, 0xFF	; 255
    163a:	09 f4       	brne	.+2      	; 0x163e <xQueueReceive+0xb0>
    163c:	11 a2       	std	Z+33, r1	; 0x21
    163e:	f8 01       	movw	r30, r16
    1640:	82 a1       	ldd	r24, Z+34	; 0x22
    1642:	8f 3f       	cpi	r24, 0xFF	; 255
    1644:	09 f4       	brne	.+2      	; 0x1648 <xQueueReceive+0xba>
    1646:	12 a2       	std	Z+34, r1	; 0x22
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	be 01       	movw	r22, r28
    164e:	6a 5f       	subi	r22, 0xFA	; 250
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 ab 13 	call	0x2756	; 0x2756 <xTaskCheckForTimeOut>
    165a:	81 11       	cpse	r24, r1
    165c:	15 c0       	rjmp	.+42     	; 0x1688 <xQueueReceive+0xfa>
    165e:	c8 01       	movw	r24, r16
    1660:	7b dd       	rcall	.-1290   	; 0x1158 <prvIsQueueEmpty>
    1662:	88 23       	and	r24, r24
    1664:	69 f0       	breq	.+26     	; 0x1680 <xQueueReceive+0xf2>
    1666:	4e 81       	ldd	r20, Y+6	; 0x06
    1668:	5f 81       	ldd	r21, Y+7	; 0x07
    166a:	68 85       	ldd	r22, Y+8	; 0x08
    166c:	79 85       	ldd	r23, Y+9	; 0x09
    166e:	c6 01       	movw	r24, r12
    1670:	7a d7       	rcall	.+3828   	; 0x2566 <vTaskPlaceOnEventList>
    1672:	c8 01       	movw	r24, r16
    1674:	f5 dd       	rcall	.-1046   	; 0x1260 <prvUnlockQueue>
    1676:	63 d6       	rcall	.+3270   	; 0x233e <xTaskResumeAll>
    1678:	81 11       	cpse	r24, r1
    167a:	a9 cf       	rjmp	.-174    	; 0x15ce <xQueueReceive+0x40>
    167c:	a5 dc       	rcall	.-1718   	; 0xfc8 <vPortYield>
    167e:	a7 cf       	rjmp	.-178    	; 0x15ce <xQueueReceive+0x40>
    1680:	c8 01       	movw	r24, r16
    1682:	ee dd       	rcall	.-1060   	; 0x1260 <prvUnlockQueue>
    1684:	5c d6       	rcall	.+3256   	; 0x233e <xTaskResumeAll>
    1686:	a3 cf       	rjmp	.-186    	; 0x15ce <xQueueReceive+0x40>
    1688:	c8 01       	movw	r24, r16
    168a:	ea dd       	rcall	.-1068   	; 0x1260 <prvUnlockQueue>
    168c:	58 d6       	rcall	.+3248   	; 0x233e <xTaskResumeAll>
    168e:	c8 01       	movw	r24, r16
    1690:	63 dd       	rcall	.-1338   	; 0x1158 <prvIsQueueEmpty>
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <xQueueReceive+0x10a>
    1696:	9b cf       	rjmp	.-202    	; 0x15ce <xQueueReceive+0x40>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	29 96       	adiw	r28, 0x09	; 9
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	08 95       	ret

000016be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	0f 92       	push	r0
    16ca:	89 a1       	ldd	r24, Y+33	; 0x21
    16cc:	8f 3f       	cpi	r24, 0xFF	; 255
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <vQueueWaitForMessageRestricted+0x14>
    16d0:	19 a2       	std	Y+33, r1	; 0x21
    16d2:	8a a1       	ldd	r24, Y+34	; 0x22
    16d4:	8f 3f       	cpi	r24, 0xFF	; 255
    16d6:	09 f4       	brne	.+2      	; 0x16da <vQueueWaitForMessageRestricted+0x1c>
    16d8:	1a a2       	std	Y+34, r1	; 0x22
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16e0:	81 11       	cpse	r24, r1
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16e4:	ce 01       	movw	r24, r28
    16e6:	43 96       	adiw	r24, 0x13	; 19
    16e8:	79 d7       	rcall	.+3826   	; 0x25dc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    16ea:	ce 01       	movw	r24, r28
    16ec:	b9 dd       	rcall	.-1166   	; 0x1260 <prvUnlockQueue>
    }
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <prvBytesInBuffer>:
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
}
    16f4:	fc 01       	movw	r30, r24
    16f6:	44 81       	ldd	r20, Z+4	; 0x04
    16f8:	55 81       	ldd	r21, Z+5	; 0x05
    16fa:	22 81       	ldd	r18, Z+2	; 0x02
    16fc:	33 81       	ldd	r19, Z+3	; 0x03
    16fe:	24 0f       	add	r18, r20
    1700:	35 1f       	adc	r19, r21
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	b9 01       	movw	r22, r18
    1708:	68 1b       	sub	r22, r24
    170a:	79 0b       	sbc	r23, r25
    170c:	cb 01       	movw	r24, r22
    170e:	64 17       	cp	r22, r20
    1710:	75 07       	cpc	r23, r21
    1712:	10 f0       	brcs	.+4      	; 0x1718 <prvBytesInBuffer+0x24>
    1714:	84 1b       	sub	r24, r20
    1716:	95 0b       	sbc	r25, r21
    1718:	08 95       	ret

0000171a <prvWriteBytesToBuffer>:
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	6c 01       	movw	r12, r24
    1730:	5b 01       	movw	r10, r22
    1732:	7a 01       	movw	r14, r20
    1734:	fc 01       	movw	r30, r24
    1736:	c2 81       	ldd	r28, Z+2	; 0x02
    1738:	d3 81       	ldd	r29, Z+3	; 0x03
    173a:	04 81       	ldd	r16, Z+4	; 0x04
    173c:	15 81       	ldd	r17, Z+5	; 0x05
    173e:	0c 1b       	sub	r16, r28
    1740:	1d 0b       	sbc	r17, r29
    1742:	40 17       	cp	r20, r16
    1744:	51 07       	cpc	r21, r17
    1746:	08 f4       	brcc	.+2      	; 0x174a <prvWriteBytesToBuffer+0x30>
    1748:	8a 01       	movw	r16, r20
    174a:	f6 01       	movw	r30, r12
    174c:	84 85       	ldd	r24, Z+12	; 0x0c
    174e:	95 85       	ldd	r25, Z+13	; 0x0d
    1750:	a8 01       	movw	r20, r16
    1752:	b5 01       	movw	r22, r10
    1754:	8c 0f       	add	r24, r28
    1756:	9d 1f       	adc	r25, r29
    1758:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    175c:	0e 15       	cp	r16, r14
    175e:	1f 05       	cpc	r17, r15
    1760:	58 f4       	brcc	.+22     	; 0x1778 <prvWriteBytesToBuffer+0x5e>
    1762:	a7 01       	movw	r20, r14
    1764:	40 1b       	sub	r20, r16
    1766:	51 0b       	sbc	r21, r17
    1768:	b5 01       	movw	r22, r10
    176a:	60 0f       	add	r22, r16
    176c:	71 1f       	adc	r23, r17
    176e:	f6 01       	movw	r30, r12
    1770:	84 85       	ldd	r24, Z+12	; 0x0c
    1772:	95 85       	ldd	r25, Z+13	; 0x0d
    1774:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    1778:	ce 01       	movw	r24, r28
    177a:	8e 0d       	add	r24, r14
    177c:	9f 1d       	adc	r25, r15
    177e:	f6 01       	movw	r30, r12
    1780:	24 81       	ldd	r18, Z+4	; 0x04
    1782:	35 81       	ldd	r19, Z+5	; 0x05
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	10 f0       	brcs	.+4      	; 0x178e <prvWriteBytesToBuffer+0x74>
    178a:	82 1b       	sub	r24, r18
    178c:	93 0b       	sbc	r25, r19
    178e:	f6 01       	movw	r30, r12
    1790:	93 83       	std	Z+3, r25	; 0x03
    1792:	82 83       	std	Z+2, r24	; 0x02
    1794:	c7 01       	movw	r24, r14
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	bf 90       	pop	r11
    17a8:	af 90       	pop	r10
    17aa:	08 95       	ret

000017ac <prvWriteMessageToBuffer>:
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	1f 92       	push	r1
    17be:	1f 92       	push	r1
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	5a 83       	std	Y+2, r21	; 0x02
    17c6:	49 83       	std	Y+1, r20	; 0x01
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	c9 f0       	breq	.+50     	; 0x1800 <prvWriteMessageToBuffer+0x54>
    17ce:	6b 01       	movw	r12, r22
    17d0:	7c 01       	movw	r14, r24
    17d2:	fc 01       	movw	r30, r24
    17d4:	86 85       	ldd	r24, Z+14	; 0x0e
    17d6:	80 fd       	sbrc	r24, 0
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <prvWriteMessageToBuffer+0x3e>
    17da:	ca 01       	movw	r24, r20
    17dc:	24 17       	cp	r18, r20
    17de:	35 07       	cpc	r19, r21
    17e0:	08 f4       	brcc	.+2      	; 0x17e4 <prvWriteMessageToBuffer+0x38>
    17e2:	c9 01       	movw	r24, r18
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <prvWriteMessageToBuffer+0x60>
    17ea:	20 17       	cp	r18, r16
    17ec:	31 07       	cpc	r19, r17
    17ee:	58 f0       	brcs	.+22     	; 0x1806 <prvWriteMessageToBuffer+0x5a>
    17f0:	42 e0       	ldi	r20, 0x02	; 2
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	be 01       	movw	r22, r28
    17f6:	6f 5f       	subi	r22, 0xFF	; 255
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	c7 01       	movw	r24, r14
    17fc:	8e df       	rcall	.-228    	; 0x171a <prvWriteBytesToBuffer>
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <prvWriteMessageToBuffer+0x60>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <prvWriteMessageToBuffer+0x6a>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <prvWriteMessageToBuffer+0x6a>
    180c:	49 81       	ldd	r20, Y+1	; 0x01
    180e:	5a 81       	ldd	r21, Y+2	; 0x02
    1810:	b6 01       	movw	r22, r12
    1812:	c7 01       	movw	r24, r14
    1814:	82 df       	rcall	.-252    	; 0x171a <prvWriteBytesToBuffer>
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	08 95       	ret

0000182c <prvReadBytesFromBuffer>:
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	7c 01       	movw	r14, r24
    1842:	5b 01       	movw	r10, r22
    1844:	e9 01       	movw	r28, r18
    1846:	42 17       	cp	r20, r18
    1848:	53 07       	cpc	r21, r19
    184a:	08 f4       	brcc	.+2      	; 0x184e <prvReadBytesFromBuffer+0x22>
    184c:	ea 01       	movw	r28, r20
    184e:	20 97       	sbiw	r28, 0x00	; 0
    1850:	79 f1       	breq	.+94     	; 0x18b0 <prvReadBytesFromBuffer+0x84>
    1852:	f7 01       	movw	r30, r14
    1854:	00 81       	ld	r16, Z
    1856:	11 81       	ldd	r17, Z+1	; 0x01
    1858:	c4 80       	ldd	r12, Z+4	; 0x04
    185a:	d5 80       	ldd	r13, Z+5	; 0x05
    185c:	c0 1a       	sub	r12, r16
    185e:	d1 0a       	sbc	r13, r17
    1860:	cc 15       	cp	r28, r12
    1862:	dd 05       	cpc	r29, r13
    1864:	08 f4       	brcc	.+2      	; 0x1868 <prvReadBytesFromBuffer+0x3c>
    1866:	6e 01       	movw	r12, r28
    1868:	f7 01       	movw	r30, r14
    186a:	64 85       	ldd	r22, Z+12	; 0x0c
    186c:	75 85       	ldd	r23, Z+13	; 0x0d
    186e:	60 0f       	add	r22, r16
    1870:	71 1f       	adc	r23, r17
    1872:	a6 01       	movw	r20, r12
    1874:	c5 01       	movw	r24, r10
    1876:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    187a:	cc 16       	cp	r12, r28
    187c:	dd 06       	cpc	r13, r29
    187e:	58 f4       	brcc	.+22     	; 0x1896 <prvReadBytesFromBuffer+0x6a>
    1880:	ae 01       	movw	r20, r28
    1882:	4c 19       	sub	r20, r12
    1884:	5d 09       	sbc	r21, r13
    1886:	f7 01       	movw	r30, r14
    1888:	64 85       	ldd	r22, Z+12	; 0x0c
    188a:	75 85       	ldd	r23, Z+13	; 0x0d
    188c:	c5 01       	movw	r24, r10
    188e:	8c 0d       	add	r24, r12
    1890:	9d 1d       	adc	r25, r13
    1892:	0e 94 38 2a 	call	0x5470	; 0x5470 <memcpy>
    1896:	0c 0f       	add	r16, r28
    1898:	1d 1f       	adc	r17, r29
    189a:	f7 01       	movw	r30, r14
    189c:	84 81       	ldd	r24, Z+4	; 0x04
    189e:	95 81       	ldd	r25, Z+5	; 0x05
    18a0:	08 17       	cp	r16, r24
    18a2:	19 07       	cpc	r17, r25
    18a4:	10 f0       	brcs	.+4      	; 0x18aa <prvReadBytesFromBuffer+0x7e>
    18a6:	08 1b       	sub	r16, r24
    18a8:	19 0b       	sbc	r17, r25
    18aa:	f7 01       	movw	r30, r14
    18ac:	11 83       	std	Z+1, r17	; 0x01
    18ae:	00 83       	st	Z, r16
    18b0:	ce 01       	movw	r24, r28
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	bf 90       	pop	r11
    18c4:	af 90       	pop	r10
    18c6:	08 95       	ret

000018c8 <xStreamBufferGenericCreate>:
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	eb 01       	movw	r28, r22
    18d4:	11 e0       	ldi	r17, 0x01	; 1
    18d6:	41 30       	cpi	r20, 0x01	; 1
    18d8:	09 f0       	breq	.+2      	; 0x18dc <xStreamBufferGenericCreate+0x14>
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	20 97       	sbiw	r28, 0x00	; 0
    18de:	11 f4       	brne	.+4      	; 0x18e4 <xStreamBufferGenericCreate+0x1c>
    18e0:	c1 e0       	ldi	r28, 0x01	; 1
    18e2:	d0 e0       	ldi	r29, 0x00	; 0
    18e4:	7c 01       	movw	r14, r24
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	e2 1a       	sub	r14, r18
    18ea:	f2 0a       	sbc	r15, r18
    18ec:	41 96       	adiw	r24, 0x11	; 17
    18ee:	3a d9       	rcall	.-3468   	; 0xb64 <pvPortMalloc>
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	81 f0       	breq	.+32     	; 0x1914 <xStreamBufferGenericCreate+0x4c>
    18f4:	20 e1       	ldi	r18, 0x10	; 16
    18f6:	fc 01       	movw	r30, r24
    18f8:	11 92       	st	Z+, r1
    18fa:	2a 95       	dec	r18
    18fc:	e9 f7       	brne	.-6      	; 0x18f8 <xStreamBufferGenericCreate+0x30>
    18fe:	9c 01       	movw	r18, r24
    1900:	20 5f       	subi	r18, 0xF0	; 240
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	fc 01       	movw	r30, r24
    1906:	35 87       	std	Z+13, r19	; 0x0d
    1908:	24 87       	std	Z+12, r18	; 0x0c
    190a:	f5 82       	std	Z+5, r15	; 0x05
    190c:	e4 82       	std	Z+4, r14	; 0x04
    190e:	d7 83       	std	Z+7, r29	; 0x07
    1910:	c6 83       	std	Z+6, r28	; 0x06
    1912:	16 87       	std	Z+14, r17	; 0x0e
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <xStreamBufferReset>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	fc 01       	movw	r30, r24
    1926:	27 85       	ldd	r18, Z+15	; 0x0f
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	0f 92       	push	r0
    192e:	80 85       	ldd	r24, Z+8	; 0x08
    1930:	91 85       	ldd	r25, Z+9	; 0x09
    1932:	89 2b       	or	r24, r25
    1934:	d1 f4       	brne	.+52     	; 0x196a <xStreamBufferReset+0x4a>
    1936:	82 85       	ldd	r24, Z+10	; 0x0a
    1938:	93 85       	ldd	r25, Z+11	; 0x0b
    193a:	89 2b       	or	r24, r25
    193c:	c1 f4       	brne	.+48     	; 0x196e <xStreamBufferReset+0x4e>
    193e:	86 85       	ldd	r24, Z+14	; 0x0e
    1940:	46 81       	ldd	r20, Z+6	; 0x06
    1942:	57 81       	ldd	r21, Z+7	; 0x07
    1944:	64 81       	ldd	r22, Z+4	; 0x04
    1946:	75 81       	ldd	r23, Z+5	; 0x05
    1948:	a4 85       	ldd	r26, Z+12	; 0x0c
    194a:	b5 85       	ldd	r27, Z+13	; 0x0d
    194c:	90 e1       	ldi	r25, 0x10	; 16
    194e:	ef 01       	movw	r28, r30
    1950:	19 92       	st	Y+, r1
    1952:	9a 95       	dec	r25
    1954:	e9 f7       	brne	.-6      	; 0x1950 <xStreamBufferReset+0x30>
    1956:	b5 87       	std	Z+13, r27	; 0x0d
    1958:	a4 87       	std	Z+12, r26	; 0x0c
    195a:	75 83       	std	Z+5, r23	; 0x05
    195c:	64 83       	std	Z+4, r22	; 0x04
    195e:	57 83       	std	Z+7, r21	; 0x07
    1960:	46 83       	std	Z+6, r20	; 0x06
    1962:	86 87       	std	Z+14, r24	; 0x0e
    1964:	27 87       	std	Z+15, r18	; 0x0f
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <xStreamBufferReset+0x50>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <xStreamBufferReset+0x50>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <xStreamBufferSpacesAvailable>:
    197a:	fc 01       	movw	r30, r24
    197c:	24 81       	ldd	r18, Z+4	; 0x04
    197e:	35 81       	ldd	r19, Z+5	; 0x05
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	42 81       	ldd	r20, Z+2	; 0x02
    1986:	53 81       	ldd	r21, Z+3	; 0x03
    1988:	82 0f       	add	r24, r18
    198a:	93 1f       	adc	r25, r19
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	84 1b       	sub	r24, r20
    1990:	95 0b       	sbc	r25, r21
    1992:	82 17       	cp	r24, r18
    1994:	93 07       	cpc	r25, r19
    1996:	10 f0       	brcs	.+4      	; 0x199c <xStreamBufferSpacesAvailable+0x22>
    1998:	82 1b       	sub	r24, r18
    199a:	93 0b       	sbc	r25, r19
    199c:	08 95       	ret

0000199e <xStreamBufferSend>:
    199e:	2f 92       	push	r2
    19a0:	3f 92       	push	r3
    19a2:	4f 92       	push	r4
    19a4:	5f 92       	push	r5
    19a6:	6f 92       	push	r6
    19a8:	7f 92       	push	r7
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	29 97       	sbiw	r28, 0x09	; 9
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	5c 01       	movw	r10, r24
    19d4:	1b 01       	movw	r2, r22
    19d6:	2a 01       	movw	r4, r20
    19d8:	0e 83       	std	Y+6, r16	; 0x06
    19da:	1f 83       	std	Y+7, r17	; 0x07
    19dc:	28 87       	std	Y+8, r18	; 0x08
    19de:	39 87       	std	Y+9, r19	; 0x09
    19e0:	fc 01       	movw	r30, r24
    19e2:	86 85       	ldd	r24, Z+14	; 0x0e
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <xStreamBufferSend+0x54>
    19e8:	3a 01       	movw	r6, r20
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	6f 0e       	add	r6, r31
    19ee:	71 1c       	adc	r7, r1
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <xStreamBufferSend+0x56>
    19f2:	3a 01       	movw	r6, r20
    19f4:	8e 81       	ldd	r24, Y+6	; 0x06
    19f6:	9f 81       	ldd	r25, Y+7	; 0x07
    19f8:	a8 85       	ldd	r26, Y+8	; 0x08
    19fa:	b9 85       	ldd	r27, Y+9	; 0x09
    19fc:	89 2b       	or	r24, r25
    19fe:	8a 2b       	or	r24, r26
    1a00:	8b 2b       	or	r24, r27
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <xStreamBufferSend+0x68>
    1a04:	34 c0       	rjmp	.+104    	; 0x1a6e <xStreamBufferSend+0xd0>
    1a06:	ce 01       	movw	r24, r28
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	7e d6       	rcall	.+3324   	; 0x2708 <vTaskSetTimeOutState>
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	0f 92       	push	r0
    1a12:	c5 01       	movw	r24, r10
    1a14:	b2 df       	rcall	.-156    	; 0x197a <xStreamBufferSpacesAvailable>
    1a16:	4c 01       	movw	r8, r24
    1a18:	86 15       	cp	r24, r6
    1a1a:	97 05       	cpc	r25, r7
    1a1c:	18 f5       	brcc	.+70     	; 0x1a64 <xStreamBufferSend+0xc6>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <xTaskNotifyStateClear>
    1a26:	f0 d6       	rcall	.+3552   	; 0x2808 <xTaskGetCurrentTaskHandle>
    1a28:	f5 01       	movw	r30, r10
    1a2a:	93 87       	std	Z+11, r25	; 0x0b
    1a2c:	82 87       	std	Z+10, r24	; 0x0a
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	ce 80       	ldd	r12, Y+6	; 0x06
    1a34:	df 80       	ldd	r13, Y+7	; 0x07
    1a36:	e8 84       	ldd	r14, Y+8	; 0x08
    1a38:	f9 84       	ldd	r15, Y+9	; 0x09
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	a9 01       	movw	r20, r18
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	cb 01       	movw	r24, r22
    1a4a:	59 d7       	rcall	.+3762   	; 0x28fe <xTaskNotifyWait>
    1a4c:	f5 01       	movw	r30, r10
    1a4e:	13 86       	std	Z+11, r1	; 0x0b
    1a50:	12 86       	std	Z+10, r1	; 0x0a
    1a52:	be 01       	movw	r22, r28
    1a54:	6a 5f       	subi	r22, 0xFA	; 250
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	7c d6       	rcall	.+3320   	; 0x2756 <xTaskCheckForTimeOut>
    1a5e:	88 23       	and	r24, r24
    1a60:	a9 f2       	breq	.-86     	; 0x1a0c <xStreamBufferSend+0x6e>
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <xStreamBufferSend+0xca>
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	81 14       	cp	r8, r1
    1a6a:	91 04       	cpc	r9, r1
    1a6c:	19 f4       	brne	.+6      	; 0x1a74 <xStreamBufferSend+0xd6>
    1a6e:	c5 01       	movw	r24, r10
    1a70:	84 df       	rcall	.-248    	; 0x197a <xStreamBufferSpacesAvailable>
    1a72:	4c 01       	movw	r8, r24
    1a74:	83 01       	movw	r16, r6
    1a76:	94 01       	movw	r18, r8
    1a78:	a2 01       	movw	r20, r4
    1a7a:	b1 01       	movw	r22, r2
    1a7c:	c5 01       	movw	r24, r10
    1a7e:	96 de       	rcall	.-724    	; 0x17ac <prvWriteMessageToBuffer>
    1a80:	7c 01       	movw	r14, r24
    1a82:	89 2b       	or	r24, r25
    1a84:	d9 f0       	breq	.+54     	; 0x1abc <xStreamBufferSend+0x11e>
    1a86:	c5 01       	movw	r24, r10
    1a88:	35 de       	rcall	.-918    	; 0x16f4 <prvBytesInBuffer>
    1a8a:	f5 01       	movw	r30, r10
    1a8c:	26 81       	ldd	r18, Z+6	; 0x06
    1a8e:	37 81       	ldd	r19, Z+7	; 0x07
    1a90:	82 17       	cp	r24, r18
    1a92:	93 07       	cpc	r25, r19
    1a94:	98 f0       	brcs	.+38     	; 0x1abc <xStreamBufferSend+0x11e>
    1a96:	6a d3       	rcall	.+1748   	; 0x216c <vTaskSuspendAll>
    1a98:	f5 01       	movw	r30, r10
    1a9a:	80 85       	ldd	r24, Z+8	; 0x08
    1a9c:	91 85       	ldd	r25, Z+9	; 0x09
    1a9e:	89 2b       	or	r24, r25
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <xStreamBufferSend+0x11c>
    1aa2:	80 85       	ldd	r24, Z+8	; 0x08
    1aa4:	91 85       	ldd	r25, Z+9	; 0x09
    1aa6:	00 e0       	ldi	r16, 0x00	; 0
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	ba 01       	movw	r22, r20
    1ab2:	af d7       	rcall	.+3934   	; 0x2a12 <xTaskGenericNotify>
    1ab4:	f5 01       	movw	r30, r10
    1ab6:	11 86       	std	Z+9, r1	; 0x09
    1ab8:	10 86       	std	Z+8, r1	; 0x08
    1aba:	41 d4       	rcall	.+2178   	; 0x233e <xTaskResumeAll>
    1abc:	c7 01       	movw	r24, r14
    1abe:	29 96       	adiw	r28, 0x09	; 9
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	7f 90       	pop	r7
    1ae4:	6f 90       	pop	r6
    1ae6:	5f 90       	pop	r5
    1ae8:	4f 90       	pop	r4
    1aea:	3f 90       	pop	r3
    1aec:	2f 90       	pop	r2
    1aee:	08 95       	ret

00001af0 <xStreamBufferSendFromISR>:
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
    1b06:	5b 01       	movw	r10, r22
    1b08:	6a 01       	movw	r12, r20
    1b0a:	79 01       	movw	r14, r18
    1b0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b0e:	80 ff       	sbrs	r24, 0
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <xStreamBufferSendFromISR+0x2a>
    1b12:	8a 01       	movw	r16, r20
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <xStreamBufferSendFromISR+0x2c>
    1b1a:	8a 01       	movw	r16, r20
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	2d df       	rcall	.-422    	; 0x197a <xStreamBufferSpacesAvailable>
    1b20:	9c 01       	movw	r18, r24
    1b22:	a6 01       	movw	r20, r12
    1b24:	b5 01       	movw	r22, r10
    1b26:	ce 01       	movw	r24, r28
    1b28:	41 de       	rcall	.-894    	; 0x17ac <prvWriteMessageToBuffer>
    1b2a:	6c 01       	movw	r12, r24
    1b2c:	89 2b       	or	r24, r25
    1b2e:	b1 f0       	breq	.+44     	; 0x1b5c <xStreamBufferSendFromISR+0x6c>
    1b30:	ce 01       	movw	r24, r28
    1b32:	e0 dd       	rcall	.-1088   	; 0x16f4 <prvBytesInBuffer>
    1b34:	2e 81       	ldd	r18, Y+6	; 0x06
    1b36:	3f 81       	ldd	r19, Y+7	; 0x07
    1b38:	82 17       	cp	r24, r18
    1b3a:	93 07       	cpc	r25, r19
    1b3c:	78 f0       	brcs	.+30     	; 0x1b5c <xStreamBufferSendFromISR+0x6c>
    1b3e:	88 85       	ldd	r24, Y+8	; 0x08
    1b40:	99 85       	ldd	r25, Y+9	; 0x09
    1b42:	89 2b       	or	r24, r25
    1b44:	59 f0       	breq	.+22     	; 0x1b5c <xStreamBufferSendFromISR+0x6c>
    1b46:	88 85       	ldd	r24, Y+8	; 0x08
    1b48:	99 85       	ldd	r25, Y+9	; 0x09
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	ba 01       	movw	r22, r20
    1b56:	d5 d7       	rcall	.+4010   	; 0x2b02 <xTaskGenericNotifyFromISR>
    1b58:	19 86       	std	Y+9, r1	; 0x09
    1b5a:	18 86       	std	Y+8, r1	; 0x08
    1b5c:	c6 01       	movw	r24, r12
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	bf 90       	pop	r11
    1b70:	af 90       	pop	r10
    1b72:	08 95       	ret

00001b74 <xStreamBufferReceive>:
    1b74:	4f 92       	push	r4
    1b76:	5f 92       	push	r5
    1b78:	6f 92       	push	r6
    1b7a:	7f 92       	push	r7
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	1f 92       	push	r1
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	5c 01       	movw	r10, r24
    1b9e:	2b 01       	movw	r4, r22
    1ba0:	3a 01       	movw	r6, r20
    1ba2:	68 01       	movw	r12, r16
    1ba4:	79 01       	movw	r14, r18
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	86 85       	ldd	r24, Z+14	; 0x0e
    1baa:	80 fd       	sbrc	r24, 0
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <xStreamBufferReceive+0x40>
    1bae:	81 2c       	mov	r8, r1
    1bb0:	91 2c       	mov	r9, r1
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <xStreamBufferReceive+0x48>
    1bb4:	68 94       	set
    1bb6:	88 24       	eor	r8, r8
    1bb8:	81 f8       	bld	r8, 1
    1bba:	91 2c       	mov	r9, r1
    1bbc:	c1 14       	cp	r12, r1
    1bbe:	d1 04       	cpc	r13, r1
    1bc0:	e1 04       	cpc	r14, r1
    1bc2:	f1 04       	cpc	r15, r1
    1bc4:	31 f1       	breq	.+76     	; 0x1c12 <xStreamBufferReceive+0x9e>
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	0f 92       	push	r0
    1bcc:	c5 01       	movw	r24, r10
    1bce:	92 dd       	rcall	.-1244   	; 0x16f4 <prvBytesInBuffer>
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	88 16       	cp	r8, r24
    1bd4:	99 06       	cpc	r9, r25
    1bd6:	40 f0       	brcs	.+16     	; 0x1be8 <xStreamBufferReceive+0x74>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <xTaskNotifyStateClear>
    1be0:	13 d6       	rcall	.+3110   	; 0x2808 <xTaskGetCurrentTaskHandle>
    1be2:	f5 01       	movw	r30, r10
    1be4:	91 87       	std	Z+9, r25	; 0x09
    1be6:	80 87       	std	Z+8, r24	; 0x08
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	80 16       	cp	r8, r16
    1bee:	91 06       	cpc	r9, r17
    1bf0:	b0 f0       	brcs	.+44     	; 0x1c1e <xStreamBufferReceive+0xaa>
    1bf2:	00 e0       	ldi	r16, 0x00	; 0
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	cb 01       	movw	r24, r22
    1c02:	7d d6       	rcall	.+3322   	; 0x28fe <xTaskNotifyWait>
    1c04:	f5 01       	movw	r30, r10
    1c06:	11 86       	std	Z+9, r1	; 0x09
    1c08:	10 86       	std	Z+8, r1	; 0x08
    1c0a:	c5 01       	movw	r24, r10
    1c0c:	73 dd       	rcall	.-1306   	; 0x16f4 <prvBytesInBuffer>
    1c0e:	8c 01       	movw	r16, r24
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <xStreamBufferReceive+0xa4>
    1c12:	c5 01       	movw	r24, r10
    1c14:	6f dd       	rcall	.-1314   	; 0x16f4 <prvBytesInBuffer>
    1c16:	8c 01       	movw	r16, r24
    1c18:	80 16       	cp	r8, r16
    1c1a:	91 06       	cpc	r9, r17
    1c1c:	b8 f5       	brcc	.+110    	; 0x1c8c <xStreamBufferReceive+0x118>
    1c1e:	81 14       	cp	r8, r1
    1c20:	91 04       	cpc	r9, r1
    1c22:	c1 f0       	breq	.+48     	; 0x1c54 <xStreamBufferReceive+0xe0>
    1c24:	f5 01       	movw	r30, r10
    1c26:	e0 80       	ld	r14, Z
    1c28:	f1 80       	ldd	r15, Z+1	; 0x01
    1c2a:	98 01       	movw	r18, r16
    1c2c:	a4 01       	movw	r20, r8
    1c2e:	be 01       	movw	r22, r28
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	c5 01       	movw	r24, r10
    1c36:	fa dd       	rcall	.-1036   	; 0x182c <prvReadBytesFromBuffer>
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	08 19       	sub	r16, r8
    1c3e:	19 09       	sbc	r17, r9
    1c40:	68 16       	cp	r6, r24
    1c42:	79 06       	cpc	r7, r25
    1c44:	30 f4       	brcc	.+12     	; 0x1c52 <xStreamBufferReceive+0xde>
    1c46:	f5 01       	movw	r30, r10
    1c48:	f1 82       	std	Z+1, r15	; 0x01
    1c4a:	e0 82       	st	Z, r14
    1c4c:	61 2c       	mov	r6, r1
    1c4e:	71 2c       	mov	r7, r1
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <xStreamBufferReceive+0xe0>
    1c52:	3c 01       	movw	r6, r24
    1c54:	98 01       	movw	r18, r16
    1c56:	a3 01       	movw	r20, r6
    1c58:	b2 01       	movw	r22, r4
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	e7 dd       	rcall	.-1074   	; 0x182c <prvReadBytesFromBuffer>
    1c5e:	7c 01       	movw	r14, r24
    1c60:	89 2b       	or	r24, r25
    1c62:	b1 f0       	breq	.+44     	; 0x1c90 <xStreamBufferReceive+0x11c>
    1c64:	83 d2       	rcall	.+1286   	; 0x216c <vTaskSuspendAll>
    1c66:	f5 01       	movw	r30, r10
    1c68:	82 85       	ldd	r24, Z+10	; 0x0a
    1c6a:	93 85       	ldd	r25, Z+11	; 0x0b
    1c6c:	89 2b       	or	r24, r25
    1c6e:	61 f0       	breq	.+24     	; 0x1c88 <xStreamBufferReceive+0x114>
    1c70:	82 85       	ldd	r24, Z+10	; 0x0a
    1c72:	93 85       	ldd	r25, Z+11	; 0x0b
    1c74:	00 e0       	ldi	r16, 0x00	; 0
    1c76:	10 e0       	ldi	r17, 0x00	; 0
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	ba 01       	movw	r22, r20
    1c80:	c8 d6       	rcall	.+3472   	; 0x2a12 <xTaskGenericNotify>
    1c82:	f5 01       	movw	r30, r10
    1c84:	13 86       	std	Z+11, r1	; 0x0b
    1c86:	12 86       	std	Z+10, r1	; 0x0a
    1c88:	5a d3       	rcall	.+1716   	; 0x233e <xTaskResumeAll>
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <xStreamBufferReceive+0x11c>
    1c8c:	e1 2c       	mov	r14, r1
    1c8e:	f1 2c       	mov	r15, r1
    1c90:	c7 01       	movw	r24, r14
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	4f 90       	pop	r4
    1cb6:	08 95       	ret

00001cb8 <xStreamBufferIsEmpty>:
size_t xTail;

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    1cb8:	fc 01       	movw	r30, r24
    1cba:	40 81       	ld	r20, Z
    1cbc:	51 81       	ldd	r21, Z+1	; 0x01
    if( pxStreamBuffer->xHead == xTail )
    1cbe:	22 81       	ldd	r18, Z+2	; 0x02
    1cc0:	33 81       	ldd	r19, Z+3	; 0x03
    else
    {
        xReturn = pdFALSE;
    }

    return xReturn;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	42 17       	cp	r20, r18
    1cc6:	53 07       	cpc	r21, r19
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <xStreamBufferIsEmpty+0x14>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
}
    1ccc:	08 95       	ret

00001cce <prvResetNextTaskUnblockTime>:
    1cce:	e0 91 19 18 	lds	r30, 0x1819	; 0x801819 <pxDelayedTaskList>
    1cd2:	f0 91 1a 18 	lds	r31, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 11       	cpse	r24, r1
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <prvResetNextTaskUnblockTime+0x26>
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <xNextTaskUnblockTime>
    1ce6:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    1cea:	a0 93 e8 17 	sts	0x17E8, r26	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    1cee:	b0 93 e9 17 	sts	0x17E9, r27	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    1cf2:	08 95       	ret
    1cf4:	e0 91 19 18 	lds	r30, 0x1819	; 0x801819 <pxDelayedTaskList>
    1cf8:	f0 91 1a 18 	lds	r31, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    1cfc:	07 80       	ldd	r0, Z+7	; 0x07
    1cfe:	f0 85       	ldd	r31, Z+8	; 0x08
    1d00:	e0 2d       	mov	r30, r0
    1d02:	00 84       	ldd	r0, Z+8	; 0x08
    1d04:	f1 85       	ldd	r31, Z+9	; 0x09
    1d06:	e0 2d       	mov	r30, r0
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d10:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <xNextTaskUnblockTime>
    1d14:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    1d18:	a0 93 e8 17 	sts	0x17E8, r26	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    1d1c:	b0 93 e9 17 	sts	0x17E9, r27	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    1d20:	08 95       	ret

00001d22 <prvAddCurrentTaskToDelayedList>:
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	af 92       	push	r10
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	cf 93       	push	r28
    1d34:	6b 01       	movw	r12, r22
    1d36:	7c 01       	movw	r14, r24
    1d38:	c4 2f       	mov	r28, r20
    1d3a:	80 90 f0 17 	lds	r8, 0x17F0	; 0x8017f0 <xTickCount>
    1d3e:	90 90 f1 17 	lds	r9, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    1d42:	a0 90 f2 17 	lds	r10, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    1d46:	b0 90 f3 17 	lds	r11, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    1d4a:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    1d4e:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1d52:	02 96       	adiw	r24, 0x02	; 2
    1d54:	64 d8       	rcall	.-3896   	; 0xe1e <uxListRemove>
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	c8 16       	cp	r12, r24
    1d5a:	d8 06       	cpc	r13, r24
    1d5c:	e8 06       	cpc	r14, r24
    1d5e:	f8 06       	cpc	r15, r24
    1d60:	69 f4       	brne	.+26     	; 0x1d7c <prvAddCurrentTaskToDelayedList+0x5a>
    1d62:	cc 23       	and	r28, r28
    1d64:	59 f0       	breq	.+22     	; 0x1d7c <prvAddCurrentTaskToDelayedList+0x5a>
    1d66:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    1d6a:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1d6e:	6e 5f       	subi	r22, 0xFE	; 254
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	85 ef       	ldi	r24, 0xF5	; 245
    1d74:	97 e1       	ldi	r25, 0x17	; 23
    1d76:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <prvAddCurrentTaskToDelayedList+0xd8>
    1d7c:	c8 0c       	add	r12, r8
    1d7e:	d9 1c       	adc	r13, r9
    1d80:	ea 1c       	adc	r14, r10
    1d82:	fb 1c       	adc	r15, r11
    1d84:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    1d88:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1d8c:	c2 82       	std	Z+2, r12	; 0x02
    1d8e:	d3 82       	std	Z+3, r13	; 0x03
    1d90:	e4 82       	std	Z+4, r14	; 0x04
    1d92:	f5 82       	std	Z+5, r15	; 0x05
    1d94:	c8 14       	cp	r12, r8
    1d96:	d9 04       	cpc	r13, r9
    1d98:	ea 04       	cpc	r14, r10
    1d9a:	fb 04       	cpc	r15, r11
    1d9c:	68 f4       	brcc	.+26     	; 0x1db8 <prvAddCurrentTaskToDelayedList+0x96>
    1d9e:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    1da2:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1da6:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <pxOverflowDelayedTaskList>
    1daa:	90 91 18 18 	lds	r25, 0x1818	; 0x801818 <pxOverflowDelayedTaskList+0x1>
    1dae:	6e 5f       	subi	r22, 0xFE	; 254
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    1db6:	21 c0       	rjmp	.+66     	; 0x1dfa <prvAddCurrentTaskToDelayedList+0xd8>
    1db8:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    1dbc:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1dc0:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <pxDelayedTaskList>
    1dc4:	90 91 1a 18 	lds	r25, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    1dc8:	6e 5f       	subi	r22, 0xFE	; 254
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    1dd0:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <xNextTaskUnblockTime>
    1dd4:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    1dd8:	a0 91 e8 17 	lds	r26, 0x17E8	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    1ddc:	b0 91 e9 17 	lds	r27, 0x17E9	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    1de0:	c8 16       	cp	r12, r24
    1de2:	d9 06       	cpc	r13, r25
    1de4:	ea 06       	cpc	r14, r26
    1de6:	fb 06       	cpc	r15, r27
    1de8:	40 f4       	brcc	.+16     	; 0x1dfa <prvAddCurrentTaskToDelayedList+0xd8>
    1dea:	c0 92 e6 17 	sts	0x17E6, r12	; 0x8017e6 <xNextTaskUnblockTime>
    1dee:	d0 92 e7 17 	sts	0x17E7, r13	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    1df2:	e0 92 e8 17 	sts	0x17E8, r14	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    1df6:	f0 92 e9 17 	sts	0x17E9, r15	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    1dfa:	cf 91       	pop	r28
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	df 90       	pop	r13
    1e02:	cf 90       	pop	r12
    1e04:	bf 90       	pop	r11
    1e06:	af 90       	pop	r10
    1e08:	9f 90       	pop	r9
    1e0a:	8f 90       	pop	r8
    1e0c:	08 95       	ret

00001e0e <xTaskCreate>:
    1e0e:	4f 92       	push	r4
    1e10:	5f 92       	push	r5
    1e12:	6f 92       	push	r6
    1e14:	7f 92       	push	r7
    1e16:	8f 92       	push	r8
    1e18:	9f 92       	push	r9
    1e1a:	af 92       	push	r10
    1e1c:	bf 92       	push	r11
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	4c 01       	movw	r8, r24
    1e2e:	6b 01       	movw	r12, r22
    1e30:	5a 01       	movw	r10, r20
    1e32:	29 01       	movw	r4, r18
    1e34:	ca 01       	movw	r24, r20
    1e36:	0e 94 b2 05 	call	0xb64	; 0xb64 <pvPortMalloc>
    1e3a:	3c 01       	movw	r6, r24
    1e3c:	89 2b       	or	r24, r25
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <xTaskCreate+0x34>
    1e40:	f4 c0       	rjmp	.+488    	; 0x202a <xTaskCreate+0x21c>
    1e42:	80 e3       	ldi	r24, 0x30	; 48
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 b2 05 	call	0xb64	; 0xb64 <pvPortMalloc>
    1e4a:	ec 01       	movw	r28, r24
    1e4c:	89 2b       	or	r24, r25
    1e4e:	99 f0       	breq	.+38     	; 0x1e76 <xTaskCreate+0x68>
    1e50:	7c 8e       	std	Y+28, r7	; 0x1c
    1e52:	6b 8e       	std	Y+27, r6	; 0x1b
    1e54:	a5 01       	movw	r20, r10
    1e56:	65 ea       	ldi	r22, 0xA5	; 165
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	c3 01       	movw	r24, r6
    1e5c:	0e 94 41 2a 	call	0x5482	; 0x5482 <memset>
    1e60:	21 e0       	ldi	r18, 0x01	; 1
    1e62:	a2 1a       	sub	r10, r18
    1e64:	b1 08       	sbc	r11, r1
    1e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6a:	a8 0e       	add	r10, r24
    1e6c:	b9 1e       	adc	r11, r25
    1e6e:	c1 14       	cp	r12, r1
    1e70:	d1 04       	cpc	r13, r1
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <xTaskCreate+0x70>
    1e74:	20 c0       	rjmp	.+64     	; 0x1eb6 <xTaskCreate+0xa8>
    1e76:	c3 01       	movw	r24, r6
    1e78:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vPortFree>
    1e7c:	d6 c0       	rjmp	.+428    	; 0x202a <xTaskCreate+0x21c>
    1e7e:	d6 01       	movw	r26, r12
    1e80:	8c 91       	ld	r24, X
    1e82:	8d 8f       	std	Y+29, r24	; 0x1d
    1e84:	8c 91       	ld	r24, X
    1e86:	88 23       	and	r24, r24
    1e88:	a1 f0       	breq	.+40     	; 0x1eb2 <xTaskCreate+0xa4>
    1e8a:	ae 01       	movw	r20, r28
    1e8c:	42 5e       	subi	r20, 0xE2	; 226
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	f6 01       	movw	r30, r12
    1e92:	31 96       	adiw	r30, 0x01	; 1
    1e94:	b8 e0       	ldi	r27, 0x08	; 8
    1e96:	cb 0e       	add	r12, r27
    1e98:	d1 1c       	adc	r13, r1
    1e9a:	cf 01       	movw	r24, r30
    1e9c:	21 91       	ld	r18, Z+
    1e9e:	da 01       	movw	r26, r20
    1ea0:	2d 93       	st	X+, r18
    1ea2:	ad 01       	movw	r20, r26
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	8c 91       	ld	r24, X
    1ea8:	88 23       	and	r24, r24
    1eaa:	19 f0       	breq	.+6      	; 0x1eb2 <xTaskCreate+0xa4>
    1eac:	ec 15       	cp	r30, r12
    1eae:	fd 05       	cpc	r31, r13
    1eb0:	a1 f7       	brne	.-24     	; 0x1e9a <xTaskCreate+0x8c>
    1eb2:	1c a2       	std	Y+36, r1	; 0x24
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <xTaskCreate+0xaa>
    1eb6:	1d 8e       	std	Y+29, r1	; 0x1d
    1eb8:	04 30       	cpi	r16, 0x04	; 4
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <xTaskCreate+0xb0>
    1ebc:	03 e0       	ldi	r16, 0x03	; 3
    1ebe:	0a 8f       	std	Y+26, r16	; 0x1a
    1ec0:	0f a3       	std	Y+39, r16	; 0x27
    1ec2:	18 a6       	std	Y+40, r1	; 0x28
    1ec4:	6e 01       	movw	r12, r28
    1ec6:	b2 e0       	ldi	r27, 0x02	; 2
    1ec8:	cb 0e       	add	r12, r27
    1eca:	d1 1c       	adc	r13, r1
    1ecc:	c6 01       	movw	r24, r12
    1ece:	0e 94 ad 06 	call	0xd5a	; 0xd5a <vListInitialiseItem>
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	0e 96       	adiw	r24, 0x0e	; 14
    1ed6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <vListInitialiseItem>
    1eda:	db 87       	std	Y+11, r29	; 0x0b
    1edc:	ca 87       	std	Y+10, r28	; 0x0a
    1ede:	84 e0       	ldi	r24, 0x04	; 4
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	80 1b       	sub	r24, r16
    1ee8:	91 09       	sbc	r25, r1
    1eea:	a1 09       	sbc	r26, r1
    1eec:	b1 09       	sbc	r27, r1
    1eee:	8e 87       	std	Y+14, r24	; 0x0e
    1ef0:	9f 87       	std	Y+15, r25	; 0x0f
    1ef2:	a8 8b       	std	Y+16, r26	; 0x10
    1ef4:	b9 8b       	std	Y+17, r27	; 0x11
    1ef6:	df 8b       	std	Y+23, r29	; 0x17
    1ef8:	ce 8b       	std	Y+22, r28	; 0x16
    1efa:	1a a6       	std	Y+42, r1	; 0x2a
    1efc:	19 a6       	std	Y+41, r1	; 0x29
    1efe:	1b a6       	std	Y+43, r1	; 0x2b
    1f00:	1c a6       	std	Y+44, r1	; 0x2c
    1f02:	1d a6       	std	Y+45, r1	; 0x2d
    1f04:	1e a6       	std	Y+46, r1	; 0x2e
    1f06:	1f a6       	std	Y+47, r1	; 0x2f
    1f08:	a2 01       	movw	r20, r4
    1f0a:	b4 01       	movw	r22, r8
    1f0c:	c5 01       	movw	r24, r10
    1f0e:	0e 94 36 07 	call	0xe6c	; 0xe6c <pxPortInitialiseStack>
    1f12:	99 83       	std	Y+1, r25	; 0x01
    1f14:	88 83       	st	Y, r24
    1f16:	e1 14       	cp	r14, r1
    1f18:	f1 04       	cpc	r15, r1
    1f1a:	19 f0       	breq	.+6      	; 0x1f22 <xTaskCreate+0x114>
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	d1 83       	std	Z+1, r29	; 0x01
    1f20:	c0 83       	st	Z, r28
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	0f 92       	push	r0
    1f28:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <uxCurrentNumberOfTasks>
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <uxCurrentNumberOfTasks>
    1f32:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    1f36:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	d1 f5       	brne	.+116    	; 0x1fb2 <xTaskCreate+0x1a4>
    1f3e:	d0 93 5e 18 	sts	0x185E, r29	; 0x80185e <pxCurrentTCB+0x1>
    1f42:	c0 93 5d 18 	sts	0x185D, r28	; 0x80185d <pxCurrentTCB>
    1f46:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <uxCurrentNumberOfTasks>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <xTaskCreate+0x142>
    1f4e:	41 c0       	rjmp	.+130    	; 0x1fd2 <xTaskCreate+0x1c4>
    1f50:	81 e3       	ldi	r24, 0x31	; 49
    1f52:	98 e1       	ldi	r25, 0x18	; 24
    1f54:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f58:	8c e3       	ldi	r24, 0x3C	; 60
    1f5a:	98 e1       	ldi	r25, 0x18	; 24
    1f5c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f60:	87 e4       	ldi	r24, 0x47	; 71
    1f62:	98 e1       	ldi	r25, 0x18	; 24
    1f64:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f68:	82 e5       	ldi	r24, 0x52	; 82
    1f6a:	98 e1       	ldi	r25, 0x18	; 24
    1f6c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f70:	86 e2       	ldi	r24, 0x26	; 38
    1f72:	98 e1       	ldi	r25, 0x18	; 24
    1f74:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f78:	8b e1       	ldi	r24, 0x1B	; 27
    1f7a:	98 e1       	ldi	r25, 0x18	; 24
    1f7c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f80:	8c e0       	ldi	r24, 0x0C	; 12
    1f82:	98 e1       	ldi	r25, 0x18	; 24
    1f84:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	98 e1       	ldi	r25, 0x18	; 24
    1f8c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f90:	85 ef       	ldi	r24, 0xF5	; 245
    1f92:	97 e1       	ldi	r25, 0x17	; 23
    1f94:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    1f98:	86 e2       	ldi	r24, 0x26	; 38
    1f9a:	98 e1       	ldi	r25, 0x18	; 24
    1f9c:	90 93 1a 18 	sts	0x181A, r25	; 0x80181a <pxDelayedTaskList+0x1>
    1fa0:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <pxDelayedTaskList>
    1fa4:	8b e1       	ldi	r24, 0x1B	; 27
    1fa6:	98 e1       	ldi	r25, 0x18	; 24
    1fa8:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <pxOverflowDelayedTaskList+0x1>
    1fac:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <pxOverflowDelayedTaskList>
    1fb0:	10 c0       	rjmp	.+32     	; 0x1fd2 <xTaskCreate+0x1c4>
    1fb2:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <xSchedulerRunning>
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	0c c0       	rjmp	.+24     	; 0x1fd2 <xTaskCreate+0x1c4>
    1fba:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    1fbe:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    1fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc6:	89 17       	cp	r24, r25
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <xTaskCreate+0x1c4>
    1fca:	d0 93 5e 18 	sts	0x185E, r29	; 0x80185e <pxCurrentTCB+0x1>
    1fce:	c0 93 5d 18 	sts	0x185D, r28	; 0x80185d <pxCurrentTCB>
    1fd2:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <uxTaskNumber>
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <uxTaskNumber>
    1fdc:	8d a3       	std	Y+37, r24	; 0x25
    1fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe0:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    1fe4:	98 17       	cp	r25, r24
    1fe6:	10 f4       	brcc	.+4      	; 0x1fec <xTaskCreate+0x1de>
    1fe8:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    1fec:	fb e0       	ldi	r31, 0x0B	; 11
    1fee:	8f 9f       	mul	r24, r31
    1ff0:	c0 01       	movw	r24, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	8f 5c       	subi	r24, 0xCF	; 207
    1ff8:	97 4e       	sbci	r25, 0xE7	; 231
    1ffa:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <xSchedulerRunning>
    2006:	88 23       	and	r24, r24
    2008:	61 f0       	breq	.+24     	; 0x2022 <xTaskCreate+0x214>
    200a:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    200e:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2012:	92 8d       	ldd	r25, Z+26	; 0x1a
    2014:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2016:	98 17       	cp	r25, r24
    2018:	30 f4       	brcc	.+12     	; 0x2026 <xTaskCreate+0x218>
    201a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	05 c0       	rjmp	.+10     	; 0x202c <xTaskCreate+0x21e>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	03 c0       	rjmp	.+6      	; 0x202c <xTaskCreate+0x21e>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <xTaskCreate+0x21e>
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	bf 90       	pop	r11
    203c:	af 90       	pop	r10
    203e:	9f 90       	pop	r9
    2040:	8f 90       	pop	r8
    2042:	7f 90       	pop	r7
    2044:	6f 90       	pop	r6
    2046:	5f 90       	pop	r5
    2048:	4f 90       	pop	r4
    204a:	08 95       	ret

0000204c <vTaskDelete>:
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	ec 01       	movw	r28, r24
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	0f 92       	push	r0
    205c:	89 2b       	or	r24, r25
    205e:	21 f4       	brne	.+8      	; 0x2068 <vTaskDelete+0x1c>
    2060:	c0 91 5d 18 	lds	r28, 0x185D	; 0x80185d <pxCurrentTCB>
    2064:	d0 91 5e 18 	lds	r29, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2068:	8e 01       	movw	r16, r28
    206a:	0e 5f       	subi	r16, 0xFE	; 254
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2074:	88 8d       	ldd	r24, Y+24	; 0x18
    2076:	99 8d       	ldd	r25, Y+25	; 0x19
    2078:	89 2b       	or	r24, r25
    207a:	21 f0       	breq	.+8      	; 0x2084 <vTaskDelete+0x38>
    207c:	ce 01       	movw	r24, r28
    207e:	0e 96       	adiw	r24, 0x0e	; 14
    2080:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2084:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <uxTaskNumber>
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <uxTaskNumber>
    208e:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    2092:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2096:	c8 17       	cp	r28, r24
    2098:	d9 07       	cpc	r29, r25
    209a:	59 f4       	brne	.+22     	; 0x20b2 <vTaskDelete+0x66>
    209c:	b8 01       	movw	r22, r16
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	98 e1       	ldi	r25, 0x18	; 24
    20a2:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    20a6:	80 91 00 18 	lds	r24, 0x1800	; 0x801800 <uxDeletedTasksWaitingCleanUp>
    20aa:	8f 5f       	subi	r24, 0xFF	; 255
    20ac:	80 93 00 18 	sts	0x1800, r24	; 0x801800 <uxDeletedTasksWaitingCleanUp>
    20b0:	0d c0       	rjmp	.+26     	; 0x20cc <vTaskDelete+0x80>
    20b2:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <uxCurrentNumberOfTasks>
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <uxCurrentNumberOfTasks>
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vPortFree>
    20c4:	ce 01       	movw	r24, r28
    20c6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vPortFree>
    20ca:	01 de       	rcall	.-1022   	; 0x1cce <prvResetNextTaskUnblockTime>
    20cc:	0f 90       	pop	r0
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <xSchedulerRunning>
    20d4:	88 23       	and	r24, r24
    20d6:	49 f0       	breq	.+18     	; 0x20ea <vTaskDelete+0x9e>
    20d8:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    20dc:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    20e0:	c8 17       	cp	r28, r24
    20e2:	d9 07       	cpc	r29, r25
    20e4:	11 f4       	brne	.+4      	; 0x20ea <vTaskDelete+0x9e>
    20e6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <vTaskStartScheduler>:
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	0f 2e       	mov	r0, r31
    20fc:	f4 ee       	ldi	r31, 0xE4	; 228
    20fe:	ef 2e       	mov	r14, r31
    2100:	f7 e1       	ldi	r31, 0x17	; 23
    2102:	ff 2e       	mov	r15, r31
    2104:	f0 2d       	mov	r31, r0
    2106:	00 e0       	ldi	r16, 0x00	; 0
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 ec       	ldi	r20, 0xC0	; 192
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	6b eb       	ldi	r22, 0xBB	; 187
    2112:	73 e0       	ldi	r23, 0x03	; 3
    2114:	8d ec       	ldi	r24, 0xCD	; 205
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	7a de       	rcall	.-780    	; 0x1e0e <xTaskCreate>
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	19 f5       	brne	.+70     	; 0x2164 <vTaskStartScheduler+0x70>
    211e:	00 d6       	rcall	.+3072   	; 0x2d20 <xTimerCreateTimerTask>
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	01 f5       	brne	.+64     	; 0x2164 <vTaskStartScheduler+0x70>
    2124:	f8 94       	cli
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	dc 01       	movw	r26, r24
    212c:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <xNextTaskUnblockTime>
    2130:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    2134:	a0 93 e8 17 	sts	0x17E8, r26	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    2138:	b0 93 e9 17 	sts	0x17E9, r27	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <xSchedulerRunning>
    2142:	10 92 f0 17 	sts	0x17F0, r1	; 0x8017f0 <xTickCount>
    2146:	10 92 f1 17 	sts	0x17F1, r1	; 0x8017f1 <xTickCount+0x1>
    214a:	10 92 f2 17 	sts	0x17F2, r1	; 0x8017f2 <xTickCount+0x2>
    214e:	10 92 f3 17 	sts	0x17F3, r1	; 0x8017f3 <xTickCount+0x3>
    2152:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2156:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    215a:	81 a5       	ldd	r24, Z+41	; 0x29
    215c:	0e 94 cc 03 	call	0x798	; 0x798 <task_switch_in>
    2160:	0e 94 a8 07 	call	0xf50	; 0xf50 <xPortStartScheduler>
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	08 95       	ret

0000216c <vTaskSuspendAll>:
    216c:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <uxSchedulerSuspended>
    2176:	08 95       	ret

00002178 <xTaskGetTickCount>:
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	0f 92       	push	r0
    217e:	60 91 f0 17 	lds	r22, 0x17F0	; 0x8017f0 <xTickCount>
    2182:	70 91 f1 17 	lds	r23, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    2186:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    218a:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	08 95       	ret

00002194 <xTaskIncrementTick>:
    2194:	9f 92       	push	r9
    2196:	af 92       	push	r10
    2198:	bf 92       	push	r11
    219a:	cf 92       	push	r12
    219c:	df 92       	push	r13
    219e:	ef 92       	push	r14
    21a0:	ff 92       	push	r15
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    21ae:	81 11       	cpse	r24, r1
    21b0:	ad c0       	rjmp	.+346    	; 0x230c <__stack+0x10d>
    21b2:	c0 90 f0 17 	lds	r12, 0x17F0	; 0x8017f0 <xTickCount>
    21b6:	d0 90 f1 17 	lds	r13, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    21ba:	e0 90 f2 17 	lds	r14, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    21be:	f0 90 f3 17 	lds	r15, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	c8 1a       	sub	r12, r24
    21c6:	d8 0a       	sbc	r13, r24
    21c8:	e8 0a       	sbc	r14, r24
    21ca:	f8 0a       	sbc	r15, r24
    21cc:	c0 92 f0 17 	sts	0x17F0, r12	; 0x8017f0 <xTickCount>
    21d0:	d0 92 f1 17 	sts	0x17F1, r13	; 0x8017f1 <xTickCount+0x1>
    21d4:	e0 92 f2 17 	sts	0x17F2, r14	; 0x8017f2 <xTickCount+0x2>
    21d8:	f0 92 f3 17 	sts	0x17F3, r15	; 0x8017f3 <xTickCount+0x3>
    21dc:	c1 14       	cp	r12, r1
    21de:	d1 04       	cpc	r13, r1
    21e0:	e1 04       	cpc	r14, r1
    21e2:	f1 04       	cpc	r15, r1
    21e4:	b1 f4       	brne	.+44     	; 0x2212 <__stack+0x13>
    21e6:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <pxDelayedTaskList>
    21ea:	90 91 1a 18 	lds	r25, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    21ee:	20 91 17 18 	lds	r18, 0x1817	; 0x801817 <pxOverflowDelayedTaskList>
    21f2:	30 91 18 18 	lds	r19, 0x1818	; 0x801818 <pxOverflowDelayedTaskList+0x1>
    21f6:	30 93 1a 18 	sts	0x181A, r19	; 0x80181a <pxDelayedTaskList+0x1>
    21fa:	20 93 19 18 	sts	0x1819, r18	; 0x801819 <pxDelayedTaskList>
    21fe:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <pxOverflowDelayedTaskList+0x1>
    2202:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <pxOverflowDelayedTaskList>
    2206:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <xNumOfOverflows>
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <xNumOfOverflows>
    2210:	5e dd       	rcall	.-1348   	; 0x1cce <prvResetNextTaskUnblockTime>
    2212:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <xNextTaskUnblockTime>
    2216:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    221a:	a0 91 e8 17 	lds	r26, 0x17E8	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    221e:	b0 91 e9 17 	lds	r27, 0x17E9	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    2222:	c8 16       	cp	r12, r24
    2224:	d9 06       	cpc	r13, r25
    2226:	ea 06       	cpc	r14, r26
    2228:	fb 06       	cpc	r15, r27
    222a:	10 f4       	brcc	.+4      	; 0x2230 <__stack+0x31>
    222c:	b1 2c       	mov	r11, r1
    222e:	5d c0       	rjmp	.+186    	; 0x22ea <__stack+0xeb>
    2230:	b1 2c       	mov	r11, r1
    2232:	0f 2e       	mov	r0, r31
    2234:	fb e0       	ldi	r31, 0x0B	; 11
    2236:	af 2e       	mov	r10, r31
    2238:	f0 2d       	mov	r31, r0
    223a:	99 24       	eor	r9, r9
    223c:	93 94       	inc	r9
    223e:	e0 91 19 18 	lds	r30, 0x1819	; 0x801819 <pxDelayedTaskList>
    2242:	f0 91 1a 18 	lds	r31, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    2246:	80 81       	ld	r24, Z
    2248:	81 11       	cpse	r24, r1
    224a:	0c c0       	rjmp	.+24     	; 0x2264 <__stack+0x65>
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	9f ef       	ldi	r25, 0xFF	; 255
    2250:	dc 01       	movw	r26, r24
    2252:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <xNextTaskUnblockTime>
    2256:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    225a:	a0 93 e8 17 	sts	0x17E8, r26	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    225e:	b0 93 e9 17 	sts	0x17E9, r27	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    2262:	43 c0       	rjmp	.+134    	; 0x22ea <__stack+0xeb>
    2264:	e0 91 19 18 	lds	r30, 0x1819	; 0x801819 <pxDelayedTaskList>
    2268:	f0 91 1a 18 	lds	r31, 0x181A	; 0x80181a <pxDelayedTaskList+0x1>
    226c:	07 80       	ldd	r0, Z+7	; 0x07
    226e:	f0 85       	ldd	r31, Z+8	; 0x08
    2270:	e0 2d       	mov	r30, r0
    2272:	c0 85       	ldd	r28, Z+8	; 0x08
    2274:	d1 85       	ldd	r29, Z+9	; 0x09
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	ac 81       	ldd	r26, Y+4	; 0x04
    227c:	bd 81       	ldd	r27, Y+5	; 0x05
    227e:	c8 16       	cp	r12, r24
    2280:	d9 06       	cpc	r13, r25
    2282:	ea 06       	cpc	r14, r26
    2284:	fb 06       	cpc	r15, r27
    2286:	48 f4       	brcc	.+18     	; 0x229a <__stack+0x9b>
    2288:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <xNextTaskUnblockTime>
    228c:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <xNextTaskUnblockTime+0x1>
    2290:	a0 93 e8 17 	sts	0x17E8, r26	; 0x8017e8 <xNextTaskUnblockTime+0x2>
    2294:	b0 93 e9 17 	sts	0x17E9, r27	; 0x8017e9 <xNextTaskUnblockTime+0x3>
    2298:	28 c0       	rjmp	.+80     	; 0x22ea <__stack+0xeb>
    229a:	8e 01       	movw	r16, r28
    229c:	0e 5f       	subi	r16, 0xFE	; 254
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	c8 01       	movw	r24, r16
    22a2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    22a6:	88 8d       	ldd	r24, Y+24	; 0x18
    22a8:	99 8d       	ldd	r25, Y+25	; 0x19
    22aa:	89 2b       	or	r24, r25
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <__stack+0xb7>
    22ae:	ce 01       	movw	r24, r28
    22b0:	0e 96       	adiw	r24, 0x0e	; 14
    22b2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    22b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22b8:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    22bc:	98 17       	cp	r25, r24
    22be:	10 f4       	brcc	.+4      	; 0x22c4 <__stack+0xc5>
    22c0:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    22c4:	a8 9e       	mul	r10, r24
    22c6:	c0 01       	movw	r24, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	b8 01       	movw	r22, r16
    22cc:	8f 5c       	subi	r24, 0xCF	; 207
    22ce:	97 4e       	sbci	r25, 0xE7	; 231
    22d0:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    22d4:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    22d8:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    22dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22de:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e0:	98 17       	cp	r25, r24
    22e2:	08 f4       	brcc	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	ac cf       	rjmp	.-168    	; 0x223e <__stack+0x3f>
    22e6:	b9 2c       	mov	r11, r9
    22e8:	aa cf       	rjmp	.-172    	; 0x223e <__stack+0x3f>
    22ea:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    22ee:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    22f2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    22f4:	8b e0       	ldi	r24, 0x0B	; 11
    22f6:	e8 9f       	mul	r30, r24
    22f8:	f0 01       	movw	r30, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	ef 5c       	subi	r30, 0xCF	; 207
    22fe:	f7 4e       	sbci	r31, 0xE7	; 231
    2300:	80 81       	ld	r24, Z
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	48 f0       	brcs	.+18     	; 0x2318 <__stack+0x119>
    2306:	bb 24       	eor	r11, r11
    2308:	b3 94       	inc	r11
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <__stack+0x119>
    230c:	80 91 ed 17 	lds	r24, 0x17ED	; 0x8017ed <uxPendedTicks>
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <uxPendedTicks>
    2316:	b1 2c       	mov	r11, r1
    2318:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <xYieldPending>
    231c:	88 23       	and	r24, r24
    231e:	11 f0       	breq	.+4      	; 0x2324 <__stack+0x125>
    2320:	bb 24       	eor	r11, r11
    2322:	b3 94       	inc	r11
    2324:	8b 2d       	mov	r24, r11
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
    2338:	af 90       	pop	r10
    233a:	9f 90       	pop	r9
    233c:	08 95       	ret

0000233e <xTaskResumeAll>:
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	0f 92       	push	r0
    2354:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    2358:	81 50       	subi	r24, 0x01	; 1
    235a:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <uxSchedulerSuspended>
    235e:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    2362:	81 11       	cpse	r24, r1
    2364:	5a c0       	rjmp	.+180    	; 0x241a <xTaskResumeAll+0xdc>
    2366:	80 91 f4 17 	lds	r24, 0x17F4	; 0x8017f4 <uxCurrentNumberOfTasks>
    236a:	81 11       	cpse	r24, r1
    236c:	2c c0       	rjmp	.+88     	; 0x23c6 <xTaskResumeAll+0x88>
    236e:	58 c0       	rjmp	.+176    	; 0x2420 <xTaskResumeAll+0xe2>
    2370:	d7 01       	movw	r26, r14
    2372:	17 96       	adiw	r26, 0x07	; 7
    2374:	ed 91       	ld	r30, X+
    2376:	fc 91       	ld	r31, X
    2378:	18 97       	sbiw	r26, 0x08	; 8
    237a:	c0 85       	ldd	r28, Z+8	; 0x08
    237c:	d1 85       	ldd	r29, Z+9	; 0x09
    237e:	ce 01       	movw	r24, r28
    2380:	0e 96       	adiw	r24, 0x0e	; 14
    2382:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2386:	8e 01       	movw	r16, r28
    2388:	0e 5f       	subi	r16, 0xFE	; 254
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	c8 01       	movw	r24, r16
    238e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2392:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2394:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    2398:	98 17       	cp	r25, r24
    239a:	10 f4       	brcc	.+4      	; 0x23a0 <xTaskResumeAll+0x62>
    239c:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    23a0:	d8 9e       	mul	r13, r24
    23a2:	c0 01       	movw	r24, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	b8 01       	movw	r22, r16
    23a8:	8f 5c       	subi	r24, 0xCF	; 207
    23aa:	97 4e       	sbci	r25, 0xE7	; 231
    23ac:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    23b0:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    23b4:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    23b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    23bc:	98 17       	cp	r25, r24
    23be:	88 f0       	brcs	.+34     	; 0x23e2 <xTaskResumeAll+0xa4>
    23c0:	c0 92 ec 17 	sts	0x17EC, r12	; 0x8017ec <xYieldPending>
    23c4:	0e c0       	rjmp	.+28     	; 0x23e2 <xTaskResumeAll+0xa4>
    23c6:	c0 e0       	ldi	r28, 0x00	; 0
    23c8:	d0 e0       	ldi	r29, 0x00	; 0
    23ca:	0f 2e       	mov	r0, r31
    23cc:	fc e0       	ldi	r31, 0x0C	; 12
    23ce:	ef 2e       	mov	r14, r31
    23d0:	f8 e1       	ldi	r31, 0x18	; 24
    23d2:	ff 2e       	mov	r15, r31
    23d4:	f0 2d       	mov	r31, r0
    23d6:	0f 2e       	mov	r0, r31
    23d8:	fb e0       	ldi	r31, 0x0B	; 11
    23da:	df 2e       	mov	r13, r31
    23dc:	f0 2d       	mov	r31, r0
    23de:	cc 24       	eor	r12, r12
    23e0:	c3 94       	inc	r12
    23e2:	f7 01       	movw	r30, r14
    23e4:	80 81       	ld	r24, Z
    23e6:	81 11       	cpse	r24, r1
    23e8:	c3 cf       	rjmp	.-122    	; 0x2370 <xTaskResumeAll+0x32>
    23ea:	cd 2b       	or	r28, r29
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <xTaskResumeAll+0xb2>
    23ee:	6f dc       	rcall	.-1826   	; 0x1cce <prvResetNextTaskUnblockTime>
    23f0:	c0 91 ed 17 	lds	r28, 0x17ED	; 0x8017ed <uxPendedTicks>
    23f4:	cc 23       	and	r28, r28
    23f6:	49 f0       	breq	.+18     	; 0x240a <xTaskResumeAll+0xcc>
    23f8:	d1 e0       	ldi	r29, 0x01	; 1
    23fa:	cc de       	rcall	.-616    	; 0x2194 <xTaskIncrementTick>
    23fc:	81 11       	cpse	r24, r1
    23fe:	d0 93 ec 17 	sts	0x17EC, r29	; 0x8017ec <xYieldPending>
    2402:	c1 50       	subi	r28, 0x01	; 1
    2404:	d1 f7       	brne	.-12     	; 0x23fa <xTaskResumeAll+0xbc>
    2406:	10 92 ed 17 	sts	0x17ED, r1	; 0x8017ed <uxPendedTicks>
    240a:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <xYieldPending>
    240e:	88 23       	and	r24, r24
    2410:	31 f0       	breq	.+12     	; 0x241e <xTaskResumeAll+0xe0>
    2412:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <xTaskResumeAll+0xe2>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <xTaskResumeAll+0xe2>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0f 90       	pop	r0
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	08 95       	ret

00002436 <vTaskDelay>:
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	6b 01       	movw	r12, r22
    2440:	7c 01       	movw	r14, r24
    2442:	67 2b       	or	r22, r23
    2444:	68 2b       	or	r22, r24
    2446:	69 2b       	or	r22, r25
    2448:	41 f0       	breq	.+16     	; 0x245a <vTaskDelay+0x24>
    244a:	90 de       	rcall	.-736    	; 0x216c <vTaskSuspendAll>
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	c7 01       	movw	r24, r14
    2450:	b6 01       	movw	r22, r12
    2452:	67 dc       	rcall	.-1842   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    2454:	74 df       	rcall	.-280    	; 0x233e <xTaskResumeAll>
    2456:	81 11       	cpse	r24, r1
    2458:	02 c0       	rjmp	.+4      	; 0x245e <vTaskDelay+0x28>
    245a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	df 90       	pop	r13
    2464:	cf 90       	pop	r12
    2466:	08 95       	ret

00002468 <vTaskSwitchContext>:
    2468:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    246c:	88 23       	and	r24, r24
    246e:	21 f0       	breq	.+8      	; 0x2478 <vTaskSwitchContext+0x10>
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <xYieldPending>
    2476:	08 95       	ret
    2478:	10 92 ec 17 	sts	0x17EC, r1	; 0x8017ec <xYieldPending>
    247c:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2480:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2484:	81 a5       	ldd	r24, Z+41	; 0x29
    2486:	0e 94 d6 03 	call	0x7ac	; 0x7ac <task_switch_out>
    248a:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    248e:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2492:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2496:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    249a:	2d 91       	ld	r18, X+
    249c:	3c 91       	ld	r19, X
    249e:	83 8d       	ldd	r24, Z+27	; 0x1b
    24a0:	94 8d       	ldd	r25, Z+28	; 0x1c
    24a2:	82 17       	cp	r24, r18
    24a4:	93 07       	cpc	r25, r19
    24a6:	58 f0       	brcs	.+22     	; 0x24be <vTaskSwitchContext+0x56>
    24a8:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    24ac:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    24b0:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    24b4:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    24b8:	63 5e       	subi	r22, 0xE3	; 227
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	53 d5       	rcall	.+2726   	; 0x2f64 <vApplicationStackOverflowHook>
    24be:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	9b e0       	ldi	r25, 0x0B	; 11
    24c8:	89 9f       	mul	r24, r25
    24ca:	f0 01       	movw	r30, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	ef 5c       	subi	r30, 0xCF	; 207
    24d0:	f7 4e       	sbci	r31, 0xE7	; 231
    24d2:	90 81       	ld	r25, Z
    24d4:	91 11       	cpse	r25, r1
    24d6:	0e c0       	rjmp	.+28     	; 0x24f4 <vTaskSwitchContext+0x8c>
    24d8:	4b e0       	ldi	r20, 0x0B	; 11
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	42 9f       	mul	r20, r18
    24e2:	f0 01       	movw	r30, r0
    24e4:	43 9f       	mul	r20, r19
    24e6:	f0 0d       	add	r31, r0
    24e8:	11 24       	eor	r1, r1
    24ea:	ef 5c       	subi	r30, 0xCF	; 207
    24ec:	f7 4e       	sbci	r31, 0xE7	; 231
    24ee:	90 81       	ld	r25, Z
    24f0:	99 23       	and	r25, r25
    24f2:	99 f3       	breq	.-26     	; 0x24da <vTaskSwitchContext+0x72>
    24f4:	9b e0       	ldi	r25, 0x0B	; 11
    24f6:	92 9f       	mul	r25, r18
    24f8:	a0 01       	movw	r20, r0
    24fa:	93 9f       	mul	r25, r19
    24fc:	50 0d       	add	r21, r0
    24fe:	11 24       	eor	r1, r1
    2500:	da 01       	movw	r26, r20
    2502:	af 5c       	subi	r26, 0xCF	; 207
    2504:	b7 4e       	sbci	r27, 0xE7	; 231
    2506:	11 96       	adiw	r26, 0x01	; 1
    2508:	ed 91       	ld	r30, X+
    250a:	fc 91       	ld	r31, X
    250c:	12 97       	sbiw	r26, 0x02	; 2
    250e:	04 80       	ldd	r0, Z+4	; 0x04
    2510:	f5 81       	ldd	r31, Z+5	; 0x05
    2512:	e0 2d       	mov	r30, r0
    2514:	12 96       	adiw	r26, 0x02	; 2
    2516:	fc 93       	st	X, r31
    2518:	ee 93       	st	-X, r30
    251a:	11 97       	sbiw	r26, 0x01	; 1
    251c:	4c 5c       	subi	r20, 0xCC	; 204
    251e:	57 4e       	sbci	r21, 0xE7	; 231
    2520:	e4 17       	cp	r30, r20
    2522:	f5 07       	cpc	r31, r21
    2524:	29 f4       	brne	.+10     	; 0x2530 <vTaskSwitchContext+0xc8>
    2526:	44 81       	ldd	r20, Z+4	; 0x04
    2528:	55 81       	ldd	r21, Z+5	; 0x05
    252a:	fd 01       	movw	r30, r26
    252c:	52 83       	std	Z+2, r21	; 0x02
    252e:	41 83       	std	Z+1, r20	; 0x01
    2530:	9b e0       	ldi	r25, 0x0B	; 11
    2532:	92 9f       	mul	r25, r18
    2534:	f0 01       	movw	r30, r0
    2536:	93 9f       	mul	r25, r19
    2538:	f0 0d       	add	r31, r0
    253a:	11 24       	eor	r1, r1
    253c:	ef 5c       	subi	r30, 0xCF	; 207
    253e:	f7 4e       	sbci	r31, 0xE7	; 231
    2540:	01 80       	ldd	r0, Z+1	; 0x01
    2542:	f2 81       	ldd	r31, Z+2	; 0x02
    2544:	e0 2d       	mov	r30, r0
    2546:	20 85       	ldd	r18, Z+8	; 0x08
    2548:	31 85       	ldd	r19, Z+9	; 0x09
    254a:	30 93 5e 18 	sts	0x185E, r19	; 0x80185e <pxCurrentTCB+0x1>
    254e:	20 93 5d 18 	sts	0x185D, r18	; 0x80185d <pxCurrentTCB>
    2552:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    2556:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    255a:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    255e:	81 a5       	ldd	r24, Z+41	; 0x29
    2560:	0c 94 cc 03 	jmp	0x798	; 0x798 <task_switch_in>
    2564:	08 95       	ret

00002566 <vTaskPlaceOnEventList>:
    2566:	cf 92       	push	r12
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	6a 01       	movw	r12, r20
    2570:	7b 01       	movw	r14, r22
    2572:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    2576:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    257a:	62 5f       	subi	r22, 0xF2	; 242
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	c7 01       	movw	r24, r14
    2586:	b6 01       	movw	r22, r12
    2588:	cc db       	rcall	.-2152   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	df 90       	pop	r13
    2590:	cf 90       	pop	r12
    2592:	08 95       	ret

00002594 <vTaskPlaceOnUnorderedEventList>:
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	68 01       	movw	r12, r16
    25a2:	79 01       	movw	r14, r18
    25a4:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    25a8:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    25ac:	70 68       	ori	r23, 0x80	; 128
    25ae:	46 87       	std	Z+14, r20	; 0x0e
    25b0:	57 87       	std	Z+15, r21	; 0x0f
    25b2:	60 8b       	std	Z+16, r22	; 0x10
    25b4:	71 8b       	std	Z+17, r23	; 0x11
    25b6:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    25ba:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    25be:	62 5f       	subi	r22, 0xF2	; 242
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	c7 01       	movw	r24, r14
    25ca:	b6 01       	movw	r22, r12
    25cc:	aa db       	rcall	.-2220   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	08 95       	ret

000025dc <vTaskPlaceOnEventListRestricted>:
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	cf 93       	push	r28
    25e6:	6a 01       	movw	r12, r20
    25e8:	7b 01       	movw	r14, r22
    25ea:	c2 2f       	mov	r28, r18
    25ec:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <pxCurrentTCB>
    25f0:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    25f4:	62 5f       	subi	r22, 0xF2	; 242
    25f6:	7f 4f       	sbci	r23, 0xFF	; 255
    25f8:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    25fc:	cc 23       	and	r28, r28
    25fe:	21 f0       	breq	.+8      	; 0x2608 <vTaskPlaceOnEventListRestricted+0x2c>
    2600:	cc 24       	eor	r12, r12
    2602:	ca 94       	dec	r12
    2604:	dc 2c       	mov	r13, r12
    2606:	76 01       	movw	r14, r12
    2608:	4c 2f       	mov	r20, r28
    260a:	c7 01       	movw	r24, r14
    260c:	b6 01       	movw	r22, r12
    260e:	89 db       	rcall	.-2286   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    2610:	cf 91       	pop	r28
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	08 95       	ret

0000261c <xTaskRemoveFromEventList>:
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	dc 01       	movw	r26, r24
    2626:	17 96       	adiw	r26, 0x07	; 7
    2628:	ed 91       	ld	r30, X+
    262a:	fc 91       	ld	r31, X
    262c:	18 97       	sbiw	r26, 0x08	; 8
    262e:	c0 85       	ldd	r28, Z+8	; 0x08
    2630:	d1 85       	ldd	r29, Z+9	; 0x09
    2632:	8e 01       	movw	r16, r28
    2634:	02 5f       	subi	r16, 0xF2	; 242
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	c8 01       	movw	r24, r16
    263a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    263e:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    2642:	81 11       	cpse	r24, r1
    2644:	16 c0       	rjmp	.+44     	; 0x2672 <xTaskRemoveFromEventList+0x56>
    2646:	0c 50       	subi	r16, 0x0C	; 12
    2648:	11 09       	sbc	r17, r1
    264a:	c8 01       	movw	r24, r16
    264c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2650:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2652:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    2656:	98 17       	cp	r25, r24
    2658:	10 f4       	brcc	.+4      	; 0x265e <xTaskRemoveFromEventList+0x42>
    265a:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    265e:	bb e0       	ldi	r27, 0x0B	; 11
    2660:	8b 9f       	mul	r24, r27
    2662:	c0 01       	movw	r24, r0
    2664:	11 24       	eor	r1, r1
    2666:	b8 01       	movw	r22, r16
    2668:	8f 5c       	subi	r24, 0xCF	; 207
    266a:	97 4e       	sbci	r25, 0xE7	; 231
    266c:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    2670:	05 c0       	rjmp	.+10     	; 0x267c <xTaskRemoveFromEventList+0x60>
    2672:	b8 01       	movw	r22, r16
    2674:	8c e0       	ldi	r24, 0x0C	; 12
    2676:	98 e1       	ldi	r25, 0x18	; 24
    2678:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    267c:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2680:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2684:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2686:	82 8d       	ldd	r24, Z+26	; 0x1a
    2688:	89 17       	cp	r24, r25
    268a:	20 f4       	brcc	.+8      	; 0x2694 <xTaskRemoveFromEventList+0x78>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <xYieldPending>
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <xTaskRemoveFromEventList+0x7a>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	08 95       	ret

000026a0 <vTaskRemoveFromUnorderedEventList>:
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	70 68       	ori	r23, 0x80	; 128
    26aa:	fc 01       	movw	r30, r24
    26ac:	40 83       	st	Z, r20
    26ae:	51 83       	std	Z+1, r21	; 0x01
    26b0:	62 83       	std	Z+2, r22	; 0x02
    26b2:	73 83       	std	Z+3, r23	; 0x03
    26b4:	c0 85       	ldd	r28, Z+8	; 0x08
    26b6:	d1 85       	ldd	r29, Z+9	; 0x09
    26b8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    26bc:	8e 01       	movw	r16, r28
    26be:	0e 5f       	subi	r16, 0xFE	; 254
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	c8 01       	movw	r24, r16
    26c4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    26c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ca:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    26ce:	98 17       	cp	r25, r24
    26d0:	10 f4       	brcc	.+4      	; 0x26d6 <vTaskRemoveFromUnorderedEventList+0x36>
    26d2:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    26d6:	fb e0       	ldi	r31, 0x0B	; 11
    26d8:	8f 9f       	mul	r24, r31
    26da:	c0 01       	movw	r24, r0
    26dc:	11 24       	eor	r1, r1
    26de:	b8 01       	movw	r22, r16
    26e0:	8f 5c       	subi	r24, 0xCF	; 207
    26e2:	97 4e       	sbci	r25, 0xE7	; 231
    26e4:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    26e8:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    26ec:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    26f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26f4:	89 17       	cp	r24, r25
    26f6:	18 f4       	brcc	.+6      	; 0x26fe <vTaskRemoveFromUnorderedEventList+0x5e>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <xYieldPending>
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	08 95       	ret

00002708 <vTaskSetTimeOutState>:
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	0f 92       	push	r0
    270e:	20 91 eb 17 	lds	r18, 0x17EB	; 0x8017eb <xNumOfOverflows>
    2712:	fc 01       	movw	r30, r24
    2714:	20 83       	st	Z, r18
    2716:	40 91 f0 17 	lds	r20, 0x17F0	; 0x8017f0 <xTickCount>
    271a:	50 91 f1 17 	lds	r21, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    271e:	60 91 f2 17 	lds	r22, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    2722:	70 91 f3 17 	lds	r23, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    2726:	41 83       	std	Z+1, r20	; 0x01
    2728:	52 83       	std	Z+2, r21	; 0x02
    272a:	63 83       	std	Z+3, r22	; 0x03
    272c:	74 83       	std	Z+4, r23	; 0x04
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	08 95       	ret

00002734 <vTaskInternalSetTimeOutState>:
    2734:	20 91 eb 17 	lds	r18, 0x17EB	; 0x8017eb <xNumOfOverflows>
    2738:	fc 01       	movw	r30, r24
    273a:	20 83       	st	Z, r18
    273c:	40 91 f0 17 	lds	r20, 0x17F0	; 0x8017f0 <xTickCount>
    2740:	50 91 f1 17 	lds	r21, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    2744:	60 91 f2 17 	lds	r22, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    2748:	70 91 f3 17 	lds	r23, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    274c:	41 83       	std	Z+1, r20	; 0x01
    274e:	52 83       	std	Z+2, r21	; 0x02
    2750:	63 83       	std	Z+3, r22	; 0x03
    2752:	74 83       	std	Z+4, r23	; 0x04
    2754:	08 95       	ret

00002756 <xTaskCheckForTimeOut>:
    2756:	cf 92       	push	r12
    2758:	df 92       	push	r13
    275a:	ef 92       	push	r14
    275c:	ff 92       	push	r15
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	fb 01       	movw	r30, r22
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	0f 92       	push	r0
    276e:	40 91 f0 17 	lds	r20, 0x17F0	; 0x8017f0 <xTickCount>
    2772:	50 91 f1 17 	lds	r21, 0x17F1	; 0x8017f1 <xTickCount+0x1>
    2776:	60 91 f2 17 	lds	r22, 0x17F2	; 0x8017f2 <xTickCount+0x2>
    277a:	70 91 f3 17 	lds	r23, 0x17F3	; 0x8017f3 <xTickCount+0x3>
    277e:	00 81       	ld	r16, Z
    2780:	11 81       	ldd	r17, Z+1	; 0x01
    2782:	22 81       	ldd	r18, Z+2	; 0x02
    2784:	33 81       	ldd	r19, Z+3	; 0x03
    2786:	0f 3f       	cpi	r16, 0xFF	; 255
    2788:	af ef       	ldi	r26, 0xFF	; 255
    278a:	1a 07       	cpc	r17, r26
    278c:	2a 07       	cpc	r18, r26
    278e:	3a 07       	cpc	r19, r26
    2790:	49 f1       	breq	.+82     	; 0x27e4 <xTaskCheckForTimeOut+0x8e>
    2792:	ec 01       	movw	r28, r24
    2794:	c9 80       	ldd	r12, Y+1	; 0x01
    2796:	da 80       	ldd	r13, Y+2	; 0x02
    2798:	eb 80       	ldd	r14, Y+3	; 0x03
    279a:	fc 80       	ldd	r15, Y+4	; 0x04
    279c:	a0 91 eb 17 	lds	r26, 0x17EB	; 0x8017eb <xNumOfOverflows>
    27a0:	b8 81       	ld	r27, Y
    27a2:	ba 17       	cp	r27, r26
    27a4:	29 f0       	breq	.+10     	; 0x27b0 <xTaskCheckForTimeOut+0x5a>
    27a6:	4c 15       	cp	r20, r12
    27a8:	5d 05       	cpc	r21, r13
    27aa:	6e 05       	cpc	r22, r14
    27ac:	7f 05       	cpc	r23, r15
    27ae:	e0 f4       	brcc	.+56     	; 0x27e8 <xTaskCheckForTimeOut+0x92>
    27b0:	4c 19       	sub	r20, r12
    27b2:	5d 09       	sbc	r21, r13
    27b4:	6e 09       	sbc	r22, r14
    27b6:	7f 09       	sbc	r23, r15
    27b8:	40 17       	cp	r20, r16
    27ba:	51 07       	cpc	r21, r17
    27bc:	62 07       	cpc	r22, r18
    27be:	73 07       	cpc	r23, r19
    27c0:	58 f4       	brcc	.+22     	; 0x27d8 <xTaskCheckForTimeOut+0x82>
    27c2:	04 1b       	sub	r16, r20
    27c4:	15 0b       	sbc	r17, r21
    27c6:	26 0b       	sbc	r18, r22
    27c8:	37 0b       	sbc	r19, r23
    27ca:	00 83       	st	Z, r16
    27cc:	11 83       	std	Z+1, r17	; 0x01
    27ce:	22 83       	std	Z+2, r18	; 0x02
    27d0:	33 83       	std	Z+3, r19	; 0x03
    27d2:	b0 df       	rcall	.-160    	; 0x2734 <vTaskInternalSetTimeOutState>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <xTaskCheckForTimeOut+0x94>
    27d8:	10 82       	st	Z, r1
    27da:	11 82       	std	Z+1, r1	; 0x01
    27dc:	12 82       	std	Z+2, r1	; 0x02
    27de:	13 82       	std	Z+3, r1	; 0x03
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <xTaskCheckForTimeOut+0x94>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <xTaskCheckForTimeOut+0x94>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	08 95       	ret

00002800 <vTaskMissedYield>:
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <xYieldPending>
    2806:	08 95       	ret

00002808 <xTaskGetCurrentTaskHandle>:
    2808:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    280c:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2810:	08 95       	ret

00002812 <xTaskGetSchedulerState>:
    2812:	80 91 ee 17 	lds	r24, 0x17EE	; 0x8017ee <xSchedulerRunning>
    2816:	88 23       	and	r24, r24
    2818:	31 f0       	breq	.+12     	; 0x2826 <xTaskGetSchedulerState+0x14>
    281a:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    281e:	88 23       	and	r24, r24
    2820:	21 f0       	breq	.+8      	; 0x282a <xTaskGetSchedulerState+0x18>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	08 95       	ret
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	08 95       	ret
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	08 95       	ret

0000282e <xTaskPriorityDisinherit>:
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	fc 01       	movw	r30, r24
    2838:	89 2b       	or	r24, r25
    283a:	79 f1       	breq	.+94     	; 0x289a <xTaskPriorityDisinherit+0x6c>
    283c:	80 a5       	ldd	r24, Z+40	; 0x28
    283e:	81 50       	subi	r24, 0x01	; 1
    2840:	80 a7       	std	Z+40, r24	; 0x28
    2842:	22 8d       	ldd	r18, Z+26	; 0x1a
    2844:	97 a1       	ldd	r25, Z+39	; 0x27
    2846:	29 17       	cp	r18, r25
    2848:	51 f1       	breq	.+84     	; 0x289e <xTaskPriorityDisinherit+0x70>
    284a:	81 11       	cpse	r24, r1
    284c:	2a c0       	rjmp	.+84     	; 0x28a2 <xTaskPriorityDisinherit+0x74>
    284e:	ef 01       	movw	r28, r30
    2850:	8f 01       	movw	r16, r30
    2852:	0e 5f       	subi	r16, 0xFE	; 254
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	c8 01       	movw	r24, r16
    2858:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    285c:	8f a1       	ldd	r24, Y+39	; 0x27
    285e:	8a 8f       	std	Y+26, r24	; 0x1a
    2860:	44 e0       	ldi	r20, 0x04	; 4
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	48 1b       	sub	r20, r24
    286a:	51 09       	sbc	r21, r1
    286c:	61 09       	sbc	r22, r1
    286e:	71 09       	sbc	r23, r1
    2870:	4e 87       	std	Y+14, r20	; 0x0e
    2872:	5f 87       	std	Y+15, r21	; 0x0f
    2874:	68 8b       	std	Y+16, r22	; 0x10
    2876:	79 8b       	std	Y+17, r23	; 0x11
    2878:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    287c:	98 17       	cp	r25, r24
    287e:	10 f4       	brcc	.+4      	; 0x2884 <xTaskPriorityDisinherit+0x56>
    2880:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    2884:	2b e0       	ldi	r18, 0x0B	; 11
    2886:	82 9f       	mul	r24, r18
    2888:	c0 01       	movw	r24, r0
    288a:	11 24       	eor	r1, r1
    288c:	b8 01       	movw	r22, r16
    288e:	8f 5c       	subi	r24, 0xCF	; 207
    2890:	97 4e       	sbci	r25, 0xE7	; 231
    2892:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	05 c0       	rjmp	.+10     	; 0x28a4 <xTaskPriorityDisinherit+0x76>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	03 c0       	rjmp	.+6      	; 0x28a4 <xTaskPriorityDisinherit+0x76>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <xTaskPriorityDisinherit+0x76>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	08 95       	ret

000028ae <uxTaskResetEventItemValue>:
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    28ba:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    28be:	66 85       	ldd	r22, Z+14	; 0x0e
    28c0:	77 85       	ldd	r23, Z+15	; 0x0f
    28c2:	80 89       	ldd	r24, Z+16	; 0x10
    28c4:	91 89       	ldd	r25, Z+17	; 0x11
    28c6:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    28ca:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    28ce:	a0 91 5d 18 	lds	r26, 0x185D	; 0x80185d <pxCurrentTCB>
    28d2:	b0 91 5e 18 	lds	r27, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    28d6:	5a 96       	adiw	r26, 0x1a	; 26
    28d8:	2c 91       	ld	r18, X
    28da:	c1 2c       	mov	r12, r1
    28dc:	d1 2c       	mov	r13, r1
    28de:	76 01       	movw	r14, r12
    28e0:	68 94       	set
    28e2:	c2 f8       	bld	r12, 2
    28e4:	c2 1a       	sub	r12, r18
    28e6:	d1 08       	sbc	r13, r1
    28e8:	e1 08       	sbc	r14, r1
    28ea:	f1 08       	sbc	r15, r1
    28ec:	c6 86       	std	Z+14, r12	; 0x0e
    28ee:	d7 86       	std	Z+15, r13	; 0x0f
    28f0:	e0 8a       	std	Z+16, r14	; 0x10
    28f2:	f1 8a       	std	Z+17, r15	; 0x11
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	08 95       	ret

000028fe <xTaskNotifyWait>:
    28fe:	4f 92       	push	r4
    2900:	5f 92       	push	r5
    2902:	6f 92       	push	r6
    2904:	7f 92       	push	r7
    2906:	8f 92       	push	r8
    2908:	9f 92       	push	r9
    290a:	af 92       	push	r10
    290c:	bf 92       	push	r11
    290e:	cf 92       	push	r12
    2910:	df 92       	push	r13
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	49 01       	movw	r8, r18
    291c:	5a 01       	movw	r10, r20
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	0f 92       	push	r0
    2924:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2928:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    292c:	27 a5       	ldd	r18, Z+47	; 0x2f
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	39 f1       	breq	.+78     	; 0x2980 <xTaskNotifyWait+0x82>
    2932:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2936:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    293a:	43 a4       	ldd	r4, Z+43	; 0x2b
    293c:	54 a4       	ldd	r5, Z+44	; 0x2c
    293e:	65 a4       	ldd	r6, Z+45	; 0x2d
    2940:	76 a4       	ldd	r7, Z+46	; 0x2e
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	80 95       	com	r24
    2948:	90 95       	com	r25
    294a:	a0 95       	com	r26
    294c:	b0 95       	com	r27
    294e:	84 21       	and	r24, r4
    2950:	95 21       	and	r25, r5
    2952:	a6 21       	and	r26, r6
    2954:	b7 21       	and	r27, r7
    2956:	83 a7       	std	Z+43, r24	; 0x2b
    2958:	94 a7       	std	Z+44, r25	; 0x2c
    295a:	a5 a7       	std	Z+45, r26	; 0x2d
    295c:	b6 a7       	std	Z+46, r27	; 0x2e
    295e:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2962:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	87 a7       	std	Z+47, r24	; 0x2f
    296a:	c1 14       	cp	r12, r1
    296c:	d1 04       	cpc	r13, r1
    296e:	e1 04       	cpc	r14, r1
    2970:	f1 04       	cpc	r15, r1
    2972:	31 f0       	breq	.+12     	; 0x2980 <xTaskNotifyWait+0x82>
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	c7 01       	movw	r24, r14
    2978:	b6 01       	movw	r22, r12
    297a:	d3 d9       	rcall	.-3162   	; 0x1d22 <prvAddCurrentTaskToDelayedList>
    297c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    2980:	0f 90       	pop	r0
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	0f 92       	push	r0
    298a:	01 15       	cp	r16, r1
    298c:	11 05       	cpc	r17, r1
    298e:	69 f0       	breq	.+26     	; 0x29aa <xTaskNotifyWait+0xac>
    2990:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2994:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2998:	83 a5       	ldd	r24, Z+43	; 0x2b
    299a:	94 a5       	ldd	r25, Z+44	; 0x2c
    299c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    299e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    29a0:	f8 01       	movw	r30, r16
    29a2:	80 83       	st	Z, r24
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	a2 83       	std	Z+2, r26	; 0x02
    29a8:	b3 83       	std	Z+3, r27	; 0x03
    29aa:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    29ae:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    29b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	b1 f4       	brne	.+44     	; 0x29e4 <xTaskNotifyWait+0xe6>
    29b8:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    29bc:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    29c0:	83 a5       	ldd	r24, Z+43	; 0x2b
    29c2:	94 a5       	ldd	r25, Z+44	; 0x2c
    29c4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    29c6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    29c8:	80 94       	com	r8
    29ca:	90 94       	com	r9
    29cc:	a0 94       	com	r10
    29ce:	b0 94       	com	r11
    29d0:	88 22       	and	r8, r24
    29d2:	99 22       	and	r9, r25
    29d4:	aa 22       	and	r10, r26
    29d6:	bb 22       	and	r11, r27
    29d8:	83 a6       	std	Z+43, r8	; 0x2b
    29da:	94 a6       	std	Z+44, r9	; 0x2c
    29dc:	a5 a6       	std	Z+45, r10	; 0x2d
    29de:	b6 a6       	std	Z+46, r11	; 0x2e
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <xTaskNotifyWait+0xe8>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    29ea:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    29ee:	17 a6       	std	Z+47, r1	; 0x2f
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	df 90       	pop	r13
    29fe:	cf 90       	pop	r12
    2a00:	bf 90       	pop	r11
    2a02:	af 90       	pop	r10
    2a04:	9f 90       	pop	r9
    2a06:	8f 90       	pop	r8
    2a08:	7f 90       	pop	r7
    2a0a:	6f 90       	pop	r6
    2a0c:	5f 90       	pop	r5
    2a0e:	4f 90       	pop	r4
    2a10:	08 95       	ret

00002a12 <xTaskGenericNotify>:
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	0f 92       	push	r0
    2a22:	01 15       	cp	r16, r1
    2a24:	11 05       	cpc	r17, r1
    2a26:	49 f0       	breq	.+18     	; 0x2a3a <xTaskGenericNotify+0x28>
    2a28:	83 a5       	ldd	r24, Z+43	; 0x2b
    2a2a:	94 a5       	ldd	r25, Z+44	; 0x2c
    2a2c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2a2e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2a30:	e8 01       	movw	r28, r16
    2a32:	88 83       	st	Y, r24
    2a34:	99 83       	std	Y+1, r25	; 0x01
    2a36:	aa 83       	std	Y+2, r26	; 0x02
    2a38:	bb 83       	std	Y+3, r27	; 0x03
    2a3a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	97 a7       	std	Z+47, r25	; 0x2f
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	b1 f0       	breq	.+44     	; 0x2a70 <xTaskGenericNotify+0x5e>
    2a44:	18 f4       	brcc	.+6      	; 0x2a4c <xTaskGenericNotify+0x3a>
    2a46:	21 30       	cpi	r18, 0x01	; 1
    2a48:	31 f0       	breq	.+12     	; 0x2a56 <xTaskGenericNotify+0x44>
    2a4a:	2a c0       	rjmp	.+84     	; 0x2aa0 <xTaskGenericNotify+0x8e>
    2a4c:	23 30       	cpi	r18, 0x03	; 3
    2a4e:	e9 f0       	breq	.+58     	; 0x2a8a <xTaskGenericNotify+0x78>
    2a50:	24 30       	cpi	r18, 0x04	; 4
    2a52:	01 f1       	breq	.+64     	; 0x2a94 <xTaskGenericNotify+0x82>
    2a54:	25 c0       	rjmp	.+74     	; 0x2aa0 <xTaskGenericNotify+0x8e>
    2a56:	03 a5       	ldd	r16, Z+43	; 0x2b
    2a58:	14 a5       	ldd	r17, Z+44	; 0x2c
    2a5a:	25 a5       	ldd	r18, Z+45	; 0x2d
    2a5c:	36 a5       	ldd	r19, Z+46	; 0x2e
    2a5e:	40 2b       	or	r20, r16
    2a60:	51 2b       	or	r21, r17
    2a62:	62 2b       	or	r22, r18
    2a64:	73 2b       	or	r23, r19
    2a66:	43 a7       	std	Z+43, r20	; 0x2b
    2a68:	54 a7       	std	Z+44, r21	; 0x2c
    2a6a:	65 a7       	std	Z+45, r22	; 0x2d
    2a6c:	76 a7       	std	Z+46, r23	; 0x2e
    2a6e:	18 c0       	rjmp	.+48     	; 0x2aa0 <xTaskGenericNotify+0x8e>
    2a70:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a72:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a74:	65 a5       	ldd	r22, Z+45	; 0x2d
    2a76:	76 a5       	ldd	r23, Z+46	; 0x2e
    2a78:	4f 5f       	subi	r20, 0xFF	; 255
    2a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	43 a7       	std	Z+43, r20	; 0x2b
    2a82:	54 a7       	std	Z+44, r21	; 0x2c
    2a84:	65 a7       	std	Z+45, r22	; 0x2d
    2a86:	76 a7       	std	Z+46, r23	; 0x2e
    2a88:	0b c0       	rjmp	.+22     	; 0x2aa0 <xTaskGenericNotify+0x8e>
    2a8a:	43 a7       	std	Z+43, r20	; 0x2b
    2a8c:	54 a7       	std	Z+44, r21	; 0x2c
    2a8e:	65 a7       	std	Z+45, r22	; 0x2d
    2a90:	76 a7       	std	Z+46, r23	; 0x2e
    2a92:	06 c0       	rjmp	.+12     	; 0x2aa0 <xTaskGenericNotify+0x8e>
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	49 f1       	breq	.+82     	; 0x2aea <xTaskGenericNotify+0xd8>
    2a98:	43 a7       	std	Z+43, r20	; 0x2b
    2a9a:	54 a7       	std	Z+44, r21	; 0x2c
    2a9c:	65 a7       	std	Z+45, r22	; 0x2d
    2a9e:	76 a7       	std	Z+46, r23	; 0x2e
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	29 f5       	brne	.+74     	; 0x2aee <xTaskGenericNotify+0xdc>
    2aa4:	ef 01       	movw	r28, r30
    2aa6:	8f 01       	movw	r16, r30
    2aa8:	0e 5f       	subi	r16, 0xFE	; 254
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	c8 01       	movw	r24, r16
    2aae:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2ab2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ab4:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    2ab8:	98 17       	cp	r25, r24
    2aba:	10 f4       	brcc	.+4      	; 0x2ac0 <xTaskGenericNotify+0xae>
    2abc:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    2ac0:	2b e0       	ldi	r18, 0x0B	; 11
    2ac2:	82 9f       	mul	r24, r18
    2ac4:	c0 01       	movw	r24, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	b8 01       	movw	r22, r16
    2aca:	8f 5c       	subi	r24, 0xCF	; 207
    2acc:	97 4e       	sbci	r25, 0xE7	; 231
    2ace:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    2ad2:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2ad6:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2ada:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2adc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ade:	89 17       	cp	r24, r25
    2ae0:	40 f4       	brcc	.+16     	; 0x2af2 <xTaskGenericNotify+0xe0>
    2ae2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	05 c0       	rjmp	.+10     	; 0x2af4 <xTaskGenericNotify+0xe2>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	03 c0       	rjmp	.+6      	; 0x2af4 <xTaskGenericNotify+0xe2>
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <xTaskGenericNotify+0xe2>
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <xTaskGenericNotifyFromISR>:
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	fc 01       	movw	r30, r24
    2b10:	01 15       	cp	r16, r1
    2b12:	11 05       	cpc	r17, r1
    2b14:	49 f0       	breq	.+18     	; 0x2b28 <xTaskGenericNotifyFromISR+0x26>
    2b16:	83 a5       	ldd	r24, Z+43	; 0x2b
    2b18:	94 a5       	ldd	r25, Z+44	; 0x2c
    2b1a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2b1c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2b1e:	e8 01       	movw	r28, r16
    2b20:	88 83       	st	Y, r24
    2b22:	99 83       	std	Y+1, r25	; 0x01
    2b24:	aa 83       	std	Y+2, r26	; 0x02
    2b26:	bb 83       	std	Y+3, r27	; 0x03
    2b28:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b2a:	92 e0       	ldi	r25, 0x02	; 2
    2b2c:	97 a7       	std	Z+47, r25	; 0x2f
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	b1 f0       	breq	.+44     	; 0x2b5e <xTaskGenericNotifyFromISR+0x5c>
    2b32:	18 f4       	brcc	.+6      	; 0x2b3a <xTaskGenericNotifyFromISR+0x38>
    2b34:	21 30       	cpi	r18, 0x01	; 1
    2b36:	31 f0       	breq	.+12     	; 0x2b44 <xTaskGenericNotifyFromISR+0x42>
    2b38:	2a c0       	rjmp	.+84     	; 0x2b8e <xTaskGenericNotifyFromISR+0x8c>
    2b3a:	23 30       	cpi	r18, 0x03	; 3
    2b3c:	e9 f0       	breq	.+58     	; 0x2b78 <xTaskGenericNotifyFromISR+0x76>
    2b3e:	24 30       	cpi	r18, 0x04	; 4
    2b40:	01 f1       	breq	.+64     	; 0x2b82 <xTaskGenericNotifyFromISR+0x80>
    2b42:	25 c0       	rjmp	.+74     	; 0x2b8e <xTaskGenericNotifyFromISR+0x8c>
    2b44:	03 a5       	ldd	r16, Z+43	; 0x2b
    2b46:	14 a5       	ldd	r17, Z+44	; 0x2c
    2b48:	25 a5       	ldd	r18, Z+45	; 0x2d
    2b4a:	36 a5       	ldd	r19, Z+46	; 0x2e
    2b4c:	40 2b       	or	r20, r16
    2b4e:	51 2b       	or	r21, r17
    2b50:	62 2b       	or	r22, r18
    2b52:	73 2b       	or	r23, r19
    2b54:	43 a7       	std	Z+43, r20	; 0x2b
    2b56:	54 a7       	std	Z+44, r21	; 0x2c
    2b58:	65 a7       	std	Z+45, r22	; 0x2d
    2b5a:	76 a7       	std	Z+46, r23	; 0x2e
    2b5c:	18 c0       	rjmp	.+48     	; 0x2b8e <xTaskGenericNotifyFromISR+0x8c>
    2b5e:	43 a5       	ldd	r20, Z+43	; 0x2b
    2b60:	54 a5       	ldd	r21, Z+44	; 0x2c
    2b62:	65 a5       	ldd	r22, Z+45	; 0x2d
    2b64:	76 a5       	ldd	r23, Z+46	; 0x2e
    2b66:	4f 5f       	subi	r20, 0xFF	; 255
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	6f 4f       	sbci	r22, 0xFF	; 255
    2b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6e:	43 a7       	std	Z+43, r20	; 0x2b
    2b70:	54 a7       	std	Z+44, r21	; 0x2c
    2b72:	65 a7       	std	Z+45, r22	; 0x2d
    2b74:	76 a7       	std	Z+46, r23	; 0x2e
    2b76:	0b c0       	rjmp	.+22     	; 0x2b8e <xTaskGenericNotifyFromISR+0x8c>
    2b78:	43 a7       	std	Z+43, r20	; 0x2b
    2b7a:	54 a7       	std	Z+44, r21	; 0x2c
    2b7c:	65 a7       	std	Z+45, r22	; 0x2d
    2b7e:	76 a7       	std	Z+46, r23	; 0x2e
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <xTaskGenericNotifyFromISR+0x8c>
    2b82:	82 30       	cpi	r24, 0x02	; 2
    2b84:	d9 f1       	breq	.+118    	; 0x2bfc <xTaskGenericNotifyFromISR+0xfa>
    2b86:	43 a7       	std	Z+43, r20	; 0x2b
    2b88:	54 a7       	std	Z+44, r21	; 0x2c
    2b8a:	65 a7       	std	Z+45, r22	; 0x2d
    2b8c:	76 a7       	std	Z+46, r23	; 0x2e
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	b9 f5       	brne	.+110    	; 0x2c00 <xTaskGenericNotifyFromISR+0xfe>
    2b92:	ef 01       	movw	r28, r30
    2b94:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxSchedulerSuspended>
    2b98:	81 11       	cpse	r24, r1
    2b9a:	17 c0       	rjmp	.+46     	; 0x2bca <xTaskGenericNotifyFromISR+0xc8>
    2b9c:	8f 01       	movw	r16, r30
    2b9e:	0e 5f       	subi	r16, 0xFE	; 254
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
    2ba8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2baa:	90 91 ef 17 	lds	r25, 0x17EF	; 0x8017ef <uxTopReadyPriority>
    2bae:	98 17       	cp	r25, r24
    2bb0:	10 f4       	brcc	.+4      	; 0x2bb6 <xTaskGenericNotifyFromISR+0xb4>
    2bb2:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxTopReadyPriority>
    2bb6:	eb e0       	ldi	r30, 0x0B	; 11
    2bb8:	8e 9f       	mul	r24, r30
    2bba:	c0 01       	movw	r24, r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	b8 01       	movw	r22, r16
    2bc0:	8f 5c       	subi	r24, 0xCF	; 207
    2bc2:	97 4e       	sbci	r25, 0xE7	; 231
    2bc4:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    2bc8:	07 c0       	rjmp	.+14     	; 0x2bd8 <xTaskGenericNotifyFromISR+0xd6>
    2bca:	bf 01       	movw	r22, r30
    2bcc:	62 5f       	subi	r22, 0xF2	; 242
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd0:	8c e0       	ldi	r24, 0x0C	; 12
    2bd2:	98 e1       	ldi	r25, 0x18	; 24
    2bd4:	0e 94 b1 06 	call	0xd62	; 0xd62 <vListInsertEnd>
    2bd8:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <pxCurrentTCB>
    2bdc:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <pxCurrentTCB+0x1>
    2be0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2be2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2be4:	89 17       	cp	r24, r25
    2be6:	70 f4       	brcc	.+28     	; 0x2c04 <xTaskGenericNotifyFromISR+0x102>
    2be8:	e1 14       	cp	r14, r1
    2bea:	f1 04       	cpc	r15, r1
    2bec:	19 f0       	breq	.+6      	; 0x2bf4 <xTaskGenericNotifyFromISR+0xf2>
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	e7 01       	movw	r28, r14
    2bf2:	88 83       	st	Y, r24
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <xYieldPending>
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <xTaskGenericNotifyFromISR+0x104>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <xTaskGenericNotifyFromISR+0x104>
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <xTaskGenericNotifyFromISR+0x104>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	ff 90       	pop	r15
    2c10:	ef 90       	pop	r14
    2c12:	08 95       	ret

00002c14 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	21 f4       	brne	.+8      	; 0x2c20 <xTaskNotifyStateClear+0xc>
    2c18:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <pxCurrentTCB>
    2c1c:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2c26:	fc 01       	movw	r30, r24
    2c28:	27 a5       	ldd	r18, Z+47	; 0x2f
    2c2a:	22 30       	cpi	r18, 0x02	; 2
    2c2c:	19 f4       	brne	.+6      	; 0x2c34 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2c2e:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2c34:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c36:	0f 90       	pop	r0
    2c38:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c3a:	08 95       	ret

00002c3c <prvInsertTimerInActiveList>:
    2c3c:	cf 92       	push	r12
    2c3e:	df 92       	push	r13
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	fc 01       	movw	r30, r24
    2c4a:	42 83       	std	Z+2, r20	; 0x02
    2c4c:	53 83       	std	Z+3, r21	; 0x03
    2c4e:	64 83       	std	Z+4, r22	; 0x04
    2c50:	75 83       	std	Z+5, r23	; 0x05
    2c52:	93 87       	std	Z+11, r25	; 0x0b
    2c54:	82 87       	std	Z+10, r24	; 0x0a
    2c56:	04 17       	cp	r16, r20
    2c58:	15 07       	cpc	r17, r21
    2c5a:	26 07       	cpc	r18, r22
    2c5c:	37 07       	cpc	r19, r23
    2c5e:	c0 f0       	brcs	.+48     	; 0x2c90 <prvInsertTimerInActiveList+0x54>
    2c60:	0c 19       	sub	r16, r12
    2c62:	1d 09       	sbc	r17, r13
    2c64:	2e 09       	sbc	r18, r14
    2c66:	3f 09       	sbc	r19, r15
    2c68:	86 85       	ldd	r24, Z+14	; 0x0e
    2c6a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c6c:	a0 89       	ldd	r26, Z+16	; 0x10
    2c6e:	b1 89       	ldd	r27, Z+17	; 0x11
    2c70:	08 17       	cp	r16, r24
    2c72:	19 07       	cpc	r17, r25
    2c74:	2a 07       	cpc	r18, r26
    2c76:	3b 07       	cpc	r19, r27
    2c78:	00 f5       	brcc	.+64     	; 0x2cba <prvInsertTimerInActiveList+0x7e>
    2c7a:	bf 01       	movw	r22, r30
    2c7c:	6e 5f       	subi	r22, 0xFE	; 254
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <pxOverflowTimerList>
    2c84:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <pxOverflowTimerList+0x1>
    2c88:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	18 c0       	rjmp	.+48     	; 0x2cc0 <prvInsertTimerInActiveList+0x84>
    2c90:	0c 15       	cp	r16, r12
    2c92:	1d 05       	cpc	r17, r13
    2c94:	2e 05       	cpc	r18, r14
    2c96:	3f 05       	cpc	r19, r15
    2c98:	28 f4       	brcc	.+10     	; 0x2ca4 <prvInsertTimerInActiveList+0x68>
    2c9a:	4c 15       	cp	r20, r12
    2c9c:	5d 05       	cpc	r21, r13
    2c9e:	6e 05       	cpc	r22, r14
    2ca0:	7f 05       	cpc	r23, r15
    2ca2:	68 f4       	brcc	.+26     	; 0x2cbe <prvInsertTimerInActiveList+0x82>
    2ca4:	bf 01       	movw	r22, r30
    2ca6:	6e 5f       	subi	r22, 0xFE	; 254
    2ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    2caa:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <pxCurrentTimerList>
    2cae:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <pxCurrentTimerList+0x1>
    2cb2:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	03 c0       	rjmp	.+6      	; 0x2cc0 <prvInsertTimerInActiveList+0x84>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <prvInsertTimerInActiveList+0x84>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	08 95       	ret

00002cce <prvCheckForValidListAndQueue>:
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	0f 92       	push	r0
    2cd4:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
    2cd8:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
    2cdc:	89 2b       	or	r24, r25
    2cde:	e9 f4       	brne	.+58     	; 0x2d1a <prvCheckForValidListAndQueue+0x4c>
    2ce0:	86 e7       	ldi	r24, 0x76	; 118
    2ce2:	98 e1       	ldi	r25, 0x18	; 24
    2ce4:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    2ce8:	8b e6       	ldi	r24, 0x6B	; 107
    2cea:	98 e1       	ldi	r25, 0x18	; 24
    2cec:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInitialise>
    2cf0:	86 e7       	ldi	r24, 0x76	; 118
    2cf2:	98 e1       	ldi	r25, 0x18	; 24
    2cf4:	90 93 6a 18 	sts	0x186A, r25	; 0x80186a <pxCurrentTimerList+0x1>
    2cf8:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <pxCurrentTimerList>
    2cfc:	8b e6       	ldi	r24, 0x6B	; 107
    2cfe:	98 e1       	ldi	r25, 0x18	; 24
    2d00:	90 93 68 18 	sts	0x1868, r25	; 0x801868 <pxOverflowTimerList+0x1>
    2d04:	80 93 67 18 	sts	0x1867, r24	; 0x801867 <pxOverflowTimerList>
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	67 e0       	ldi	r22, 0x07	; 7
    2d0c:	8a e0       	ldi	r24, 0x0A	; 10
    2d0e:	0e 94 c0 09 	call	0x1380	; 0x1380 <xQueueGenericCreate>
    2d12:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <xTimerQueue+0x1>
    2d16:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <xTimerQueue>
    2d1a:	0f 90       	pop	r0
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	08 95       	ret

00002d20 <xTimerCreateTimerTask>:
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	d3 df       	rcall	.-90     	; 0x2cce <prvCheckForValidListAndQueue>
    2d28:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
    2d2c:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
    2d30:	89 2b       	or	r24, r25
    2d32:	89 f0       	breq	.+34     	; 0x2d56 <xTimerCreateTimerTask+0x36>
    2d34:	0f 2e       	mov	r0, r31
    2d36:	f3 e6       	ldi	r31, 0x63	; 99
    2d38:	ef 2e       	mov	r14, r31
    2d3a:	f8 e1       	ldi	r31, 0x18	; 24
    2d3c:	ff 2e       	mov	r15, r31
    2d3e:	f0 2d       	mov	r31, r0
    2d40:	03 e0       	ldi	r16, 0x03	; 3
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	45 e5       	ldi	r20, 0x55	; 85
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	60 ec       	ldi	r22, 0xC0	; 192
    2d4c:	73 e0       	ldi	r23, 0x03	; 3
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	5d d8       	rcall	.-3910   	; 0x1e0e <xTaskCreate>
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <xTimerCreateTimerTask+0x38>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	08 95       	ret

00002d60 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	27 97       	sbiw	r28, 0x07	; 7
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2d88:	e0 91 65 18 	lds	r30, 0x1865	; 0x801865 <xTimerQueue>
    2d8c:	f0 91 66 18 	lds	r31, 0x1866	; 0x801866 <xTimerQueue+0x1>
    2d90:	30 97       	sbiw	r30, 0x00	; 0
    2d92:	81 f1       	breq	.+96     	; 0x2df4 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2d94:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2d96:	2a 83       	std	Y+2, r18	; 0x02
    2d98:	3b 83       	std	Y+3, r19	; 0x03
    2d9a:	4c 83       	std	Y+4, r20	; 0x04
    2d9c:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2d9e:	9f 83       	std	Y+7, r25	; 0x07
    2da0:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2da2:	66 30       	cpi	r22, 0x06	; 6
    2da4:	f4 f4       	brge	.+60     	; 0x2de2 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2da6:	35 dd       	rcall	.-1430   	; 0x2812 <xTaskGetSchedulerState>
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	69 f4       	brne	.+26     	; 0x2dc6 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dac:	00 e0       	ldi	r16, 0x00	; 0
    2dae:	a7 01       	movw	r20, r14
    2db0:	96 01       	movw	r18, r12
    2db2:	be 01       	movw	r22, r28
    2db4:	6f 5f       	subi	r22, 0xFF	; 255
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
    2dbc:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
    2dc0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <xQueueGenericSend>
    2dc4:	18 c0       	rjmp	.+48     	; 0x2df6 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2dc6:	00 e0       	ldi	r16, 0x00	; 0
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	a9 01       	movw	r20, r18
    2dce:	be 01       	movw	r22, r28
    2dd0:	6f 5f       	subi	r22, 0xFF	; 255
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <xTimerQueue>
    2dd8:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <xTimerQueue+0x1>
    2ddc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <xQueueGenericSend>
    2de0:	0a c0       	rjmp	.+20     	; 0x2df6 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	a8 01       	movw	r20, r16
    2de6:	be 01       	movw	r22, r28
    2de8:	6f 5f       	subi	r22, 0xFF	; 255
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255
    2dec:	cf 01       	movw	r24, r30
    2dee:	0e 94 8e 0a 	call	0x151c	; 0x151c <xQueueGenericSendFromISR>
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2df6:	27 96       	adiw	r28, 0x07	; 7
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	bf 90       	pop	r11
    2e14:	af 90       	pop	r10
    2e16:	9f 90       	pop	r9
    2e18:	8f 90       	pop	r8
    2e1a:	08 95       	ret

00002e1c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2e1c:	2f 92       	push	r2
    2e1e:	3f 92       	push	r3
    2e20:	4f 92       	push	r4
    2e22:	5f 92       	push	r5
    2e24:	6f 92       	push	r6
    2e26:	7f 92       	push	r7
    2e28:	8f 92       	push	r8
    2e2a:	9f 92       	push	r9
    2e2c:	af 92       	push	r10
    2e2e:	bf 92       	push	r11
    2e30:	cf 92       	push	r12
    2e32:	df 92       	push	r13
    2e34:	ef 92       	push	r14
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2e42:	9a d9       	rcall	.-3276   	; 0x2178 <xTaskGetTickCount>
    2e44:	2b 01       	movw	r4, r22
    2e46:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2e48:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <xLastTime.2432>
    2e4c:	90 91 60 18 	lds	r25, 0x1860	; 0x801860 <xLastTime.2432+0x1>
    2e50:	a0 91 61 18 	lds	r26, 0x1861	; 0x801861 <xLastTime.2432+0x2>
    2e54:	b0 91 62 18 	lds	r27, 0x1862	; 0x801862 <xLastTime.2432+0x3>
    2e58:	48 16       	cp	r4, r24
    2e5a:	59 06       	cpc	r5, r25
    2e5c:	6a 06       	cpc	r6, r26
    2e5e:	7b 06       	cpc	r7, r27
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <prvSampleTimeNow+0x48>
    2e62:	53 c0       	rjmp	.+166    	; 0x2f0a <prvSampleTimeNow+0xee>
    2e64:	3b c0       	rjmp	.+118    	; 0x2edc <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e66:	07 80       	ldd	r0, Z+7	; 0x07
    2e68:	f0 85       	ldd	r31, Z+8	; 0x08
    2e6a:	e0 2d       	mov	r30, r0
    2e6c:	80 80       	ld	r8, Z
    2e6e:	91 80       	ldd	r9, Z+1	; 0x01
    2e70:	a2 80       	ldd	r10, Z+2	; 0x02
    2e72:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e74:	c0 85       	ldd	r28, Z+8	; 0x08
    2e76:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e78:	8e 01       	movw	r16, r28
    2e7a:	0e 5f       	subi	r16, 0xFE	; 254
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	c8 01       	movw	r24, r16
    2e80:	0e 94 0f 07 	call	0xe1e	; 0xe1e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e84:	ec 89       	ldd	r30, Y+20	; 0x14
    2e86:	fd 89       	ldd	r31, Y+21	; 0x15
    2e88:	ce 01       	movw	r24, r28
    2e8a:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	82 ff       	sbrs	r24, 2
    2e90:	25 c0       	rjmp	.+74     	; 0x2edc <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e96:	a8 89       	ldd	r26, Y+16	; 0x10
    2e98:	b9 89       	ldd	r27, Y+17	; 0x11
    2e9a:	88 0d       	add	r24, r8
    2e9c:	99 1d       	adc	r25, r9
    2e9e:	aa 1d       	adc	r26, r10
    2ea0:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2ea2:	88 16       	cp	r8, r24
    2ea4:	99 06       	cpc	r9, r25
    2ea6:	aa 06       	cpc	r10, r26
    2ea8:	bb 06       	cpc	r11, r27
    2eaa:	70 f4       	brcc	.+28     	; 0x2ec8 <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2eac:	8a 83       	std	Y+2, r24	; 0x02
    2eae:	9b 83       	std	Y+3, r25	; 0x03
    2eb0:	ac 83       	std	Y+4, r26	; 0x04
    2eb2:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2eb4:	db 87       	std	Y+11, r29	; 0x0b
    2eb6:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2eb8:	b8 01       	movw	r22, r16
    2eba:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <pxCurrentTimerList>
    2ebe:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <pxCurrentTimerList+0x1>
    2ec2:	0e 94 d2 06 	call	0xda4	; 0xda4 <vListInsert>
    2ec6:	0a c0       	rjmp	.+20     	; 0x2edc <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ec8:	c1 2c       	mov	r12, r1
    2eca:	d1 2c       	mov	r13, r1
    2ecc:	76 01       	movw	r14, r12
    2ece:	00 e0       	ldi	r16, 0x00	; 0
    2ed0:	10 e0       	ldi	r17, 0x00	; 0
    2ed2:	a5 01       	movw	r20, r10
    2ed4:	94 01       	movw	r18, r8
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	ce 01       	movw	r24, r28
    2eda:	42 df       	rcall	.-380    	; 0x2d60 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2edc:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <pxCurrentTimerList>
    2ee0:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <pxCurrentTimerList+0x1>
    2ee4:	80 81       	ld	r24, Z
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	be cf       	rjmp	.-132    	; 0x2e66 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2eea:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <pxOverflowTimerList>
    2eee:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <pxOverflowTimerList+0x1>
    2ef2:	90 93 6a 18 	sts	0x186A, r25	; 0x80186a <pxCurrentTimerList+0x1>
    2ef6:	80 93 69 18 	sts	0x1869, r24	; 0x801869 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2efa:	f0 93 68 18 	sts	0x1868, r31	; 0x801868 <pxOverflowTimerList+0x1>
    2efe:	e0 93 67 18 	sts	0x1867, r30	; 0x801867 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	f1 01       	movw	r30, r2
    2f06:	80 83       	st	Z, r24
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2f0a:	f1 01       	movw	r30, r2
    2f0c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2f0e:	40 92 5f 18 	sts	0x185F, r4	; 0x80185f <xLastTime.2432>
    2f12:	50 92 60 18 	sts	0x1860, r5	; 0x801860 <xLastTime.2432+0x1>
    2f16:	60 92 61 18 	sts	0x1861, r6	; 0x801861 <xLastTime.2432+0x2>
    2f1a:	70 92 62 18 	sts	0x1862, r7	; 0x801862 <xLastTime.2432+0x3>

    return xTimeNow;
}
    2f1e:	c3 01       	movw	r24, r6
    2f20:	b2 01       	movw	r22, r4
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	ff 90       	pop	r15
    2f2c:	ef 90       	pop	r14
    2f2e:	df 90       	pop	r13
    2f30:	cf 90       	pop	r12
    2f32:	bf 90       	pop	r11
    2f34:	af 90       	pop	r10
    2f36:	9f 90       	pop	r9
    2f38:	8f 90       	pop	r8
    2f3a:	7f 90       	pop	r7
    2f3c:	6f 90       	pop	r6
    2f3e:	5f 90       	pop	r5
    2f40:	4f 90       	pop	r4
    2f42:	3f 90       	pop	r3
    2f44:	2f 90       	pop	r2
    2f46:	08 95       	ret

00002f48 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2f48:	08 95       	ret

00002f4a <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f4a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f4c:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f4e:	2f ef       	ldi	r18, 0xFF	; 255
    2f50:	80 e7       	ldi	r24, 0x70	; 112
    2f52:	92 e0       	ldi	r25, 0x02	; 2
    2f54:	21 50       	subi	r18, 0x01	; 1
    2f56:	80 40       	sbci	r24, 0x00	; 0
    2f58:	90 40       	sbci	r25, 0x00	; 0
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <vApplicationMallocFailedHook+0xa>
    2f5c:	00 c0       	rjmp	.+0      	; 0x2f5e <vApplicationMallocFailedHook+0x14>
    2f5e:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2f60:	1f 9a       	sbi	0x03, 7	; 3
    2f62:	f5 cf       	rjmp	.-22     	; 0x2f4e <vApplicationMallocFailedHook+0x4>

00002f64 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f64:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f66:	2f 9a       	sbi	0x05, 7	; 5
    2f68:	2f ef       	ldi	r18, 0xFF	; 255
    2f6a:	87 ea       	ldi	r24, 0xA7	; 167
    2f6c:	91 e6       	ldi	r25, 0x61	; 97
    2f6e:	21 50       	subi	r18, 0x01	; 1
    2f70:	80 40       	sbci	r24, 0x00	; 0
    2f72:	90 40       	sbci	r25, 0x00	; 0
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <vApplicationStackOverflowHook+0xa>
    2f76:	00 c0       	rjmp	.+0      	; 0x2f78 <vApplicationStackOverflowHook+0x14>
    2f78:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2f7a:	1f 9a       	sbi	0x03, 7	; 3
    2f7c:	f5 cf       	rjmp	.-22     	; 0x2f68 <vApplicationStackOverflowHook+0x4>

00002f7e <set_up_lora_task>:
void set_up_lora_task (void *pvParameters)
{
	
	bool lora_setup_status;
	
	puts("lorwan initialization");
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	93 e0       	ldi	r25, 0x03	; 3
    2f82:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
	lora_driver_reset_rn2483(1);
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	79 d6       	rcall	.+3314   	; 0x3c7c <lora_driver_reset_rn2483>
	vTaskDelay(2);
    2f8a:	62 e0       	ldi	r22, 0x02	; 2
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	51 da       	rcall	.-2910   	; 0x2436 <vTaskDelay>
	lora_driver_reset_rn2483(0);
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	72 d6       	rcall	.+3300   	; 0x3c7c <lora_driver_reset_rn2483>
    2f98:	66 e9       	ldi	r22, 0x96	; 150
	vTaskDelay(150);
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
	lora_driver_rn2483_factory_reset();
    2fa0:	4a da       	rcall	.-2924   	; 0x2436 <vTaskDelay>
    2fa2:	80 d6       	rcall	.+3328   	; 0x3ca4 <lora_driver_rn2483_factory_reset>
	lora_driver_flush_buffers();
    2fa4:	21 d6       	rcall	.+3138   	; 0x3be8 <lora_driver_flush_buffers>
    2fa6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <network_setup>
	lora_setup_status = network_setup();
    2faa:	88 23       	and	r24, r24
	if(lora_setup_status == true)
    2fac:	81 f0       	breq	.+32     	; 0x2fce <set_up_lora_task+0x50>
    2fae:	41 e0       	ldi	r20, 0x01	; 1
	{
		xEventGroupSetBits(eGroup, CO2_BIT);
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    2fba:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    2fbe:	0e 94 cc 04 	call	0x998	; 0x998 <xEventGroupSetBits>
	else
	{
		puts("lora initialization failed, program shutdown. Please contact the administrator");
		exit(0);
	}
	vTaskDelete(xHandle);
    2fc2:	80 91 81 18 	lds	r24, 0x1881	; 0x801881 <xHandle>
    2fc6:	90 91 82 18 	lds	r25, 0x1882	; 0x801882 <xHandle+0x1>
    2fca:	40 c8       	rjmp	.-3968   	; 0x204c <vTaskDelete>
    2fcc:	08 95       	ret
}
    2fce:	8e ed       	ldi	r24, 0xDE	; 222
	{
		xEventGroupSetBits(eGroup, CO2_BIT);
	}
	else
	{
		puts("lora initialization failed, program shutdown. Please contact the administrator");
    2fd0:	93 e0       	ldi	r25, 0x03	; 3
    2fd2:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
		exit(0);
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <_exit>

00002fde <co2_task>:
    2fde:	cc 24       	eor	r12, r12
{		
	
	for(;;)
	{
			
		uxBits = xEventGroupWaitBits(eGroup, CO2_BIT , pdTRUE, pdTRUE, portMAX_DELAY);
    2fe0:	ca 94       	dec	r12
    2fe2:	dc 2c       	mov	r13, r12
    2fe4:	76 01       	movw	r14, r12
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	21 e0       	ldi	r18, 0x01	; 1
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    2ff6:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    2ffa:	0e 94 ef 03 	call	0x7de	; 0x7de <xEventGroupWaitBits>
    2ffe:	60 93 e1 19 	sts	0x19E1, r22	; 0x8019e1 <uxBits>
    3002:	70 93 e2 19 	sts	0x19E2, r23	; 0x8019e2 <uxBits+0x1>
    3006:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <uxBits+0x2>
    300a:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <uxBits+0x3>
		if ((uxBits & (CO2_BIT)) == (CO2_BIT))
    300e:	60 ff       	sbrs	r22, 0
    3010:	e6 cf       	rjmp	.-52     	; 0x2fde <co2_task>
		{
			co2_meassure(co2sensor);
    3012:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <co2sensor>
    3016:	90 91 da 19 	lds	r25, 0x19DA	; 0x8019da <co2sensor+0x1>
    301a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <co2_meassure>
			xEventGroupSetBits(eGroup, TEMP_HUM_BIT | ASSEMBLE_BIT);
    301e:	46 e0       	ldi	r20, 0x06	; 6
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    302a:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    302e:	0e 94 cc 04 	call	0x998	; 0x998 <xEventGroupSetBits>
    3032:	d5 cf       	rjmp	.-86     	; 0x2fde <co2_task>

00003034 <temp_hum_task>:
void temp_hum_task( void *pvParameters )
{
		
	for(;;)
	{
		uxBits = xEventGroupWaitBits(eGroup, TEMP_HUM_BIT, pdTRUE, pdFALSE, 100);
    3034:	0f 2e       	mov	r0, r31
    3036:	f4 e6       	ldi	r31, 0x64	; 100
    3038:	cf 2e       	mov	r12, r31
    303a:	d1 2c       	mov	r13, r1
    303c:	e1 2c       	mov	r14, r1
    303e:	f1 2c       	mov	r15, r1
    3040:	f0 2d       	mov	r31, r0
    3042:	00 e0       	ldi	r16, 0x00	; 0
    3044:	21 e0       	ldi	r18, 0x01	; 1
    3046:	42 e0       	ldi	r20, 0x02	; 2
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    3052:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    3056:	0e 94 ef 03 	call	0x7de	; 0x7de <xEventGroupWaitBits>
    305a:	60 93 e1 19 	sts	0x19E1, r22	; 0x8019e1 <uxBits>
    305e:	70 93 e2 19 	sts	0x19E2, r23	; 0x8019e2 <uxBits+0x1>
    3062:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <uxBits+0x2>
    3066:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <uxBits+0x3>
		if ((uxBits & (TEMP_HUM_BIT)) == (TEMP_HUM_BIT))
    306a:	61 ff       	sbrs	r22, 1
    306c:	e3 cf       	rjmp	.-58     	; 0x3034 <temp_hum_task>
		{
			temphum_meassure(HtSensor);
    306e:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    3072:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    3076:	0e 94 b1 02 	call	0x562	; 0x562 <temphum_meassure>
			xEventGroupSetBits(eGroup, ASSEMBLE_BIT_2);
    307a:	48 e0       	ldi	r20, 0x08	; 8
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    3086:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    308a:	0e 94 cc 04 	call	0x998	; 0x998 <xEventGroupSetBits>
    308e:	d2 cf       	rjmp	.-92     	; 0x3034 <temp_hum_task>

00003090 <assemble_payload_task>:
}


	
void assemble_payload_task (void *pvParameters)
{
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	68 97       	sbiw	r28, 0x18	; 24
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();	
    30a4:	69 d8       	rcall	.-3886   	; 0x2178 <xTaskGetTickCount>
	for(;;)
	{
		lora_payload_t lora_payload;
		
		uxBits = xEventGroupWaitBits(eGroup, ASSEMBLE_BIT | ASSEMBLE_BIT_2, pdTRUE, pdTRUE, 100);
    30a6:	0f 2e       	mov	r0, r31
    30a8:	f4 e6       	ldi	r31, 0x64	; 100
    30aa:	cf 2e       	mov	r12, r31
    30ac:	d1 2c       	mov	r13, r1
    30ae:	e1 2c       	mov	r14, r1
    30b0:	f1 2c       	mov	r15, r1
    30b2:	f0 2d       	mov	r31, r0
    30b4:	01 e0       	ldi	r16, 0x01	; 1
    30b6:	21 e0       	ldi	r18, 0x01	; 1
    30b8:	4c e0       	ldi	r20, 0x0C	; 12
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    30c4:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    30c8:	0e 94 ef 03 	call	0x7de	; 0x7de <xEventGroupWaitBits>
    30cc:	60 93 e1 19 	sts	0x19E1, r22	; 0x8019e1 <uxBits>
    30d0:	70 93 e2 19 	sts	0x19E2, r23	; 0x8019e2 <uxBits+0x1>
    30d4:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <uxBits+0x2>
    30d8:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <uxBits+0x3>
		if ((uxBits & (ASSEMBLE_BIT | ASSEMBLE_BIT_2)) == (ASSEMBLE_BIT | ASSEMBLE_BIT_2))
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	8c 70       	andi	r24, 0x0C	; 12
    30e2:	99 27       	eor	r25, r25
    30e4:	aa 27       	eor	r26, r26
    30e6:	bb 27       	eor	r27, r27
    30e8:	0c 97       	sbiw	r24, 0x0c	; 12
    30ea:	a1 05       	cpc	r26, r1
    30ec:	b1 05       	cpc	r27, r1
    30ee:	d9 f6       	brne	.-74     	; 0x30a6 <assemble_payload_task+0x16>
		{
			//Set all variables inside SensorDataPackageHandler
			set_dph_temperature(package_handler, tempget_measurment(HtSensor));
    30f0:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    30f4:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    30f8:	0e 94 cf 02 	call	0x59e	; 0x59e <tempget_measurment>
    30fc:	ab 01       	movw	r20, r22
    30fe:	bc 01       	movw	r22, r24
    3100:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <package_handler>
    3104:	90 91 ea 19 	lds	r25, 0x19EA	; 0x8019ea <package_handler+0x1>
    3108:	0e 94 6f 03 	call	0x6de	; 0x6de <set_dph_temperature>
			set_dph_humidity(package_handler, humget_measurment(HtSensor));
    310c:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    3110:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    3114:	0e 94 c9 02 	call	0x592	; 0x592 <humget_measurment>
    3118:	ab 01       	movw	r20, r22
    311a:	bc 01       	movw	r22, r24
    311c:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <package_handler>
    3120:	90 91 ea 19 	lds	r25, 0x19EA	; 0x8019ea <package_handler+0x1>
    3124:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_dph_humidity>
			set_dph_co2(package_handler, co2get_measurment(co2sensor));
    3128:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <co2sensor>
    312c:	90 91 da 19 	lds	r25, 0x19DA	; 0x8019da <co2sensor+0x1>
    3130:	0e 94 83 02 	call	0x506	; 0x506 <co2get_measurment>
    3134:	bc 01       	movw	r22, r24
    3136:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <package_handler>
    313a:	90 91 ea 19 	lds	r25, 0x19EA	; 0x8019ea <package_handler+0x1>
    313e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <set_dph_co2>
			
			//Call SDBH method to assemble the lora payload
			lora_payload = assemble_payload(package_handler);
    3142:	60 91 e9 19 	lds	r22, 0x19E9	; 0x8019e9 <package_handler>
    3146:	70 91 ea 19 	lds	r23, 0x19EA	; 0x8019ea <package_handler+0x1>
    314a:	ce 01       	movw	r24, r28
    314c:	0d 96       	adiw	r24, 0x0d	; 13
    314e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <assemble_payload>
    3152:	8c e0       	ldi	r24, 0x0C	; 12
    3154:	fe 01       	movw	r30, r28
    3156:	3d 96       	adiw	r30, 0x0d	; 13
    3158:	de 01       	movw	r26, r28
    315a:	11 96       	adiw	r26, 0x01	; 1
    315c:	01 90       	ld	r0, Z+
    315e:	0d 92       	st	X+, r0
    3160:	8a 95       	dec	r24
    3162:	e1 f7       	brne	.-8      	; 0x315c <assemble_payload_task+0xcc>
			
			//send payload with message buffer
			xMessageBufferSend(uplink_buffer, (void*)lora_payload.bytes, sizeof(lora_payload.bytes), 100);
    3164:	04 e6       	ldi	r16, 0x64	; 100
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a e0       	ldi	r20, 0x0A	; 10
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	be 01       	movw	r22, r28
    3172:	6d 5f       	subi	r22, 0xFD	; 253
    3174:	7f 4f       	sbci	r23, 0xFF	; 255
    3176:	80 91 de 19 	lds	r24, 0x19DE	; 0x8019de <uplink_buffer>
    317a:	90 91 df 19 	lds	r25, 0x19DF	; 0x8019df <uplink_buffer+0x1>
    317e:	0e 94 cf 0c 	call	0x199e	; 0x199e <xStreamBufferSend>
			//signalize the servo that all resources are safe to use and it can work independently for 5 minutes
			xEventGroupSetBits(eGroup, SERVO_BIT);
    3182:	40 e2       	ldi	r20, 0x20	; 32
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    318e:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    3192:	0e 94 cc 04 	call	0x998	; 0x998 <xEventGroupSetBits>
			vTaskDelay(2000);
    3196:	60 ed       	ldi	r22, 0xD0	; 208
    3198:	77 e0       	ldi	r23, 0x07	; 7
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	4b d9       	rcall	.-3434   	; 0x2436 <vTaskDelay>
			//restart the cycle, signalize the servo task that the resources are no longer safe to use
			xEventGroupClearBits(eGroup, SERVO_BIT);
    31a0:	40 e2       	ldi	r20, 0x20	; 32
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	70 e0       	ldi	r23, 0x00	; 0
    31a8:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    31ac:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    31b0:	0e 94 af 04 	call	0x95e	; 0x95e <xEventGroupClearBits>
			vTaskDelay(500);
    31b4:	64 ef       	ldi	r22, 0xF4	; 244
    31b6:	71 e0       	ldi	r23, 0x01	; 1
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	3c d9       	rcall	.-3464   	; 0x2436 <vTaskDelay>
			xEventGroupSetBits(eGroup, CO2_BIT);
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    31ca:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    31ce:	0e 94 cc 04 	call	0x998	; 0x998 <xEventGroupSetBits>
		}
	}
    31d2:	69 cf       	rjmp	.-302    	; 0x30a6 <assemble_payload_task+0x16>

000031d4 <send_and_receive_task>:
	
	for(;;)
	{
		BaseType_t isEmpty;
		uint16_t received_temperature;
		isEmpty = xStreamBufferIsEmpty(uplink_buffer);
    31d4:	80 91 de 19 	lds	r24, 0x19DE	; 0x8019de <uplink_buffer>
    31d8:	90 91 df 19 	lds	r25, 0x19DF	; 0x8019df <uplink_buffer+0x1>
    31dc:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <xStreamBufferIsEmpty>
		if (isEmpty == pdFALSE)
    31e0:	81 11       	cpse	r24, r1
    31e2:	f8 cf       	rjmp	.-16     	; 0x31d4 <send_and_receive_task>
		{
			received_temperature = (configuration ,send_and_receive(uplink_buffer));
    31e4:	80 91 de 19 	lds	r24, 0x19DE	; 0x8019de <uplink_buffer>
    31e8:	90 91 df 19 	lds	r25, 0x19DF	; 0x8019df <uplink_buffer+0x1>
    31ec:	0e 94 12 03 	call	0x624	; 0x624 <send_and_receive>
    31f0:	ec 01       	movw	r28, r24
			xStreamBufferReset(uplink_buffer);
    31f2:	80 91 de 19 	lds	r24, 0x19DE	; 0x8019de <uplink_buffer>
    31f6:	90 91 df 19 	lds	r25, 0x19DF	; 0x8019df <uplink_buffer+0x1>
    31fa:	0e 94 90 0c 	call	0x1920	; 0x1920 <xStreamBufferReset>
			vTaskDelay(200);
    31fe:	68 ec       	ldi	r22, 0xC8	; 200
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	17 d9       	rcall	.-3538   	; 0x2436 <vTaskDelay>
			if(received_temperature > 0)
    3208:	20 97       	sbiw	r28, 0x00	; 0
    320a:	21 f3       	breq	.-56     	; 0x31d4 <send_and_receive_task>
			{
				set_max_temperature(configuration ,received_temperature);
    320c:	be 01       	movw	r22, r28
    320e:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <configuration>
    3212:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <configuration+0x1>
    3216:	0e 94 8e 02 	call	0x51c	; 0x51c <set_max_temperature>
    321a:	dc cf       	rjmp	.-72     	; 0x31d4 <send_and_receive_task>

0000321c <temperature_controll_task>:
void temperature_controll_task (void *pvParameters)
{
	
	for(;;)
	{
		uxBits = xEventGroupWaitBits(eGroup, SERVO_BIT, pdFALSE, pdFALSE, 100);
    321c:	0f 2e       	mov	r0, r31
    321e:	f4 e6       	ldi	r31, 0x64	; 100
    3220:	cf 2e       	mov	r12, r31
    3222:	d1 2c       	mov	r13, r1
    3224:	e1 2c       	mov	r14, r1
    3226:	f1 2c       	mov	r15, r1
    3228:	f0 2d       	mov	r31, r0
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    323a:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    323e:	0e 94 ef 03 	call	0x7de	; 0x7de <xEventGroupWaitBits>
    3242:	60 93 e1 19 	sts	0x19E1, r22	; 0x8019e1 <uxBits>
    3246:	70 93 e2 19 	sts	0x19E2, r23	; 0x8019e2 <uxBits+0x1>
    324a:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <uxBits+0x2>
    324e:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <uxBits+0x3>
		if ((uxBits & (SERVO_BIT)) == (SERVO_BIT))
    3252:	65 ff       	sbrs	r22, 5
    3254:	e3 cf       	rjmp	.-58     	; 0x321c <temperature_controll_task>
		{
			temphum_meassure(HtSensor);
    3256:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    325a:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    325e:	0e 94 b1 02 	call	0x562	; 0x562 <temphum_meassure>
			set_temperature_current(configuration, tempget_measurment(HtSensor));
    3262:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    3266:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    326a:	0e 94 cf 02 	call	0x59e	; 0x59e <tempget_measurment>
    326e:	db d0       	rcall	.+438    	; 0x3426 <__fixunssfsi>
    3270:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <configuration>
    3274:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <configuration+0x1>
    3278:	0e 94 92 02 	call	0x524	; 0x524 <set_temperature_current>
			operate_window(configuration);
    327c:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <configuration>
    3280:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <configuration+0x1>
    3284:	0e 94 96 02 	call	0x52c	; 0x52c <operate_window>
			vTaskDelay(1000);
    3288:	68 ee       	ldi	r22, 0xE8	; 232
    328a:	73 e0       	ldi	r23, 0x03	; 3
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	d2 d8       	rcall	.-3676   	; 0x2436 <vTaskDelay>
    3292:	c4 cf       	rjmp	.-120    	; 0x321c <temperature_controll_task>

00003294 <create_tasks>:
	
	
}

void create_tasks(void)
{
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16

	xTaskCreate(co2_task, (const portCHAR *)"Task1", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
    329a:	e1 2c       	mov	r14, r1
    329c:	f1 2c       	mov	r15, r1
    329e:	03 e0       	ldi	r16, 0x03	; 3
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 ec       	ldi	r20, 0xC0	; 192
    32a6:	50 e0       	ldi	r21, 0x00	; 0
    32a8:	6d e2       	ldi	r22, 0x2D	; 45
    32aa:	74 e0       	ldi	r23, 0x04	; 4
    32ac:	8f ee       	ldi	r24, 0xEF	; 239
    32ae:	97 e1       	ldi	r25, 0x17	; 23
    32b0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>

	xTaskCreate(temp_hum_task, (const portCHAR *)"Task2", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 ec       	ldi	r20, 0xC0	; 192
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	63 e3       	ldi	r22, 0x33	; 51
    32be:	74 e0       	ldi	r23, 0x04	; 4
    32c0:	8a e1       	ldi	r24, 0x1A	; 26
    32c2:	98 e1       	ldi	r25, 0x18	; 24
    32c4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
	
	xTaskCreate(set_up_lora_task, (const portCHAR *)"Task3", configMINIMAL_STACK_SIZE, NULL, 4, &xHandle );
    32c8:	0f 2e       	mov	r0, r31
    32ca:	f1 e8       	ldi	r31, 0x81	; 129
    32cc:	ef 2e       	mov	r14, r31
    32ce:	f8 e1       	ldi	r31, 0x18	; 24
    32d0:	ff 2e       	mov	r15, r31
    32d2:	f0 2d       	mov	r31, r0
    32d4:	04 e0       	ldi	r16, 0x04	; 4
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 ec       	ldi	r20, 0xC0	; 192
    32dc:	50 e0       	ldi	r21, 0x00	; 0
    32de:	69 e3       	ldi	r22, 0x39	; 57
    32e0:	74 e0       	ldi	r23, 0x04	; 4
    32e2:	8f eb       	ldi	r24, 0xBF	; 191
    32e4:	97 e1       	ldi	r25, 0x17	; 23
    32e6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
	
	xTaskCreate(assemble_payload_task, (const portCHAR *)"Task4", configMINIMAL_STACK_SIZE, NULL, 2, NULL );
    32ea:	e1 2c       	mov	r14, r1
    32ec:	f1 2c       	mov	r15, r1
    32ee:	02 e0       	ldi	r16, 0x02	; 2
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 ec       	ldi	r20, 0xC0	; 192
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	6f e3       	ldi	r22, 0x3F	; 63
    32fa:	74 e0       	ldi	r23, 0x04	; 4
    32fc:	88 e4       	ldi	r24, 0x48	; 72
    32fe:	98 e1       	ldi	r25, 0x18	; 24
    3300:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
	
	xTaskCreate(send_and_receive_task, (const portCHAR *)"Task5", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
    3304:	01 e0       	ldi	r16, 0x01	; 1
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 ec       	ldi	r20, 0xC0	; 192
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	65 e4       	ldi	r22, 0x45	; 69
    3310:	74 e0       	ldi	r23, 0x04	; 4
    3312:	8a ee       	ldi	r24, 0xEA	; 234
    3314:	98 e1       	ldi	r25, 0x18	; 24
    3316:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
	
	xTaskCreate(temperature_controll_task, (const portCHAR *)"Task5", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 ec       	ldi	r20, 0xC0	; 192
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	65 e4       	ldi	r22, 0x45	; 69
    3324:	74 e0       	ldi	r23, 0x04	; 4
    3326:	8e e0       	ldi	r24, 0x0E	; 14
    3328:	99 e1       	ldi	r25, 0x19	; 25
    332a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
	
}
    332e:	0f 91       	pop	r16
    3330:	ff 90       	pop	r15
    3332:	ef 90       	pop	r14
    3334:	08 95       	ret

00003336 <initialiseSystem>:


void initialiseSystem()
{
	//Creating ADT's responsible for holding data and communicating with sensors
	HtSensor = humptempsensor_create(); 
    3336:	0e 94 a5 02 	call	0x54a	; 0x54a <humptempsensor_create>
    333a:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <HtSensor+0x1>
    333e:	80 93 e5 19 	sts	0x19E5, r24	; 0x8019e5 <HtSensor>
	package_handler = SensorDataPackageHandler_create();
    3342:	0e 94 68 03 	call	0x6d0	; 0x6d0 <SensorDataPackageHandler_create>
    3346:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <package_handler+0x1>
    334a:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <package_handler>
	co2sensor = co2sensor_create();
    334e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <co2sensor_create>
    3352:	90 93 da 19 	sts	0x19DA, r25	; 0x8019da <co2sensor+0x1>
    3356:	80 93 d9 19 	sts	0x19D9, r24	; 0x8019d9 <co2sensor>
	configuration = configuration_create();
    335a:	0e 94 87 02 	call	0x50e	; 0x50e <configuration_create>
    335e:	90 93 dc 19 	sts	0x19DC, r25	; 0x8019dc <configuration+0x1>
    3362:	80 93 db 19 	sts	0x19DB, r24	; 0x8019db <configuration>


	
	//Initializing all drivers, initialization returns a code
	rc = inithtdrivers(HtSensor);
    3366:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <HtSensor>
    336a:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <HtSensor+0x1>
    336e:	0e 94 ac 02 	call	0x558	; 0x558 <inithtdrivers>
    3372:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <rc>
	if(rc != HIH8120_OK)
    3376:	88 23       	and	r24, r24
    3378:	21 f0       	breq	.+8      	; 0x3382 <initialiseSystem+0x4c>
	{
		puts("humidity and temperature driver was not initialized, all sent data will be equivalent to 0");
    337a:	8b e4       	ldi	r24, 0x4B	; 75
    337c:	94 e0       	ldi	r25, 0x04	; 4
    337e:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
	}
	initservodriver();
    3382:	0e 94 b9 03 	call	0x772	; 0x772 <initservodriver>
	if(mc != MHZ19_OK)
    3386:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <mc>
    338a:	88 23       	and	r24, r24
    338c:	21 f0       	breq	.+8      	; 0x3396 <initialiseSystem+0x60>
	{
		puts("servo driver was not initialized, can not operate window");
    338e:	86 ea       	ldi	r24, 0xA6	; 166
    3390:	94 e0       	ldi	r25, 0x04	; 4
    3392:	0e 94 aa 2a 	call	0x5554	; 0x5554 <puts>
	}
	trace_init();
    3396:	0e 94 c6 03 	call	0x78c	; 0x78c <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdioCreate(ser_USART0);
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <stdioCreate>
	hal_create(5);
    33a0:	85 e0       	ldi	r24, 0x05	; 5
    33a2:	1c d1       	rcall	.+568    	; 0x35dc <hal_create>
	lora_driver_create(LORA_USART, NULL);
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	81 e0       	ldi	r24, 0x01	; 1

	
	
	create_tasks();
    33aa:	25 d4       	rcall	.+2122   	; 0x3bf6 <lora_driver_create>
    33ac:	73 df       	rcall	.-282    	; 0x3294 <create_tasks>
	
	//Creates FreeRTOS event groups, it it cant be created the program shut downs as it cannot operate without it
	eGroup = xEventGroupCreate();
    33ae:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <xEventGroupCreate>
    33b2:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <eGroup+0x1>
    33b6:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <eGroup>
	if (eGroup == NULL) {
    33ba:	89 2b       	or	r24, r25
    33bc:	51 f4       	brne	.+20     	; 0x33d2 <initialiseSystem+0x9c>
		printf("Event Group can not be created.\n, program shutdown");
    33be:	8f ed       	ldi	r24, 0xDF	; 223
    33c0:	94 e0       	ldi	r25, 0x04	; 4
    33c2:	9f 93       	push	r25
    33c4:	8f 93       	push	r24
    33c6:	0e 94 97 2a 	call	0x552e	; 0x552e <printf>
		exit(0);
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <_exit>
	}
	
	//Creating message buffer that will transmit payload to LoRaWaN task, program cannot operate without it
	const size_t xMessageBufferSizeBytes = 255;
	uplink_buffer = xMessageBufferCreate(xMessageBufferSizeBytes);
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	8f ef       	ldi	r24, 0xFF	; 255
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xStreamBufferGenericCreate>
    33e0:	90 93 df 19 	sts	0x19DF, r25	; 0x8019df <uplink_buffer+0x1>
    33e4:	80 93 de 19 	sts	0x19DE, r24	; 0x8019de <uplink_buffer>
	if (eGroup == NULL) {
    33e8:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <eGroup>
    33ec:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <eGroup+0x1>
    33f0:	89 2b       	or	r24, r25
    33f2:	51 f4       	brne	.+20     	; 0x3408 <initialiseSystem+0xd2>
		printf("Message buffer can not be created.\n, program shutdown");
    33f4:	82 e1       	ldi	r24, 0x12	; 18
    33f6:	95 e0       	ldi	r25, 0x05	; 5
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	0e 94 97 2a 	call	0x552e	; 0x552e <printf>
		exit(0);
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <_exit>
    3408:	08 95       	ret

0000340a <main>:



int main(void)
{
	initialiseSystem();
    340a:	95 df       	rcall	.-214    	; 0x3336 <initialiseSystem>
	printf("STARTED\n ");
    340c:	88 e4       	ldi	r24, 0x48	; 72
    340e:	95 e0       	ldi	r25, 0x05	; 5
    3410:	9f 93       	push	r25
    3412:	8f 93       	push	r24
    3414:	0e 94 97 2a 	call	0x552e	; 0x552e <printf>
	vTaskStartScheduler();
    3418:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <vTaskStartScheduler>
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
	
}
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	08 95       	ret

00003426 <__fixunssfsi>:
    3426:	70 d0       	rcall	.+224    	; 0x3508 <__fp_splitA>
    3428:	88 f0       	brcs	.+34     	; 0x344c <__fixunssfsi+0x26>
    342a:	9f 57       	subi	r25, 0x7F	; 127
    342c:	90 f0       	brcs	.+36     	; 0x3452 <__fixunssfsi+0x2c>
    342e:	b9 2f       	mov	r27, r25
    3430:	99 27       	eor	r25, r25
    3432:	b7 51       	subi	r27, 0x17	; 23
    3434:	a0 f0       	brcs	.+40     	; 0x345e <__fixunssfsi+0x38>
    3436:	d1 f0       	breq	.+52     	; 0x346c <__fixunssfsi+0x46>
    3438:	66 0f       	add	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	88 1f       	adc	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	1a f0       	brmi	.+6      	; 0x3448 <__fixunssfsi+0x22>
    3442:	ba 95       	dec	r27
    3444:	c9 f7       	brne	.-14     	; 0x3438 <__fixunssfsi+0x12>
    3446:	12 c0       	rjmp	.+36     	; 0x346c <__fixunssfsi+0x46>
    3448:	b1 30       	cpi	r27, 0x01	; 1
    344a:	81 f0       	breq	.+32     	; 0x346c <__fixunssfsi+0x46>
    344c:	77 d0       	rcall	.+238    	; 0x353c <__fp_zero>
    344e:	b1 e0       	ldi	r27, 0x01	; 1
    3450:	08 95       	ret
    3452:	74 c0       	rjmp	.+232    	; 0x353c <__fp_zero>
    3454:	67 2f       	mov	r22, r23
    3456:	78 2f       	mov	r23, r24
    3458:	88 27       	eor	r24, r24
    345a:	b8 5f       	subi	r27, 0xF8	; 248
    345c:	39 f0       	breq	.+14     	; 0x346c <__fixunssfsi+0x46>
    345e:	b9 3f       	cpi	r27, 0xF9	; 249
    3460:	cc f3       	brlt	.-14     	; 0x3454 <__fixunssfsi+0x2e>
    3462:	86 95       	lsr	r24
    3464:	77 95       	ror	r23
    3466:	67 95       	ror	r22
    3468:	b3 95       	inc	r27
    346a:	d9 f7       	brne	.-10     	; 0x3462 <__fixunssfsi+0x3c>
    346c:	3e f4       	brtc	.+14     	; 0x347c <__fixunssfsi+0x56>
    346e:	90 95       	com	r25
    3470:	80 95       	com	r24
    3472:	70 95       	com	r23
    3474:	61 95       	neg	r22
    3476:	7f 4f       	sbci	r23, 0xFF	; 255
    3478:	8f 4f       	sbci	r24, 0xFF	; 255
    347a:	9f 4f       	sbci	r25, 0xFF	; 255
    347c:	08 95       	ret

0000347e <__floatunsisf>:
    347e:	e8 94       	clt
    3480:	09 c0       	rjmp	.+18     	; 0x3494 <__floatsisf+0x12>

00003482 <__floatsisf>:
    3482:	97 fb       	bst	r25, 7
    3484:	3e f4       	brtc	.+14     	; 0x3494 <__floatsisf+0x12>
    3486:	90 95       	com	r25
    3488:	80 95       	com	r24
    348a:	70 95       	com	r23
    348c:	61 95       	neg	r22
    348e:	7f 4f       	sbci	r23, 0xFF	; 255
    3490:	8f 4f       	sbci	r24, 0xFF	; 255
    3492:	9f 4f       	sbci	r25, 0xFF	; 255
    3494:	99 23       	and	r25, r25
    3496:	a9 f0       	breq	.+42     	; 0x34c2 <__floatsisf+0x40>
    3498:	f9 2f       	mov	r31, r25
    349a:	96 e9       	ldi	r25, 0x96	; 150
    349c:	bb 27       	eor	r27, r27
    349e:	93 95       	inc	r25
    34a0:	f6 95       	lsr	r31
    34a2:	87 95       	ror	r24
    34a4:	77 95       	ror	r23
    34a6:	67 95       	ror	r22
    34a8:	b7 95       	ror	r27
    34aa:	f1 11       	cpse	r31, r1
    34ac:	f8 cf       	rjmp	.-16     	; 0x349e <__floatsisf+0x1c>
    34ae:	fa f4       	brpl	.+62     	; 0x34ee <__floatsisf+0x6c>
    34b0:	bb 0f       	add	r27, r27
    34b2:	11 f4       	brne	.+4      	; 0x34b8 <__floatsisf+0x36>
    34b4:	60 ff       	sbrs	r22, 0
    34b6:	1b c0       	rjmp	.+54     	; 0x34ee <__floatsisf+0x6c>
    34b8:	6f 5f       	subi	r22, 0xFF	; 255
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8f 4f       	sbci	r24, 0xFF	; 255
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	16 c0       	rjmp	.+44     	; 0x34ee <__floatsisf+0x6c>
    34c2:	88 23       	and	r24, r24
    34c4:	11 f0       	breq	.+4      	; 0x34ca <__floatsisf+0x48>
    34c6:	96 e9       	ldi	r25, 0x96	; 150
    34c8:	11 c0       	rjmp	.+34     	; 0x34ec <__floatsisf+0x6a>
    34ca:	77 23       	and	r23, r23
    34cc:	21 f0       	breq	.+8      	; 0x34d6 <__floatsisf+0x54>
    34ce:	9e e8       	ldi	r25, 0x8E	; 142
    34d0:	87 2f       	mov	r24, r23
    34d2:	76 2f       	mov	r23, r22
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <__floatsisf+0x5e>
    34d6:	66 23       	and	r22, r22
    34d8:	71 f0       	breq	.+28     	; 0x34f6 <__floatsisf+0x74>
    34da:	96 e8       	ldi	r25, 0x86	; 134
    34dc:	86 2f       	mov	r24, r22
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	2a f0       	brmi	.+10     	; 0x34ee <__floatsisf+0x6c>
    34e4:	9a 95       	dec	r25
    34e6:	66 0f       	add	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	88 1f       	adc	r24, r24
    34ec:	da f7       	brpl	.-10     	; 0x34e4 <__floatsisf+0x62>
    34ee:	88 0f       	add	r24, r24
    34f0:	96 95       	lsr	r25
    34f2:	87 95       	ror	r24
    34f4:	97 f9       	bld	r25, 7
    34f6:	08 95       	ret

000034f8 <__fp_split3>:
    34f8:	57 fd       	sbrc	r21, 7
    34fa:	90 58       	subi	r25, 0x80	; 128
    34fc:	44 0f       	add	r20, r20
    34fe:	55 1f       	adc	r21, r21
    3500:	59 f0       	breq	.+22     	; 0x3518 <__fp_splitA+0x10>
    3502:	5f 3f       	cpi	r21, 0xFF	; 255
    3504:	71 f0       	breq	.+28     	; 0x3522 <__fp_splitA+0x1a>
    3506:	47 95       	ror	r20

00003508 <__fp_splitA>:
    3508:	88 0f       	add	r24, r24
    350a:	97 fb       	bst	r25, 7
    350c:	99 1f       	adc	r25, r25
    350e:	61 f0       	breq	.+24     	; 0x3528 <__fp_splitA+0x20>
    3510:	9f 3f       	cpi	r25, 0xFF	; 255
    3512:	79 f0       	breq	.+30     	; 0x3532 <__fp_splitA+0x2a>
    3514:	87 95       	ror	r24
    3516:	08 95       	ret
    3518:	12 16       	cp	r1, r18
    351a:	13 06       	cpc	r1, r19
    351c:	14 06       	cpc	r1, r20
    351e:	55 1f       	adc	r21, r21
    3520:	f2 cf       	rjmp	.-28     	; 0x3506 <__fp_split3+0xe>
    3522:	46 95       	lsr	r20
    3524:	f1 df       	rcall	.-30     	; 0x3508 <__fp_splitA>
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <__fp_splitA+0x30>
    3528:	16 16       	cp	r1, r22
    352a:	17 06       	cpc	r1, r23
    352c:	18 06       	cpc	r1, r24
    352e:	99 1f       	adc	r25, r25
    3530:	f1 cf       	rjmp	.-30     	; 0x3514 <__fp_splitA+0xc>
    3532:	86 95       	lsr	r24
    3534:	71 05       	cpc	r23, r1
    3536:	61 05       	cpc	r22, r1
    3538:	08 94       	sec
    353a:	08 95       	ret

0000353c <__fp_zero>:
    353c:	e8 94       	clt

0000353e <__fp_szero>:
    353e:	bb 27       	eor	r27, r27
    3540:	66 27       	eor	r22, r22
    3542:	77 27       	eor	r23, r23
    3544:	cb 01       	movw	r24, r22
    3546:	97 f9       	bld	r25, 7
    3548:	08 95       	ret

0000354a <round>:
    354a:	de df       	rcall	.-68     	; 0x3508 <__fp_splitA>
    354c:	e0 f0       	brcs	.+56     	; 0x3586 <round+0x3c>
    354e:	9e 37       	cpi	r25, 0x7E	; 126
    3550:	d8 f0       	brcs	.+54     	; 0x3588 <round+0x3e>
    3552:	96 39       	cpi	r25, 0x96	; 150
    3554:	b8 f4       	brcc	.+46     	; 0x3584 <round+0x3a>
    3556:	9e 38       	cpi	r25, 0x8E	; 142
    3558:	48 f4       	brcc	.+18     	; 0x356c <round+0x22>
    355a:	67 2f       	mov	r22, r23
    355c:	78 2f       	mov	r23, r24
    355e:	88 27       	eor	r24, r24
    3560:	98 5f       	subi	r25, 0xF8	; 248
    3562:	f9 cf       	rjmp	.-14     	; 0x3556 <round+0xc>
    3564:	86 95       	lsr	r24
    3566:	77 95       	ror	r23
    3568:	67 95       	ror	r22
    356a:	93 95       	inc	r25
    356c:	95 39       	cpi	r25, 0x95	; 149
    356e:	d0 f3       	brcs	.-12     	; 0x3564 <round+0x1a>
    3570:	b6 2f       	mov	r27, r22
    3572:	b1 70       	andi	r27, 0x01	; 1
    3574:	6b 0f       	add	r22, r27
    3576:	71 1d       	adc	r23, r1
    3578:	81 1d       	adc	r24, r1
    357a:	20 f4       	brcc	.+8      	; 0x3584 <round+0x3a>
    357c:	87 95       	ror	r24
    357e:	77 95       	ror	r23
    3580:	67 95       	ror	r22
    3582:	93 95       	inc	r25
    3584:	02 c0       	rjmp	.+4      	; 0x358a <__fp_mintl>
    3586:	1c c0       	rjmp	.+56     	; 0x35c0 <__fp_mpack>
    3588:	da cf       	rjmp	.-76     	; 0x353e <__fp_szero>

0000358a <__fp_mintl>:
    358a:	88 23       	and	r24, r24
    358c:	71 f4       	brne	.+28     	; 0x35aa <__fp_mintl+0x20>
    358e:	77 23       	and	r23, r23
    3590:	21 f0       	breq	.+8      	; 0x359a <__fp_mintl+0x10>
    3592:	98 50       	subi	r25, 0x08	; 8
    3594:	87 2b       	or	r24, r23
    3596:	76 2f       	mov	r23, r22
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <__fp_mintl+0x1e>
    359a:	66 23       	and	r22, r22
    359c:	11 f4       	brne	.+4      	; 0x35a2 <__fp_mintl+0x18>
    359e:	99 27       	eor	r25, r25
    35a0:	0d c0       	rjmp	.+26     	; 0x35bc <__fp_mintl+0x32>
    35a2:	90 51       	subi	r25, 0x10	; 16
    35a4:	86 2b       	or	r24, r22
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	2a f0       	brmi	.+10     	; 0x35b6 <__fp_mintl+0x2c>
    35ac:	9a 95       	dec	r25
    35ae:	66 0f       	add	r22, r22
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 1f       	adc	r24, r24
    35b4:	da f7       	brpl	.-10     	; 0x35ac <__fp_mintl+0x22>
    35b6:	88 0f       	add	r24, r24
    35b8:	96 95       	lsr	r25
    35ba:	87 95       	ror	r24
    35bc:	97 f9       	bld	r25, 7
    35be:	08 95       	ret

000035c0 <__fp_mpack>:
    35c0:	9f 3f       	cpi	r25, 0xFF	; 255
    35c2:	31 f0       	breq	.+12     	; 0x35d0 <__fp_mpack_finite+0xc>

000035c4 <__fp_mpack_finite>:
    35c4:	91 50       	subi	r25, 0x01	; 1
    35c6:	20 f4       	brcc	.+8      	; 0x35d0 <__fp_mpack_finite+0xc>
    35c8:	87 95       	ror	r24
    35ca:	77 95       	ror	r23
    35cc:	67 95       	ror	r22
    35ce:	b7 95       	ror	r27
    35d0:	88 0f       	add	r24, r24
    35d2:	91 1d       	adc	r25, r1
    35d4:	96 95       	lsr	r25
    35d6:	87 95       	ror	r24
    35d8:	97 f9       	bld	r25, 7
    35da:	08 95       	ret

000035dc <hal_create>:
    35dc:	eb ee       	ldi	r30, 0xEB	; 235
    35de:	f9 e1       	ldi	r31, 0x19	; 25
    35e0:	2c e2       	ldi	r18, 0x2C	; 44
    35e2:	31 e2       	ldi	r19, 0x21	; 33
    35e4:	31 83       	std	Z+1, r19	; 0x01
    35e6:	20 83       	st	Z, r18
    35e8:	2f e2       	ldi	r18, 0x2F	; 47
    35ea:	31 e2       	ldi	r19, 0x21	; 33
    35ec:	33 83       	std	Z+3, r19	; 0x03
    35ee:	22 83       	std	Z+2, r18	; 0x02
    35f0:	2a e3       	ldi	r18, 0x3A	; 58
    35f2:	31 e2       	ldi	r19, 0x21	; 33
    35f4:	35 83       	std	Z+5, r19	; 0x05
    35f6:	24 83       	std	Z+4, r18	; 0x04
    35f8:	2e e3       	ldi	r18, 0x3E	; 62
    35fa:	31 e2       	ldi	r19, 0x21	; 33
    35fc:	37 83       	std	Z+7, r19	; 0x07
    35fe:	26 83       	std	Z+6, r18	; 0x06
    3600:	24 e4       	ldi	r18, 0x44	; 68
    3602:	31 e2       	ldi	r19, 0x21	; 33
    3604:	31 87       	std	Z+9, r19	; 0x09
    3606:	20 87       	std	Z+8, r18	; 0x08
    3608:	20 e5       	ldi	r18, 0x50	; 80
    360a:	31 e2       	ldi	r19, 0x21	; 33
    360c:	33 87       	std	Z+11, r19	; 0x0b
    360e:	22 87       	std	Z+10, r18	; 0x0a
    3610:	25 e5       	ldi	r18, 0x55	; 85
    3612:	31 e2       	ldi	r19, 0x21	; 33
    3614:	35 87       	std	Z+13, r19	; 0x0d
    3616:	24 87       	std	Z+12, r18	; 0x0c
    3618:	21 e6       	ldi	r18, 0x61	; 97
    361a:	31 e2       	ldi	r19, 0x21	; 33
    361c:	37 87       	std	Z+15, r19	; 0x0f
    361e:	26 87       	std	Z+14, r18	; 0x0e
    3620:	21 e4       	ldi	r18, 0x41	; 65
    3622:	31 e2       	ldi	r19, 0x21	; 33
    3624:	31 8b       	std	Z+17, r19	; 0x11
    3626:	20 8b       	std	Z+16, r18	; 0x10
    3628:	26 e6       	ldi	r18, 0x66	; 102
    362a:	31 e2       	ldi	r19, 0x21	; 33
    362c:	33 8b       	std	Z+19, r19	; 0x13
    362e:	22 8b       	std	Z+18, r18	; 0x12
    3630:	23 e7       	ldi	r18, 0x73	; 115
    3632:	31 e2       	ldi	r19, 0x21	; 33
    3634:	35 8b       	std	Z+21, r19	; 0x15
    3636:	24 8b       	std	Z+20, r18	; 0x14
    3638:	68 2f       	mov	r22, r24
    363a:	cf 01       	movw	r24, r30
    363c:	38 c1       	rjmp	.+624    	; 0x38ae <led_create>
    363e:	08 95       	ret

00003640 <_hihTwiCallback>:
    3640:	65 30       	cpi	r22, 0x05	; 5
    3642:	f1 f4       	brne	.+60     	; 0x3680 <_hihTwiCallback+0x40>
    3644:	fa 01       	movw	r30, r20
    3646:	80 81       	ld	r24, Z
    3648:	8f 73       	andi	r24, 0x3F	; 63
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	98 2f       	mov	r25, r24
    364e:	88 27       	eor	r24, r24
    3650:	21 81       	ldd	r18, Z+1	; 0x01
    3652:	82 2b       	or	r24, r18
    3654:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3658:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	f0 e4       	ldi	r31, 0x40	; 64
    3660:	8f 9f       	mul	r24, r31
    3662:	c0 01       	movw	r24, r0
    3664:	11 24       	eor	r1, r1
    3666:	fa 01       	movw	r30, r20
    3668:	23 81       	ldd	r18, Z+3	; 0x03
    366a:	26 95       	lsr	r18
    366c:	26 95       	lsr	r18
    366e:	82 2b       	or	r24, r18
    3670:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    3674:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	80 93 83 18 	sts	0x1883, r24	; 0x801883 <_measuringIsReady>
    367e:	08 95       	ret
    3680:	64 30       	cpi	r22, 0x04	; 4
    3682:	51 f0       	breq	.+20     	; 0x3698 <_hihTwiCallback+0x58>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e4       	ldi	r25, 0x40	; 64
    3688:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    368c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    3690:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    3694:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    3698:	08 95       	ret

0000369a <hih8120Create>:
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	00 e2       	ldi	r16, 0x20	; 32
    36a0:	1b e1       	ldi	r17, 0x1B	; 27
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	34 e2       	ldi	r19, 0x24	; 36
    36a6:	44 ef       	ldi	r20, 0xF4	; 244
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	60 e0       	ldi	r22, 0x00	; 0
    36ac:	87 e2       	ldi	r24, 0x27	; 39
    36ae:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <twiCreate>
    36b2:	90 93 85 18 	sts	0x1885, r25	; 0x801885 <_hih8120Handler+0x1>
    36b6:	80 93 84 18 	sts	0x1884, r24	; 0x801884 <_hih8120Handler>
    36ba:	21 e0       	ldi	r18, 0x01	; 1
    36bc:	89 2b       	or	r24, r25
    36be:	09 f0       	breq	.+2      	; 0x36c2 <hih8120Create+0x28>
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	82 2f       	mov	r24, r18
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	08 95       	ret

000036ca <hih8120Wakeup>:
    36ca:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <_hih8120Handler>
    36ce:	90 91 85 18 	lds	r25, 0x1885	; 0x801885 <_hih8120Handler+0x1>
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	59 f0       	breq	.+22     	; 0x36ec <hih8120Wakeup+0x22>
    36d6:	40 e0       	ldi	r20, 0x00	; 0
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <twiTransmit>
    36e0:	84 30       	cpi	r24, 0x04	; 4
    36e2:	31 f4       	brne	.+12     	; 0x36f0 <hih8120Wakeup+0x26>
    36e4:	10 92 83 18 	sts	0x1883, r1	; 0x801883 <_measuringIsReady>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	08 95       	ret
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	08 95       	ret
    36f0:	83 e0       	ldi	r24, 0x03	; 3
    36f2:	08 95       	ret

000036f4 <hih8120Meassure>:
    36f4:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <_hih8120Handler>
    36f8:	90 91 85 18 	lds	r25, 0x1885	; 0x801885 <_hih8120Handler+0x1>
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	39 f0       	breq	.+14     	; 0x370e <hih8120Meassure+0x1a>
    3700:	64 e0       	ldi	r22, 0x04	; 4
    3702:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <twiReceive>
    3706:	85 30       	cpi	r24, 0x05	; 5
    3708:	21 f0       	breq	.+8      	; 0x3712 <hih8120Meassure+0x1e>
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	08 95       	ret
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	08 95       	ret
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	08 95       	ret

00003716 <hih8120GetHumidity>:
    3716:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    371a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	ad de       	rcall	.-678    	; 0x347e <__floatunsisf>
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	48 ec       	ldi	r20, 0xC8	; 200
    372a:	52 e4       	ldi	r21, 0x42	; 66
    372c:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__mulsf3>
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	38 ef       	ldi	r19, 0xF8	; 248
    3734:	4f e7       	ldi	r20, 0x7F	; 127
    3736:	56 e4       	ldi	r21, 0x46	; 70
    3738:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__divsf3>
    373c:	08 95       	ret

0000373e <hih8120GetTemperature>:
    373e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    3742:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	99 de       	rcall	.-718    	; 0x347e <__floatunsisf>
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	45 e2       	ldi	r20, 0x25	; 37
    3752:	53 e4       	ldi	r21, 0x43	; 67
    3754:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__mulsf3>
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	38 ef       	ldi	r19, 0xF8	; 248
    375c:	4f e7       	ldi	r20, 0x7F	; 127
    375e:	56 e4       	ldi	r21, 0x46	; 70
    3760:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__divsf3>
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	52 e4       	ldi	r21, 0x42	; 66
    376c:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__subsf3>
    3770:	08 95       	ret

00003772 <_turn_off>:
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	fc 01       	movw	r30, r24
    377a:	ee 0f       	add	r30, r30
    377c:	ff 1f       	adc	r31, r31
    377e:	e8 0f       	add	r30, r24
    3780:	f9 1f       	adc	r31, r25
    3782:	ee 0f       	add	r30, r30
    3784:	ff 1f       	adc	r31, r31
    3786:	ea 57       	subi	r30, 0x7A	; 122
    3788:	f7 4e       	sbci	r31, 0xE7	; 231
    378a:	23 81       	ldd	r18, Z+3	; 0x03
    378c:	21 11       	cpse	r18, r1
    378e:	0a c0       	rjmp	.+20     	; 0x37a4 <_turn_off+0x32>
    3790:	ef 01       	movw	r28, r30
    3792:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <register_access+0x8>
    3796:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <register_access+0x9>
    379a:	6a 81       	ldd	r22, Y+2	; 0x02
    379c:	88 81       	ld	r24, Y
    379e:	99 81       	ldd	r25, Y+1	; 0x01
    37a0:	19 95       	eicall
    37a2:	12 c0       	rjmp	.+36     	; 0x37c8 <_turn_off+0x56>
    37a4:	dc 01       	movw	r26, r24
    37a6:	aa 0f       	add	r26, r26
    37a8:	bb 1f       	adc	r27, r27
    37aa:	ed 01       	movw	r28, r26
    37ac:	c8 0f       	add	r28, r24
    37ae:	d9 1f       	adc	r29, r25
    37b0:	cc 0f       	add	r28, r28
    37b2:	dd 1f       	adc	r29, r29
    37b4:	ca 57       	subi	r28, 0x7A	; 122
    37b6:	d7 4e       	sbci	r29, 0xE7	; 231
    37b8:	e0 91 fd 19 	lds	r30, 0x19FD	; 0x8019fd <register_access+0x12>
    37bc:	f0 91 fe 19 	lds	r31, 0x19FE	; 0x8019fe <register_access+0x13>
    37c0:	6a 81       	ldd	r22, Y+2	; 0x02
    37c2:	88 81       	ld	r24, Y
    37c4:	99 81       	ldd	r25, Y+1	; 0x01
    37c6:	19 95       	eicall
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	08 95       	ret

000037ce <_turn_on>:
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	fc 01       	movw	r30, r24
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	e8 0f       	add	r30, r24
    37dc:	f9 1f       	adc	r31, r25
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	ea 57       	subi	r30, 0x7A	; 122
    37e4:	f7 4e       	sbci	r31, 0xE7	; 231
    37e6:	23 81       	ldd	r18, Z+3	; 0x03
    37e8:	21 11       	cpse	r18, r1
    37ea:	0a c0       	rjmp	.+20     	; 0x3800 <_turn_on+0x32>
    37ec:	ef 01       	movw	r28, r30
    37ee:	e0 91 fd 19 	lds	r30, 0x19FD	; 0x8019fd <register_access+0x12>
    37f2:	f0 91 fe 19 	lds	r31, 0x19FE	; 0x8019fe <register_access+0x13>
    37f6:	6a 81       	ldd	r22, Y+2	; 0x02
    37f8:	88 81       	ld	r24, Y
    37fa:	99 81       	ldd	r25, Y+1	; 0x01
    37fc:	19 95       	eicall
    37fe:	12 c0       	rjmp	.+36     	; 0x3824 <_turn_on+0x56>
    3800:	dc 01       	movw	r26, r24
    3802:	aa 0f       	add	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	ed 01       	movw	r28, r26
    3808:	c8 0f       	add	r28, r24
    380a:	d9 1f       	adc	r29, r25
    380c:	cc 0f       	add	r28, r28
    380e:	dd 1f       	adc	r29, r29
    3810:	ca 57       	subi	r28, 0x7A	; 122
    3812:	d7 4e       	sbci	r29, 0xE7	; 231
    3814:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <register_access+0x8>
    3818:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <register_access+0x9>
    381c:	6a 81       	ldd	r22, Y+2	; 0x02
    381e:	88 81       	ld	r24, Y
    3820:	99 81       	ldd	r25, Y+1	; 0x01
    3822:	19 95       	eicall
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <_hal_led_task>:
    382a:	0f 2e       	mov	r0, r31
    382c:	fb ee       	ldi	r31, 0xEB	; 235
    382e:	cf 2e       	mov	r12, r31
    3830:	f9 e1       	ldi	r31, 0x19	; 25
    3832:	df 2e       	mov	r13, r31
    3834:	f0 2d       	mov	r31, r0
    3836:	04 e0       	ldi	r16, 0x04	; 4
    3838:	c6 e8       	ldi	r28, 0x86	; 134
    383a:	d8 e1       	ldi	r29, 0x18	; 24
    383c:	10 e0       	ldi	r17, 0x00	; 0
    383e:	8c 81       	ldd	r24, Y+4	; 0x04
    3840:	81 30       	cpi	r24, 0x01	; 1
    3842:	69 f0       	breq	.+26     	; 0x385e <_hal_led_task+0x34>
    3844:	e8 f0       	brcs	.+58     	; 0x3880 <_hal_led_task+0x56>
    3846:	82 30       	cpi	r24, 0x02	; 2
    3848:	39 f5       	brne	.+78     	; 0x3898 <_hal_led_task+0x6e>
    384a:	d6 01       	movw	r26, r12
    384c:	1c 96       	adiw	r26, 0x0c	; 12
    384e:	ed 91       	ld	r30, X+
    3850:	fc 91       	ld	r31, X
    3852:	1d 97       	sbiw	r26, 0x0d	; 13
    3854:	6a 81       	ldd	r22, Y+2	; 0x02
    3856:	88 81       	ld	r24, Y
    3858:	99 81       	ldd	r25, Y+1	; 0x01
    385a:	19 95       	eicall
    385c:	1d c0       	rjmp	.+58     	; 0x3898 <_hal_led_task+0x6e>
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	8f 5f       	subi	r24, 0xFF	; 255
    3862:	8a 30       	cpi	r24, 0x0A	; 10
    3864:	10 f4       	brcc	.+4      	; 0x386a <_hal_led_task+0x40>
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	17 c0       	rjmp	.+46     	; 0x3898 <_hal_led_task+0x6e>
    386a:	1d 82       	std	Y+5, r1	; 0x05
    386c:	d6 01       	movw	r26, r12
    386e:	1c 96       	adiw	r26, 0x0c	; 12
    3870:	ed 91       	ld	r30, X+
    3872:	fc 91       	ld	r31, X
    3874:	1d 97       	sbiw	r26, 0x0d	; 13
    3876:	6a 81       	ldd	r22, Y+2	; 0x02
    3878:	88 81       	ld	r24, Y
    387a:	99 81       	ldd	r25, Y+1	; 0x01
    387c:	19 95       	eicall
    387e:	0c c0       	rjmp	.+24     	; 0x3898 <_hal_led_task+0x6e>
    3880:	8d 81       	ldd	r24, Y+5	; 0x05
    3882:	88 23       	and	r24, r24
    3884:	31 f0       	breq	.+12     	; 0x3892 <_hal_led_task+0x68>
    3886:	81 2f       	mov	r24, r17
    3888:	a2 df       	rcall	.-188    	; 0x37ce <_turn_on>
    388a:	8d 81       	ldd	r24, Y+5	; 0x05
    388c:	81 50       	subi	r24, 0x01	; 1
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	03 c0       	rjmp	.+6      	; 0x3898 <_hal_led_task+0x6e>
    3892:	0c 83       	std	Y+4, r16	; 0x04
    3894:	81 2f       	mov	r24, r17
    3896:	6d df       	rcall	.-294    	; 0x3772 <_turn_off>
    3898:	1f 5f       	subi	r17, 0xFF	; 255
    389a:	26 96       	adiw	r28, 0x06	; 6
    389c:	14 30       	cpi	r17, 0x04	; 4
    389e:	79 f6       	brne	.-98     	; 0x383e <_hal_led_task+0x14>
    38a0:	65 e0       	ldi	r22, 0x05	; 5
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 1b 12 	call	0x2436	; 0x2436 <vTaskDelay>
    38ac:	c5 cf       	rjmp	.-118    	; 0x3838 <_hal_led_task+0xe>

000038ae <led_create>:
    38ae:	cf 92       	push	r12
    38b0:	df 92       	push	r13
    38b2:	ef 92       	push	r14
    38b4:	ff 92       	push	r15
    38b6:	0f 93       	push	r16
    38b8:	1f 93       	push	r17
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	06 2f       	mov	r16, r22
    38c0:	0f 2e       	mov	r0, r31
    38c2:	fb ee       	ldi	r31, 0xEB	; 235
    38c4:	ef 2e       	mov	r14, r31
    38c6:	f9 e1       	ldi	r31, 0x19	; 25
    38c8:	ff 2e       	mov	r15, r31
    38ca:	f0 2d       	mov	r31, r0
    38cc:	d7 01       	movw	r26, r14
    38ce:	18 96       	adiw	r26, 0x08	; 8
    38d0:	ed 91       	ld	r30, X+
    38d2:	fc 91       	ld	r31, X
    38d4:	19 97       	sbiw	r26, 0x09	; 9
    38d6:	66 e0       	ldi	r22, 0x06	; 6
    38d8:	87 e2       	ldi	r24, 0x27	; 39
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	19 95       	eicall
    38de:	c6 e8       	ldi	r28, 0x86	; 134
    38e0:	d8 e1       	ldi	r29, 0x18	; 24
    38e2:	0f 2e       	mov	r0, r31
    38e4:	f8 e2       	ldi	r31, 0x28	; 40
    38e6:	cf 2e       	mov	r12, r31
    38e8:	d1 2c       	mov	r13, r1
    38ea:	f0 2d       	mov	r31, r0
    38ec:	d9 82       	std	Y+1, r13	; 0x01
    38ee:	c8 82       	st	Y, r12
    38f0:	86 e0       	ldi	r24, 0x06	; 6
    38f2:	8a 83       	std	Y+2, r24	; 0x02
    38f4:	1b 82       	std	Y+3, r1	; 0x03
    38f6:	14 e0       	ldi	r17, 0x04	; 4
    38f8:	1c 83       	std	Y+4, r17	; 0x04
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	3a df       	rcall	.-396    	; 0x3772 <_turn_off>
    38fe:	d7 01       	movw	r26, r14
    3900:	18 96       	adiw	r26, 0x08	; 8
    3902:	ed 91       	ld	r30, X+
    3904:	fc 91       	ld	r31, X
    3906:	19 97       	sbiw	r26, 0x09	; 9
    3908:	67 e0       	ldi	r22, 0x07	; 7
    390a:	87 e2       	ldi	r24, 0x27	; 39
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	19 95       	eicall
    3910:	df 82       	std	Y+7, r13	; 0x07
    3912:	ce 82       	std	Y+6, r12	; 0x06
    3914:	87 e0       	ldi	r24, 0x07	; 7
    3916:	88 87       	std	Y+8, r24	; 0x08
    3918:	19 86       	std	Y+9, r1	; 0x09
    391a:	1a 87       	std	Y+10, r17	; 0x0a
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	29 df       	rcall	.-430    	; 0x3772 <_turn_off>
    3920:	d7 01       	movw	r26, r14
    3922:	18 96       	adiw	r26, 0x08	; 8
    3924:	ed 91       	ld	r30, X+
    3926:	fc 91       	ld	r31, X
    3928:	19 97       	sbiw	r26, 0x09	; 9
    392a:	65 e0       	ldi	r22, 0x05	; 5
    392c:	83 e3       	ldi	r24, 0x33	; 51
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	19 95       	eicall
    3932:	d7 01       	movw	r26, r14
    3934:	18 96       	adiw	r26, 0x08	; 8
    3936:	ed 91       	ld	r30, X+
    3938:	fc 91       	ld	r31, X
    393a:	19 97       	sbiw	r26, 0x09	; 9
    393c:	61 e0       	ldi	r22, 0x01	; 1
    393e:	84 e3       	ldi	r24, 0x34	; 52
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	19 95       	eicall
    3944:	84 e3       	ldi	r24, 0x34	; 52
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9d 87       	std	Y+13, r25	; 0x0d
    394a:	8c 87       	std	Y+12, r24	; 0x0c
    394c:	85 e0       	ldi	r24, 0x05	; 5
    394e:	8e 87       	std	Y+14, r24	; 0x0e
    3950:	1f 86       	std	Y+15, r1	; 0x0f
    3952:	18 8b       	std	Y+16, r17	; 0x10
    3954:	82 e0       	ldi	r24, 0x02	; 2
    3956:	0d df       	rcall	.-486    	; 0x3772 <_turn_off>
    3958:	d7 01       	movw	r26, r14
    395a:	18 96       	adiw	r26, 0x08	; 8
    395c:	ed 91       	ld	r30, X+
    395e:	fc 91       	ld	r31, X
    3960:	19 97       	sbiw	r26, 0x09	; 9
    3962:	64 e0       	ldi	r22, 0x04	; 4
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	19 95       	eicall
    396a:	d7 01       	movw	r26, r14
    396c:	18 96       	adiw	r26, 0x08	; 8
    396e:	ed 91       	ld	r30, X+
    3970:	fc 91       	ld	r31, X
    3972:	19 97       	sbiw	r26, 0x09	; 9
    3974:	61 e0       	ldi	r22, 0x01	; 1
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	91 e0       	ldi	r25, 0x01	; 1
    397a:	19 95       	eicall
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	91 e0       	ldi	r25, 0x01	; 1
    3980:	9b 8b       	std	Y+19, r25	; 0x13
    3982:	8a 8b       	std	Y+18, r24	; 0x12
    3984:	1c 8b       	std	Y+20, r17	; 0x14
    3986:	1d 8a       	std	Y+21, r1	; 0x15
    3988:	1e 8b       	std	Y+22, r17	; 0x16
    398a:	83 e0       	ldi	r24, 0x03	; 3
    398c:	f2 de       	rcall	.-540    	; 0x3772 <_turn_off>
    398e:	e1 2c       	mov	r14, r1
    3990:	f1 2c       	mov	r15, r1
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 ec       	ldi	r20, 0xC0	; 192
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	62 e5       	ldi	r22, 0x52	; 82
    399c:	75 e0       	ldi	r23, 0x05	; 5
    399e:	85 e1       	ldi	r24, 0x15	; 21
    39a0:	9c e1       	ldi	r25, 0x1C	; 28
    39a2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xTaskCreate>
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	ff 90       	pop	r15
    39b0:	ef 90       	pop	r14
    39b2:	df 90       	pop	r13
    39b4:	cf 90       	pop	r12
    39b6:	08 95       	ret

000039b8 <_serial_call_back>:
    39b8:	0f 93       	push	r16
    39ba:	1f 93       	push	r17
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	1f 92       	push	r1
    39c2:	1f 92       	push	r1
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	8c 01       	movw	r16, r24
    39ca:	19 82       	std	Y+1, r1	; 0x01
    39cc:	2d c0       	rjmp	.+90     	; 0x3a28 <_serial_call_back+0x70>
    39ce:	e0 91 02 19 	lds	r30, 0x1902	; 0x801902 <rec_buf_inp.2947>
    39d2:	ec 32       	cpi	r30, 0x2C	; 44
    39d4:	50 f4       	brcc	.+20     	; 0x39ea <_serial_call_back+0x32>
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	8e 0f       	add	r24, r30
    39da:	80 93 02 19 	sts	0x1902, r24	; 0x801902 <rec_buf_inp.2947>
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	ec 5c       	subi	r30, 0xCC	; 204
    39e2:	f6 4e       	sbci	r31, 0xE6	; 230
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	80 83       	st	Z, r24
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <_serial_call_back+0x36>
    39ea:	10 92 02 19 	sts	0x1902, r1	; 0x801902 <rec_buf_inp.2947>
    39ee:	8a 81       	ldd	r24, Y+2	; 0x02
    39f0:	8a 30       	cpi	r24, 0x0A	; 10
    39f2:	d1 f4       	brne	.+52     	; 0x3a28 <_serial_call_back+0x70>
    39f4:	40 91 02 19 	lds	r20, 0x1902	; 0x801902 <rec_buf_inp.2947>
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	fa 01       	movw	r30, r20
    39fc:	ee 5c       	subi	r30, 0xCE	; 206
    39fe:	f6 4e       	sbci	r31, 0xE6	; 230
    3a00:	10 82       	st	Z, r1
    3a02:	41 50       	subi	r20, 0x01	; 1
    3a04:	51 09       	sbc	r21, r1
    3a06:	9e 01       	movw	r18, r28
    3a08:	2f 5f       	subi	r18, 0xFF	; 255
    3a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0c:	64 e3       	ldi	r22, 0x34	; 52
    3a0e:	79 e1       	ldi	r23, 0x19	; 25
    3a10:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3a14:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3a18:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <xStreamBufferSendFromISR>
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	81 11       	cpse	r24, r1
    3a20:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vPortYield>
    3a24:	10 92 02 19 	sts	0x1902, r1	; 0x801902 <rec_buf_inp.2947>
    3a28:	be 01       	movw	r22, r28
    3a2a:	6e 5f       	subi	r22, 0xFE	; 254
    3a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2e:	c8 01       	movw	r24, r16
    3a30:	e1 d5       	rcall	.+3010   	; 0x45f4 <serial_get_byte>
    3a32:	88 23       	and	r24, r24
    3a34:	61 f2       	breq	.-104    	; 0x39ce <_serial_call_back+0x16>
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	08 95       	ret

00003a44 <_upload_message>:
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	8c 01       	movw	r16, r24
    3a4e:	eb 01       	movw	r28, r22
    3a50:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3a54:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3a58:	0e 94 90 0c 	call	0x1920	; 0x1920 <xStreamBufferReset>
    3a5c:	b8 01       	movw	r22, r16
    3a5e:	8e e9       	ldi	r24, 0x9E	; 158
    3a60:	98 e1       	ldi	r25, 0x18	; 24
    3a62:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <strcpy>
    3a66:	20 97       	sbiw	r28, 0x00	; 0
    3a68:	79 f0       	breq	.+30     	; 0x3a88 <_upload_message+0x44>
    3a6a:	ee e9       	ldi	r30, 0x9E	; 158
    3a6c:	f8 e1       	ldi	r31, 0x18	; 24
    3a6e:	01 90       	ld	r0, Z+
    3a70:	00 20       	and	r0, r0
    3a72:	e9 f7       	brne	.-6      	; 0x3a6e <_upload_message+0x2a>
    3a74:	31 97       	sbiw	r30, 0x01	; 1
    3a76:	80 e2       	ldi	r24, 0x20	; 32
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24
    3a7e:	be 01       	movw	r22, r28
    3a80:	8e e9       	ldi	r24, 0x9E	; 158
    3a82:	98 e1       	ldi	r25, 0x18	; 24
    3a84:	0e 94 6d 2a 	call	0x54da	; 0x54da <strcat>
    3a88:	ee e9       	ldi	r30, 0x9E	; 158
    3a8a:	f8 e1       	ldi	r31, 0x18	; 24
    3a8c:	df 01       	movw	r26, r30
    3a8e:	0d 90       	ld	r0, X+
    3a90:	00 20       	and	r0, r0
    3a92:	e9 f7       	brne	.-6      	; 0x3a8e <_upload_message+0x4a>
    3a94:	11 97       	sbiw	r26, 0x01	; 1
    3a96:	8d e0       	ldi	r24, 0x0D	; 13
    3a98:	9a e0       	ldi	r25, 0x0A	; 10
    3a9a:	11 96       	adiw	r26, 0x01	; 1
    3a9c:	9c 93       	st	X, r25
    3a9e:	8e 93       	st	-X, r24
    3aa0:	12 96       	adiw	r26, 0x02	; 2
    3aa2:	1c 92       	st	X, r1
    3aa4:	01 90       	ld	r0, Z+
    3aa6:	00 20       	and	r0, r0
    3aa8:	e9 f7       	brne	.-6      	; 0x3aa4 <_upload_message+0x60>
    3aaa:	31 97       	sbiw	r30, 0x01	; 1
    3aac:	ee 59       	subi	r30, 0x9E	; 158
    3aae:	f8 41       	sbci	r31, 0x18	; 24
    3ab0:	ae 2f       	mov	r26, r30
    3ab2:	8e e9       	ldi	r24, 0x9E	; 158
    3ab4:	98 e1       	ldi	r25, 0x18	; 24
    3ab6:	ac 01       	movw	r20, r24
    3ab8:	6a 2f       	mov	r22, r26
    3aba:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <_rn2483_serial>
    3abe:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <_rn2483_serial+0x1>
    3ac2:	48 d5       	rcall	.+2704   	; 0x4554 <serial_send_bytes>
    3ac4:	81 11       	cpse	r24, r1
    3ac6:	11 c0       	rjmp	.+34     	; 0x3aea <_upload_message+0xa6>
    3ac8:	08 e2       	ldi	r16, 0x28	; 40
    3aca:	15 e0       	ldi	r17, 0x05	; 5
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4d e2       	ldi	r20, 0x2D	; 45
    3ad2:	50 e0       	ldi	r21, 0x00	; 0
    3ad4:	6e e8       	ldi	r22, 0x8E	; 142
    3ad6:	79 e1       	ldi	r23, 0x19	; 25
    3ad8:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3adc:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3ae0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xStreamBufferReceive>
    3ae4:	8e e8       	ldi	r24, 0x8E	; 142
    3ae6:	99 e1       	ldi	r25, 0x19	; 25
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <_upload_message+0xaa>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <_reply2return_code>:
    3af8:	2f 92       	push	r2
    3afa:	3f 92       	push	r3
    3afc:	4f 92       	push	r4
    3afe:	5f 92       	push	r5
    3b00:	6f 92       	push	r6
    3b02:	7f 92       	push	r7
    3b04:	8f 92       	push	r8
    3b06:	9f 92       	push	r9
    3b08:	af 92       	push	r10
    3b0a:	bf 92       	push	r11
    3b0c:	cf 92       	push	r12
    3b0e:	df 92       	push	r13
    3b10:	ef 92       	push	r14
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	5c 01       	movw	r10, r24
    3b1e:	fc 01       	movw	r30, r24
    3b20:	01 90       	ld	r0, Z+
    3b22:	00 20       	and	r0, r0
    3b24:	e9 f7       	brne	.-6      	; 0x3b20 <_reply2return_code+0x28>
    3b26:	31 97       	sbiw	r30, 0x01	; 1
    3b28:	6f 01       	movw	r12, r30
    3b2a:	c8 1a       	sub	r12, r24
    3b2c:	d9 0a       	sbc	r13, r25
    3b2e:	5c 2c       	mov	r5, r12
    3b30:	0f 2e       	mov	r0, r31
    3b32:	f3 ef       	ldi	r31, 0xF3	; 243
    3b34:	8f 2e       	mov	r8, r31
    3b36:	f7 e0       	ldi	r31, 0x07	; 7
    3b38:	9f 2e       	mov	r9, r31
    3b3a:	f0 2d       	mov	r31, r0
    3b3c:	e1 2c       	mov	r14, r1
    3b3e:	f1 2c       	mov	r15, r1
    3b40:	4c 2c       	mov	r4, r12
    3b42:	37 01       	movw	r6, r14
    3b44:	f4 01       	movw	r30, r8
    3b46:	01 81       	ldd	r16, Z+1	; 0x01
    3b48:	12 81       	ldd	r17, Z+2	; 0x02
    3b4a:	e8 01       	movw	r28, r16
    3b4c:	09 90       	ld	r0, Y+
    3b4e:	00 20       	and	r0, r0
    3b50:	e9 f7       	brne	.-6      	; 0x3b4c <_reply2return_code+0x54>
    3b52:	21 97       	sbiw	r28, 0x01	; 1
    3b54:	c0 1b       	sub	r28, r16
    3b56:	d1 0b       	sbc	r29, r17
    3b58:	3c 2e       	mov	r3, r28
    3b5a:	f9 e0       	ldi	r31, 0x09	; 9
    3b5c:	cf 16       	cp	r12, r31
    3b5e:	d1 04       	cpc	r13, r1
    3b60:	58 f0       	brcs	.+22     	; 0x3b78 <_reply2return_code+0x80>
    3b62:	f4 01       	movw	r30, r8
    3b64:	20 80       	ld	r2, Z
    3b66:	fe e0       	ldi	r31, 0x0E	; 14
    3b68:	2f 12       	cpse	r2, r31
    3b6a:	06 c0       	rjmp	.+12     	; 0x3b78 <_reply2return_code+0x80>
    3b6c:	b8 01       	movw	r22, r16
    3b6e:	c5 01       	movw	r24, r10
    3b70:	0e 94 48 2a 	call	0x5490	; 0x5490 <strcasestr>
    3b74:	89 2b       	or	r24, r25
    3b76:	09 f5       	brne	.+66     	; 0x3bba <_reply2return_code+0xc2>
    3b78:	44 2d       	mov	r20, r4
    3b7a:	35 14       	cp	r3, r5
    3b7c:	08 f4       	brcc	.+2      	; 0x3b80 <_reply2return_code+0x88>
    3b7e:	4c 2f       	mov	r20, r28
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	b8 01       	movw	r22, r16
    3b84:	c5 01       	movw	r24, r10
    3b86:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <strncasecmp>
    3b8a:	89 2b       	or	r24, r25
    3b8c:	49 f4       	brne	.+18     	; 0x3ba0 <_reply2return_code+0xa8>
    3b8e:	f3 01       	movw	r30, r6
    3b90:	ee 0f       	add	r30, r30
    3b92:	ff 1f       	adc	r31, r31
    3b94:	e6 0d       	add	r30, r6
    3b96:	f7 1d       	adc	r31, r7
    3b98:	ed 50       	subi	r30, 0x0D	; 13
    3b9a:	f8 4f       	sbci	r31, 0xF8	; 248
    3b9c:	20 80       	ld	r2, Z
    3b9e:	0d c0       	rjmp	.+26     	; 0x3bba <_reply2return_code+0xc2>
    3ba0:	8f ef       	ldi	r24, 0xFF	; 255
    3ba2:	e8 1a       	sub	r14, r24
    3ba4:	f8 0a       	sbc	r15, r24
    3ba6:	e3 e0       	ldi	r30, 0x03	; 3
    3ba8:	8e 0e       	add	r8, r30
    3baa:	91 1c       	adc	r9, r1
    3bac:	f1 e1       	ldi	r31, 0x11	; 17
    3bae:	ef 16       	cp	r14, r31
    3bb0:	f1 04       	cpc	r15, r1
    3bb2:	39 f6       	brne	.-114    	; 0x3b42 <_reply2return_code+0x4a>
    3bb4:	68 94       	set
    3bb6:	22 24       	eor	r2, r2
    3bb8:	24 f8       	bld	r2, 4
    3bba:	82 2d       	mov	r24, r2
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	bf 90       	pop	r11
    3bce:	af 90       	pop	r10
    3bd0:	9f 90       	pop	r9
    3bd2:	8f 90       	pop	r8
    3bd4:	7f 90       	pop	r7
    3bd6:	6f 90       	pop	r6
    3bd8:	5f 90       	pop	r5
    3bda:	4f 90       	pop	r4
    3bdc:	3f 90       	pop	r3
    3bde:	2f 90       	pop	r2
    3be0:	08 95       	ret

00003be2 <_upload_message_rc>:
    3be2:	30 df       	rcall	.-416    	; 0x3a44 <_upload_message>
    3be4:	89 cf       	rjmp	.-238    	; 0x3af8 <_reply2return_code>
    3be6:	08 95       	ret

00003be8 <lora_driver_flush_buffers>:
    3be8:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3bec:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3bf0:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <xStreamBufferReset>
    3bf4:	08 95       	ret

00003bf6 <lora_driver_create>:
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	cf 92       	push	r12
    3bfe:	ef 92       	push	r14
    3c00:	0f 93       	push	r16
    3c02:	1f 93       	push	r17
    3c04:	cf 93       	push	r28
    3c06:	c8 2f       	mov	r28, r24
    3c08:	8b 01       	movw	r16, r22
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	88 ec       	ldi	r24, 0xC8	; 200
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xStreamBufferGenericCreate>
    3c18:	90 93 06 19 	sts	0x1906, r25	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3c1c:	80 93 05 19 	sts	0x1905, r24	; 0x801905 <_serial_reply_buffer_handle>
    3c20:	10 93 04 19 	sts	0x1904, r17	; 0x801904 <_downlinkMessageBuffer+0x1>
    3c24:	00 93 03 19 	sts	0x1903, r16	; 0x801903 <_downlinkMessageBuffer>
    3c28:	0f 2e       	mov	r0, r31
    3c2a:	fc ed       	ldi	r31, 0xDC	; 220
    3c2c:	8f 2e       	mov	r8, r31
    3c2e:	fc e1       	ldi	r31, 0x1C	; 28
    3c30:	9f 2e       	mov	r9, r31
    3c32:	f0 2d       	mov	r31, r0
    3c34:	68 94       	set
    3c36:	aa 24       	eor	r10, r10
    3c38:	a6 f8       	bld	r10, 6
    3c3a:	68 94       	set
    3c3c:	cc 24       	eor	r12, r12
    3c3e:	c6 f8       	bld	r12, 6
    3c40:	e1 2c       	mov	r14, r1
    3c42:	00 e0       	ldi	r16, 0x00	; 0
    3c44:	23 e0       	ldi	r18, 0x03	; 3
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	51 ee       	ldi	r21, 0xE1	; 225
    3c4a:	60 e0       	ldi	r22, 0x00	; 0
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	8c 2f       	mov	r24, r28
    3c50:	c4 d3       	rcall	.+1928   	; 0x43da <serial_new_instance>
    3c52:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <_rn2483_serial+0x1>
    3c56:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <_rn2483_serial>
    3c5a:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <register_access+0x8>
    3c5e:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <register_access+0x9>
    3c62:	64 e0       	ldi	r22, 0x04	; 4
    3c64:	87 e0       	ldi	r24, 0x07	; 7
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	19 95       	eicall
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	ef 90       	pop	r14
    3c72:	cf 90       	pop	r12
    3c74:	af 90       	pop	r10
    3c76:	9f 90       	pop	r9
    3c78:	8f 90       	pop	r8
    3c7a:	08 95       	ret

00003c7c <lora_driver_reset_rn2483>:
    3c7c:	88 23       	and	r24, r24
    3c7e:	49 f0       	breq	.+18     	; 0x3c92 <lora_driver_reset_rn2483+0x16>
    3c80:	e0 91 fd 19 	lds	r30, 0x19FD	; 0x8019fd <register_access+0x12>
    3c84:	f0 91 fe 19 	lds	r31, 0x19FE	; 0x8019fe <register_access+0x13>
    3c88:	64 e0       	ldi	r22, 0x04	; 4
    3c8a:	88 e0       	ldi	r24, 0x08	; 8
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	19 95       	eicall
    3c90:	08 95       	ret
    3c92:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <register_access+0x8>
    3c96:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <register_access+0x9>
    3c9a:	64 e0       	ldi	r22, 0x04	; 4
    3c9c:	88 e0       	ldi	r24, 0x08	; 8
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	19 95       	eicall
    3ca2:	08 95       	ret

00003ca4 <lora_driver_rn2483_factory_reset>:
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	89 e7       	ldi	r24, 0x79	; 121
    3caa:	95 e0       	ldi	r25, 0x05	; 5
    3cac:	cb de       	rcall	.-618    	; 0x3a44 <_upload_message>
    3cae:	ee e8       	ldi	r30, 0x8E	; 142
    3cb0:	f9 e1       	ldi	r31, 0x19	; 25
    3cb2:	01 90       	ld	r0, Z+
    3cb4:	00 20       	and	r0, r0
    3cb6:	e9 f7       	brne	.-6      	; 0x3cb2 <lora_driver_rn2483_factory_reset+0xe>
    3cb8:	31 97       	sbiw	r30, 0x01	; 1
    3cba:	ee 58       	subi	r30, 0x8E	; 142
    3cbc:	f9 41       	sbci	r31, 0x19	; 25
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	75 97       	sbiw	r30, 0x15	; 21
    3cc2:	08 f0       	brcs	.+2      	; 0x3cc6 <lora_driver_rn2483_factory_reset+0x22>
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	08 95       	ret

00003cc8 <lora_driver_get_rn2483_hweui>:
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	ec 01       	movw	r28, r24
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	70 e0       	ldi	r23, 0x00	; 0
    3cd2:	8a e8       	ldi	r24, 0x8A	; 138
    3cd4:	95 e0       	ldi	r25, 0x05	; 5
    3cd6:	b6 de       	rcall	.-660    	; 0x3a44 <_upload_message>
    3cd8:	ee e8       	ldi	r30, 0x8E	; 142
    3cda:	f9 e1       	ldi	r31, 0x19	; 25
    3cdc:	01 90       	ld	r0, Z+
    3cde:	00 20       	and	r0, r0
    3ce0:	e9 f7       	brne	.-6      	; 0x3cdc <lora_driver_get_rn2483_hweui+0x14>
    3ce2:	ef 59       	subi	r30, 0x9F	; 159
    3ce4:	f9 41       	sbci	r31, 0x19	; 25
    3ce6:	39 f4       	brne	.+14     	; 0x3cf6 <lora_driver_get_rn2483_hweui+0x2e>
    3ce8:	6e e8       	ldi	r22, 0x8E	; 142
    3cea:	79 e1       	ldi	r23, 0x19	; 25
    3cec:	ce 01       	movw	r24, r28
    3cee:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <strcpy>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <lora_driver_get_rn2483_hweui+0x32>
    3cf6:	18 82       	st	Y, r1
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <lora_driver_set_device_identifier>:
    3d00:	fc 01       	movw	r30, r24
    3d02:	01 90       	ld	r0, Z+
    3d04:	00 20       	and	r0, r0
    3d06:	e9 f7       	brne	.-6      	; 0x3d02 <lora_driver_set_device_identifier+0x2>
    3d08:	9f 01       	movw	r18, r30
    3d0a:	21 51       	subi	r18, 0x11	; 17
    3d0c:	31 09       	sbc	r19, r1
    3d0e:	28 17       	cp	r18, r24
    3d10:	39 07       	cpc	r19, r25
    3d12:	29 f4       	brne	.+10     	; 0x3d1e <lora_driver_set_device_identifier+0x1e>
    3d14:	bc 01       	movw	r22, r24
    3d16:	88 eb       	ldi	r24, 0xB8	; 184
    3d18:	95 e0       	ldi	r25, 0x05	; 5
    3d1a:	63 cf       	rjmp	.-314    	; 0x3be2 <_upload_message_rc>
    3d1c:	08 95       	ret
    3d1e:	89 e0       	ldi	r24, 0x09	; 9
    3d20:	08 95       	ret

00003d22 <lora_driver_set_application_identifier>:
    3d22:	fc 01       	movw	r30, r24
    3d24:	01 90       	ld	r0, Z+
    3d26:	00 20       	and	r0, r0
    3d28:	e9 f7       	brne	.-6      	; 0x3d24 <lora_driver_set_application_identifier+0x2>
    3d2a:	9f 01       	movw	r18, r30
    3d2c:	21 51       	subi	r18, 0x11	; 17
    3d2e:	31 09       	sbc	r19, r1
    3d30:	28 17       	cp	r18, r24
    3d32:	39 07       	cpc	r19, r25
    3d34:	29 f4       	brne	.+10     	; 0x3d40 <lora_driver_set_application_identifier+0x1e>
    3d36:	bc 01       	movw	r22, r24
    3d38:	87 ec       	ldi	r24, 0xC7	; 199
    3d3a:	95 e0       	ldi	r25, 0x05	; 5
    3d3c:	52 cf       	rjmp	.-348    	; 0x3be2 <_upload_message_rc>
    3d3e:	08 95       	ret
    3d40:	89 e0       	ldi	r24, 0x09	; 9
    3d42:	08 95       	ret

00003d44 <lora_driver_set_application_key>:
    3d44:	fc 01       	movw	r30, r24
    3d46:	01 90       	ld	r0, Z+
    3d48:	00 20       	and	r0, r0
    3d4a:	e9 f7       	brne	.-6      	; 0x3d46 <lora_driver_set_application_key+0x2>
    3d4c:	9f 01       	movw	r18, r30
    3d4e:	21 52       	subi	r18, 0x21	; 33
    3d50:	31 09       	sbc	r19, r1
    3d52:	28 17       	cp	r18, r24
    3d54:	39 07       	cpc	r19, r25
    3d56:	29 f4       	brne	.+10     	; 0x3d62 <lora_driver_set_application_key+0x1e>
    3d58:	bc 01       	movw	r22, r24
    3d5a:	86 ed       	ldi	r24, 0xD6	; 214
    3d5c:	95 e0       	ldi	r25, 0x05	; 5
    3d5e:	41 cf       	rjmp	.-382    	; 0x3be2 <_upload_message_rc>
    3d60:	08 95       	ret
    3d62:	89 e0       	ldi	r24, 0x09	; 9
    3d64:	08 95       	ret

00003d66 <lora_driver_save_mac>:
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	70 e0       	ldi	r23, 0x00	; 0
    3d6a:	85 e1       	ldi	r24, 0x15	; 21
    3d6c:	96 e0       	ldi	r25, 0x06	; 6
    3d6e:	39 cf       	rjmp	.-398    	; 0x3be2 <_upload_message_rc>
    3d70:	08 95       	ret

00003d72 <lora_driver_join>:
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	e8 2f       	mov	r30, r24
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	ee 0f       	add	r30, r30
    3d7c:	ff 1f       	adc	r31, r31
    3d7e:	e1 51       	subi	r30, 0x11	; 17
    3d80:	f8 4f       	sbci	r31, 0xF8	; 248
    3d82:	60 81       	ld	r22, Z
    3d84:	71 81       	ldd	r23, Z+1	; 0x01
    3d86:	8e e1       	ldi	r24, 0x1E	; 30
    3d88:	96 e0       	ldi	r25, 0x06	; 6
    3d8a:	2b df       	rcall	.-426    	; 0x3be2 <_upload_message_rc>
    3d8c:	81 11       	cpse	r24, r1
    3d8e:	14 c0       	rjmp	.+40     	; 0x3db8 <lora_driver_join+0x46>
    3d90:	08 e2       	ldi	r16, 0x28	; 40
    3d92:	15 e0       	ldi	r17, 0x05	; 5
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	4d e2       	ldi	r20, 0x2D	; 45
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	6e e8       	ldi	r22, 0x8E	; 142
    3d9e:	79 e1       	ldi	r23, 0x19	; 25
    3da0:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3da4:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3da8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xStreamBufferReceive>
    3dac:	88 23       	and	r24, r24
    3dae:	21 f0       	breq	.+8      	; 0x3db8 <lora_driver_join+0x46>
    3db0:	8e e8       	ldi	r24, 0x8E	; 142
    3db2:	99 e1       	ldi	r25, 0x19	; 25
    3db4:	a1 de       	rcall	.-702    	; 0x3af8 <_reply2return_code>
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <lora_driver_join+0x4c>
    3db8:	8e e8       	ldi	r24, 0x8E	; 142
    3dba:	99 e1       	ldi	r25, 0x19	; 25
    3dbc:	9d de       	rcall	.-710    	; 0x3af8 <_reply2return_code>
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	08 95       	ret

00003dc4 <lora_driver_sent_upload_message>:
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	1f 92       	push	r1
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	db 01       	movw	r26, r22
    3dd4:	11 96       	adiw	r26, 0x01	; 1
    3dd6:	9c 91       	ld	r25, X
    3dd8:	11 97       	sbiw	r26, 0x01	; 1
    3dda:	95 31       	cpi	r25, 0x15	; 21
    3ddc:	08 f0       	brcs	.+2      	; 0x3de0 <lora_driver_sent_upload_message+0x1c>
    3dde:	b4 c0       	rjmp	.+360    	; 0x3f48 <lora_driver_sent_upload_message+0x184>
    3de0:	99 23       	and	r25, r25
    3de2:	81 f1       	breq	.+96     	; 0x3e44 <lora_driver_sent_upload_message+0x80>
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	27 2f       	mov	r18, r23
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	46 2f       	mov	r20, r22
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	fd 01       	movw	r30, r26
    3df2:	e4 0f       	add	r30, r20
    3df4:	f5 1f       	adc	r31, r21
    3df6:	92 81       	ldd	r25, Z+2	; 0x02
    3df8:	92 95       	swap	r25
    3dfa:	9f 70       	andi	r25, 0x0F	; 15
    3dfc:	9a 30       	cpi	r25, 0x0A	; 10
    3dfe:	10 f0       	brcs	.+4      	; 0x3e04 <lora_driver_sent_upload_message+0x40>
    3e00:	99 5c       	subi	r25, 0xC9	; 201
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <lora_driver_sent_upload_message+0x42>
    3e04:	90 5d       	subi	r25, 0xD0	; 208
    3e06:	f9 01       	movw	r30, r18
    3e08:	e1 5e       	subi	r30, 0xE1	; 225
    3e0a:	f6 4e       	sbci	r31, 0xE6	; 230
    3e0c:	90 83       	st	Z, r25
    3e0e:	2f 5f       	subi	r18, 0xFF	; 255
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	fd 01       	movw	r30, r26
    3e14:	e4 0f       	add	r30, r20
    3e16:	f5 1f       	adc	r31, r21
    3e18:	92 81       	ldd	r25, Z+2	; 0x02
    3e1a:	9f 70       	andi	r25, 0x0F	; 15
    3e1c:	49 2f       	mov	r20, r25
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	4a 30       	cpi	r20, 0x0A	; 10
    3e22:	51 05       	cpc	r21, r1
    3e24:	14 f0       	brlt	.+4      	; 0x3e2a <lora_driver_sent_upload_message+0x66>
    3e26:	99 5c       	subi	r25, 0xC9	; 201
    3e28:	01 c0       	rjmp	.+2      	; 0x3e2c <lora_driver_sent_upload_message+0x68>
    3e2a:	90 5d       	subi	r25, 0xD0	; 208
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	e1 5e       	subi	r30, 0xE1	; 225
    3e30:	f6 4e       	sbci	r31, 0xE6	; 230
    3e32:	90 83       	st	Z, r25
    3e34:	7e 5f       	subi	r23, 0xFE	; 254
    3e36:	6f 5f       	subi	r22, 0xFF	; 255
    3e38:	11 96       	adiw	r26, 0x01	; 1
    3e3a:	9c 91       	ld	r25, X
    3e3c:	11 97       	sbiw	r26, 0x01	; 1
    3e3e:	69 17       	cp	r22, r25
    3e40:	98 f2       	brcs	.-90     	; 0x3de8 <lora_driver_sent_upload_message+0x24>
    3e42:	01 c0       	rjmp	.+2      	; 0x3e46 <lora_driver_sent_upload_message+0x82>
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	e7 2f       	mov	r30, r23
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	e1 5e       	subi	r30, 0xE1	; 225
    3e4c:	f6 4e       	sbci	r31, 0xE6	; 230
    3e4e:	10 82       	st	Z, r1
    3e50:	4c 91       	ld	r20, X
    3e52:	81 11       	cpse	r24, r1
    3e54:	03 c0       	rjmp	.+6      	; 0x3e5c <lora_driver_sent_upload_message+0x98>
    3e56:	87 e2       	ldi	r24, 0x27	; 39
    3e58:	96 e0       	ldi	r25, 0x06	; 6
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <lora_driver_sent_upload_message+0x9c>
    3e5c:	89 e2       	ldi	r24, 0x29	; 41
    3e5e:	96 e0       	ldi	r25, 0x06	; 6
    3e60:	2f e1       	ldi	r18, 0x1F	; 31
    3e62:	39 e1       	ldi	r19, 0x19	; 25
    3e64:	3f 93       	push	r19
    3e66:	2f 93       	push	r18
    3e68:	1f 92       	push	r1
    3e6a:	4f 93       	push	r20
    3e6c:	9f 93       	push	r25
    3e6e:	8f 93       	push	r24
    3e70:	8d e2       	ldi	r24, 0x2D	; 45
    3e72:	96 e0       	ldi	r25, 0x06	; 6
    3e74:	9f 93       	push	r25
    3e76:	8f 93       	push	r24
    3e78:	81 e6       	ldi	r24, 0x61	; 97
    3e7a:	99 e1       	ldi	r25, 0x19	; 25
    3e7c:	9f 93       	push	r25
    3e7e:	8f 93       	push	r24
    3e80:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sprintf>
    3e84:	60 e0       	ldi	r22, 0x00	; 0
    3e86:	70 e0       	ldi	r23, 0x00	; 0
    3e88:	81 e6       	ldi	r24, 0x61	; 97
    3e8a:	99 e1       	ldi	r25, 0x19	; 25
    3e8c:	aa de       	rcall	.-684    	; 0x3be2 <_upload_message_rc>
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	81 11       	cpse	r24, r1
    3e9a:	59 c0       	rjmp	.+178    	; 0x3f4e <lora_driver_sent_upload_message+0x18a>
    3e9c:	08 e2       	ldi	r16, 0x28	; 40
    3e9e:	15 e0       	ldi	r17, 0x05	; 5
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4d e2       	ldi	r20, 0x2D	; 45
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	6e e8       	ldi	r22, 0x8E	; 142
    3eaa:	79 e1       	ldi	r23, 0x19	; 25
    3eac:	80 91 05 19 	lds	r24, 0x1905	; 0x801905 <_serial_reply_buffer_handle>
    3eb0:	90 91 06 19 	lds	r25, 0x1906	; 0x801906 <_serial_reply_buffer_handle+0x1>
    3eb4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xStreamBufferReceive>
    3eb8:	88 23       	and	r24, r24
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <lora_driver_sent_upload_message+0xfa>
    3ebc:	47 c0       	rjmp	.+142    	; 0x3f4c <lora_driver_sent_upload_message+0x188>
    3ebe:	8e e8       	ldi	r24, 0x8E	; 142
    3ec0:	99 e1       	ldi	r25, 0x19	; 25
    3ec2:	1a de       	rcall	.-972    	; 0x3af8 <_reply2return_code>
    3ec4:	8e 30       	cpi	r24, 0x0E	; 14
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <lora_driver_sent_upload_message+0x106>
    3ec8:	42 c0       	rjmp	.+132    	; 0x3f4e <lora_driver_sent_upload_message+0x18a>
    3eca:	87 e0       	ldi	r24, 0x07	; 7
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <_downlinkMessageBuffer>
    3ed2:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <_downlinkMessageBuffer+0x1>
    3ed6:	89 2b       	or	r24, r25
    3ed8:	a9 f1       	breq	.+106    	; 0x3f44 <lora_driver_sent_upload_message+0x180>
    3eda:	be 01       	movw	r22, r28
    3edc:	6f 5f       	subi	r22, 0xFF	; 255
    3ede:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee0:	8e e8       	ldi	r24, 0x8E	; 142
    3ee2:	99 e1       	ldi	r25, 0x19	; 25
    3ee4:	44 d1       	rcall	.+648    	; 0x416e <decode_port_no>
    3ee6:	80 93 09 19 	sts	0x1909, r24	; 0x801909 <_downlink_payload>
    3eea:	e9 81       	ldd	r30, Y+1	; 0x01
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	e2 57       	subi	r30, 0x72	; 114
    3ef0:	f6 4e       	sbci	r31, 0xE6	; 230
    3ef2:	df 01       	movw	r26, r30
    3ef4:	0d 90       	ld	r0, X+
    3ef6:	00 20       	and	r0, r0
    3ef8:	e9 f7       	brne	.-6      	; 0x3ef4 <lora_driver_sent_upload_message+0x130>
    3efa:	11 97       	sbiw	r26, 0x01	; 1
    3efc:	ae 1b       	sub	r26, r30
    3efe:	bf 0b       	sbc	r27, r31
    3f00:	aa 23       	and	r26, r26
    3f02:	91 f0       	breq	.+36     	; 0x3f28 <lora_driver_sent_upload_message+0x164>
    3f04:	bb 27       	eor	r27, r27
    3f06:	cd 01       	movw	r24, r26
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	9c 01       	movw	r18, r24
    3f0c:	12 f4       	brpl	.+4      	; 0x3f12 <lora_driver_sent_upload_message+0x14e>
    3f0e:	2f 5f       	subi	r18, 0xFF	; 255
    3f10:	3f 4f       	sbci	r19, 0xFF	; 255
    3f12:	35 95       	asr	r19
    3f14:	27 95       	ror	r18
    3f16:	20 93 0a 19 	sts	0x190A, r18	; 0x80190a <_downlink_payload+0x1>
    3f1a:	af 01       	movw	r20, r30
    3f1c:	4f 5f       	subi	r20, 0xFF	; 255
    3f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f20:	64 e1       	ldi	r22, 0x14	; 20
    3f22:	8b e0       	ldi	r24, 0x0B	; 11
    3f24:	99 e1       	ldi	r25, 0x19	; 25
    3f26:	4f d1       	rcall	.+670    	; 0x41c6 <decode_hexadecimal_string_bytes>
    3f28:	01 e0       	ldi	r16, 0x01	; 1
    3f2a:	10 e0       	ldi	r17, 0x00	; 0
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	46 e1       	ldi	r20, 0x16	; 22
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	69 e0       	ldi	r22, 0x09	; 9
    3f36:	79 e1       	ldi	r23, 0x19	; 25
    3f38:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <_downlinkMessageBuffer>
    3f3c:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <_downlinkMessageBuffer+0x1>
    3f40:	0e 94 cf 0c 	call	0x199e	; 0x199e <xStreamBufferSend>
    3f44:	8e e0       	ldi	r24, 0x0E	; 14
    3f46:	03 c0       	rjmp	.+6      	; 0x3f4e <lora_driver_sent_upload_message+0x18a>
    3f48:	84 e1       	ldi	r24, 0x14	; 20
    3f4a:	01 c0       	rjmp	.+2      	; 0x3f4e <lora_driver_sent_upload_message+0x18a>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	0f 90       	pop	r0
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	08 95       	ret

00003f5a <lora_driver_set_adaptive_data_rate>:
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	19 f0       	breq	.+6      	; 0x3f64 <lora_driver_set_adaptive_data_rate+0xa>
    3f5e:	6d e3       	ldi	r22, 0x3D	; 61
    3f60:	76 e0       	ldi	r23, 0x06	; 6
    3f62:	02 c0       	rjmp	.+4      	; 0x3f68 <lora_driver_set_adaptive_data_rate+0xe>
    3f64:	66 e1       	ldi	r22, 0x16	; 22
    3f66:	77 e0       	ldi	r23, 0x07	; 7
    3f68:	81 e4       	ldi	r24, 0x41	; 65
    3f6a:	96 e0       	ldi	r25, 0x06	; 6
    3f6c:	3a ce       	rjmp	.-908    	; 0x3be2 <_upload_message_rc>
    3f6e:	08 95       	ret

00003f70 <lora_driver_configure_to_eu868>:
    3f70:	2f 92       	push	r2
    3f72:	3f 92       	push	r3
    3f74:	4f 92       	push	r4
    3f76:	5f 92       	push	r5
    3f78:	6f 92       	push	r6
    3f7a:	7f 92       	push	r7
    3f7c:	8f 92       	push	r8
    3f7e:	9f 92       	push	r9
    3f80:	af 92       	push	r10
    3f82:	bf 92       	push	r11
    3f84:	cf 92       	push	r12
    3f86:	df 92       	push	r13
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	1f 93       	push	r17
    3f90:	cf 93       	push	r28
    3f92:	df 93       	push	r29
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	a0 97       	sbiw	r28, 0x20	; 32
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	6f e9       	ldi	r22, 0x9F	; 159
    3fa6:	76 e0       	ldi	r23, 0x06	; 6
    3fa8:	8b ea       	ldi	r24, 0xAB	; 171
    3faa:	96 e0       	ldi	r25, 0x06	; 6
    3fac:	4b dd       	rcall	.-1386   	; 0x3a44 <_upload_message>
    3fae:	a4 dd       	rcall	.-1208   	; 0x3af8 <_reply2return_code>
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	a3 c0       	rjmp	.+326    	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    3fb4:	80 e2       	ldi	r24, 0x20	; 32
    3fb6:	e1 e2       	ldi	r30, 0x21	; 33
    3fb8:	f2 e0       	ldi	r31, 0x02	; 2
    3fba:	de 01       	movw	r26, r28
    3fbc:	11 96       	adiw	r26, 0x01	; 1
    3fbe:	01 90       	ld	r0, Z+
    3fc0:	0d 92       	st	X+, r0
    3fc2:	8a 95       	dec	r24
    3fc4:	e1 f7       	brne	.-8      	; 0x3fbe <lora_driver_configure_to_eu868+0x4e>
    3fc6:	9e 01       	movw	r18, r28
    3fc8:	2f 5f       	subi	r18, 0xFF	; 255
    3fca:	3f 4f       	sbci	r19, 0xFF	; 255
    3fcc:	69 01       	movw	r12, r18
    3fce:	e1 2c       	mov	r14, r1
    3fd0:	f1 2c       	mov	r15, r1
    3fd2:	0f 2e       	mov	r0, r31
    3fd4:	f7 eb       	ldi	r31, 0xB7	; 183
    3fd6:	af 2e       	mov	r10, r31
    3fd8:	f6 e0       	ldi	r31, 0x06	; 6
    3fda:	bf 2e       	mov	r11, r31
    3fdc:	f0 2d       	mov	r31, r0
    3fde:	01 e6       	ldi	r16, 0x61	; 97
    3fe0:	19 e1       	ldi	r17, 0x19	; 25
    3fe2:	0f 2e       	mov	r0, r31
    3fe4:	f0 ed       	ldi	r31, 0xD0	; 208
    3fe6:	4f 2e       	mov	r4, r31
    3fe8:	f6 e0       	ldi	r31, 0x06	; 6
    3fea:	5f 2e       	mov	r5, r31
    3fec:	f0 2d       	mov	r31, r0
    3fee:	0f 2e       	mov	r0, r31
    3ff0:	f7 ee       	ldi	r31, 0xE7	; 231
    3ff2:	8f 2e       	mov	r8, r31
    3ff4:	f6 e0       	ldi	r31, 0x06	; 6
    3ff6:	9f 2e       	mov	r9, r31
    3ff8:	f0 2d       	mov	r31, r0
    3ffa:	0f 2e       	mov	r0, r31
    3ffc:	f1 e0       	ldi	r31, 0x01	; 1
    3ffe:	6f 2e       	mov	r6, r31
    4000:	f7 e0       	ldi	r31, 0x07	; 7
    4002:	7f 2e       	mov	r7, r31
    4004:	f0 2d       	mov	r31, r0
    4006:	3e 2c       	mov	r3, r14
    4008:	2f 2c       	mov	r2, r15
    400a:	ff 92       	push	r15
    400c:	ef 92       	push	r14
    400e:	bf 92       	push	r11
    4010:	af 92       	push	r10
    4012:	1f 93       	push	r17
    4014:	0f 93       	push	r16
    4016:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sprintf>
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	c8 01       	movw	r24, r16
    4020:	11 dd       	rcall	.-1502   	; 0x3a44 <_upload_message>
    4022:	6a dd       	rcall	.-1324   	; 0x3af8 <_reply2return_code>
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	81 11       	cpse	r24, r1
    4032:	63 c0       	rjmp	.+198    	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    4034:	32 e0       	ldi	r19, 0x02	; 2
    4036:	3e 15       	cp	r19, r14
    4038:	e8 f4       	brcc	.+58     	; 0x4074 <lora_driver_configure_to_eu868+0x104>
    403a:	f6 01       	movw	r30, r12
    403c:	83 81       	ldd	r24, Z+3	; 0x03
    403e:	8f 93       	push	r24
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	8f 93       	push	r24
    4044:	81 81       	ldd	r24, Z+1	; 0x01
    4046:	8f 93       	push	r24
    4048:	80 81       	ld	r24, Z
    404a:	8f 93       	push	r24
    404c:	ff 92       	push	r15
    404e:	ef 92       	push	r14
    4050:	5f 92       	push	r5
    4052:	4f 92       	push	r4
    4054:	1f 93       	push	r17
    4056:	0f 93       	push	r16
    4058:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sprintf>
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	c8 01       	movw	r24, r16
    4062:	f0 dc       	rcall	.-1568   	; 0x3a44 <_upload_message>
    4064:	49 dd       	rcall	.-1390   	; 0x3af8 <_reply2return_code>
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	81 11       	cpse	r24, r1
    4072:	43 c0       	rjmp	.+134    	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    4074:	2f 92       	push	r2
    4076:	3f 92       	push	r3
    4078:	9f 92       	push	r9
    407a:	8f 92       	push	r8
    407c:	1f 93       	push	r17
    407e:	0f 93       	push	r16
    4080:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sprintf>
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	c8 01       	movw	r24, r16
    408a:	dc dc       	rcall	.-1608   	; 0x3a44 <_upload_message>
    408c:	35 dd       	rcall	.-1430   	; 0x3af8 <_reply2return_code>
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	81 11       	cpse	r24, r1
    409c:	2e c0       	rjmp	.+92     	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    409e:	2f 92       	push	r2
    40a0:	3f 92       	push	r3
    40a2:	7f 92       	push	r7
    40a4:	6f 92       	push	r6
    40a6:	1f 93       	push	r17
    40a8:	0f 93       	push	r16
    40aa:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sprintf>
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	c8 01       	movw	r24, r16
    40b4:	c7 dc       	rcall	.-1650   	; 0x3a44 <_upload_message>
    40b6:	20 dd       	rcall	.-1472   	; 0x3af8 <_reply2return_code>
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	0f 90       	pop	r0
    40be:	0f 90       	pop	r0
    40c0:	0f 90       	pop	r0
    40c2:	0f 90       	pop	r0
    40c4:	81 11       	cpse	r24, r1
    40c6:	19 c0       	rjmp	.+50     	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    40c8:	3f ef       	ldi	r19, 0xFF	; 255
    40ca:	e3 1a       	sub	r14, r19
    40cc:	f3 0a       	sbc	r15, r19
    40ce:	84 e0       	ldi	r24, 0x04	; 4
    40d0:	c8 0e       	add	r12, r24
    40d2:	d1 1c       	adc	r13, r1
    40d4:	98 e0       	ldi	r25, 0x08	; 8
    40d6:	e9 16       	cp	r14, r25
    40d8:	f1 04       	cpc	r15, r1
    40da:	09 f0       	breq	.+2      	; 0x40de <lora_driver_configure_to_eu868+0x16e>
    40dc:	94 cf       	rjmp	.-216    	; 0x4006 <lora_driver_configure_to_eu868+0x96>
    40de:	60 e0       	ldi	r22, 0x00	; 0
    40e0:	70 e0       	ldi	r23, 0x00	; 0
    40e2:	89 e1       	ldi	r24, 0x19	; 25
    40e4:	97 e0       	ldi	r25, 0x07	; 7
    40e6:	ae dc       	rcall	.-1700   	; 0x3a44 <_upload_message>
    40e8:	07 dd       	rcall	.-1522   	; 0x3af8 <_reply2return_code>
    40ea:	81 11       	cpse	r24, r1
    40ec:	06 c0       	rjmp	.+12     	; 0x40fa <lora_driver_configure_to_eu868+0x18a>
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	8a e2       	ldi	r24, 0x2A	; 42
    40f4:	97 e0       	ldi	r25, 0x07	; 7
    40f6:	a6 dc       	rcall	.-1716   	; 0x3a44 <_upload_message>
    40f8:	ff dc       	rcall	.-1538   	; 0x3af8 <_reply2return_code>
    40fa:	a0 96       	adiw	r28, 0x20	; 32
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	ff 90       	pop	r15
    4110:	ef 90       	pop	r14
    4112:	df 90       	pop	r13
    4114:	cf 90       	pop	r12
    4116:	bf 90       	pop	r11
    4118:	af 90       	pop	r10
    411a:	9f 90       	pop	r9
    411c:	8f 90       	pop	r8
    411e:	7f 90       	pop	r7
    4120:	6f 90       	pop	r6
    4122:	5f 90       	pop	r5
    4124:	4f 90       	pop	r4
    4126:	3f 90       	pop	r3
    4128:	2f 90       	pop	r2
    412a:	08 95       	ret

0000412c <lora_driver_set_otaa_identity>:
    412c:	ef 92       	push	r14
    412e:	ff 92       	push	r15
    4130:	0f 93       	push	r16
    4132:	1f 93       	push	r17
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	ec 01       	movw	r28, r24
    413a:	8b 01       	movw	r16, r22
    413c:	7a 01       	movw	r14, r20
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	0c df       	rcall	.-488    	; 0x3f5a <lora_driver_set_adaptive_data_rate>
    4142:	81 11       	cpse	r24, r1
    4144:	0d c0       	rjmp	.+26     	; 0x4160 <lora_driver_set_otaa_identity+0x34>
    4146:	ce 01       	movw	r24, r28
    4148:	ec dd       	rcall	.-1064   	; 0x3d22 <lora_driver_set_application_identifier>
    414a:	81 11       	cpse	r24, r1
    414c:	09 c0       	rjmp	.+18     	; 0x4160 <lora_driver_set_otaa_identity+0x34>
    414e:	c8 01       	movw	r24, r16
    4150:	f9 dd       	rcall	.-1038   	; 0x3d44 <lora_driver_set_application_key>
    4152:	81 11       	cpse	r24, r1
    4154:	05 c0       	rjmp	.+10     	; 0x4160 <lora_driver_set_otaa_identity+0x34>
    4156:	c7 01       	movw	r24, r14
    4158:	d3 dd       	rcall	.-1114   	; 0x3d00 <lora_driver_set_device_identifier>
    415a:	81 11       	cpse	r24, r1
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <lora_driver_set_otaa_identity+0x34>
    415e:	03 de       	rcall	.-1018   	; 0x3d66 <lora_driver_save_mac>
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	ef 90       	pop	r14
    416c:	08 95       	ret

0000416e <decode_port_no>:
    416e:	dc 01       	movw	r26, r24
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	29 f1       	breq	.+74     	; 0x41be <decode_port_no+0x50>
    4174:	fb 01       	movw	r30, r22
    4176:	20 81       	ld	r18, Z
    4178:	fc 01       	movw	r30, r24
    417a:	01 90       	ld	r0, Z+
    417c:	00 20       	and	r0, r0
    417e:	e9 f7       	brne	.-6      	; 0x417a <decode_port_no+0xc>
    4180:	31 97       	sbiw	r30, 0x01	; 1
    4182:	e8 1b       	sub	r30, r24
    4184:	f9 0b       	sbc	r31, r25
    4186:	82 2f       	mov	r24, r18
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	e8 17       	cp	r30, r24
    418c:	f9 07       	cpc	r31, r25
    418e:	c8 f0       	brcs	.+50     	; 0x41c2 <decode_port_no+0x54>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	08 c0       	rjmp	.+16     	; 0x41a4 <decode_port_no+0x36>
    4194:	88 0f       	add	r24, r24
    4196:	38 2f       	mov	r19, r24
    4198:	33 0f       	add	r19, r19
    419a:	33 0f       	add	r19, r19
    419c:	83 0f       	add	r24, r19
    419e:	80 53       	subi	r24, 0x30	; 48
    41a0:	89 0f       	add	r24, r25
    41a2:	2f 5f       	subi	r18, 0xFF	; 255
    41a4:	fd 01       	movw	r30, r26
    41a6:	e2 0f       	add	r30, r18
    41a8:	f1 1d       	adc	r31, r1
    41aa:	90 81       	ld	r25, Z
    41ac:	30 ed       	ldi	r19, 0xD0	; 208
    41ae:	39 0f       	add	r19, r25
    41b0:	3a 30       	cpi	r19, 0x0A	; 10
    41b2:	10 f4       	brcc	.+4      	; 0x41b8 <decode_port_no+0x4a>
    41b4:	91 11       	cpse	r25, r1
    41b6:	ee cf       	rjmp	.-36     	; 0x4194 <decode_port_no+0x26>
    41b8:	fb 01       	movw	r30, r22
    41ba:	20 83       	st	Z, r18
    41bc:	08 95       	ret
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	08 95       	ret
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	08 95       	ret

000041c6 <decode_hexadecimal_string_bytes>:
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	dc 01       	movw	r26, r24
    41d0:	ea 01       	movw	r28, r20
    41d2:	20 97       	sbiw	r28, 0x00	; 0
    41d4:	e1 f1       	breq	.+120    	; 0x424e <decode_hexadecimal_string_bytes+0x88>
    41d6:	fa 01       	movw	r30, r20
    41d8:	01 90       	ld	r0, Z+
    41da:	00 20       	and	r0, r0
    41dc:	e9 f7       	brne	.-6      	; 0x41d8 <decode_hexadecimal_string_bytes+0x12>
    41de:	31 97       	sbiw	r30, 0x01	; 1
    41e0:	e4 1b       	sub	r30, r20
    41e2:	f5 0b       	sbc	r31, r21
    41e4:	32 97       	sbiw	r30, 0x02	; 2
    41e6:	10 f5       	brcc	.+68     	; 0x422c <decode_hexadecimal_string_bytes+0x66>
    41e8:	32 c0       	rjmp	.+100    	; 0x424e <decode_hexadecimal_string_bytes+0x88>
    41ea:	8d 01       	movw	r16, r26
    41ec:	04 0f       	add	r16, r20
    41ee:	15 1f       	adc	r17, r21
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	ae 01       	movw	r20, r28
    41f4:	42 0f       	add	r20, r18
    41f6:	53 1f       	adc	r21, r19
    41f8:	fa 01       	movw	r30, r20
    41fa:	90 81       	ld	r25, Z
    41fc:	91 34       	cpi	r25, 0x41	; 65
    41fe:	28 f0       	brcs	.+10     	; 0x420a <decode_hexadecimal_string_bytes+0x44>
    4200:	97 53       	subi	r25, 0x37	; 55
    4202:	59 2f       	mov	r21, r25
    4204:	52 95       	swap	r21
    4206:	50 7f       	andi	r21, 0xF0	; 240
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <decode_hexadecimal_string_bytes+0x4a>
    420a:	59 2f       	mov	r21, r25
    420c:	52 95       	swap	r21
    420e:	50 7f       	andi	r21, 0xF0	; 240
    4210:	2c 0f       	add	r18, r28
    4212:	3d 1f       	adc	r19, r29
    4214:	f9 01       	movw	r30, r18
    4216:	91 81       	ldd	r25, Z+1	; 0x01
    4218:	91 34       	cpi	r25, 0x41	; 65
    421a:	10 f0       	brcs	.+4      	; 0x4220 <decode_hexadecimal_string_bytes+0x5a>
    421c:	97 53       	subi	r25, 0x37	; 55
    421e:	01 c0       	rjmp	.+2      	; 0x4222 <decode_hexadecimal_string_bytes+0x5c>
    4220:	90 53       	subi	r25, 0x30	; 48
    4222:	95 0f       	add	r25, r21
    4224:	f8 01       	movw	r30, r16
    4226:	90 83       	st	Z, r25
    4228:	8f 5f       	subi	r24, 0xFF	; 255
    422a:	01 c0       	rjmp	.+2      	; 0x422e <decode_hexadecimal_string_bytes+0x68>
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	28 2f       	mov	r18, r24
    4230:	22 0f       	add	r18, r18
    4232:	48 2f       	mov	r20, r24
    4234:	50 e0       	ldi	r21, 0x00	; 0
    4236:	fe 01       	movw	r30, r28
    4238:	01 90       	ld	r0, Z+
    423a:	00 20       	and	r0, r0
    423c:	e9 f7       	brne	.-6      	; 0x4238 <decode_hexadecimal_string_bytes+0x72>
    423e:	31 97       	sbiw	r30, 0x01	; 1
    4240:	ec 1b       	sub	r30, r28
    4242:	fd 0b       	sbc	r31, r29
    4244:	4e 17       	cp	r20, r30
    4246:	5f 07       	cpc	r21, r31
    4248:	10 f4       	brcc	.+4      	; 0x424e <decode_hexadecimal_string_bytes+0x88>
    424a:	86 13       	cpse	r24, r22
    424c:	ce cf       	rjmp	.-100    	; 0x41ea <decode_hexadecimal_string_bytes+0x24>
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	08 95       	ret

00004258 <reg_read_register>:
    4258:	fc 01       	movw	r30, r24
    425a:	80 81       	ld	r24, Z
    425c:	08 95       	ret

0000425e <reg_read_bit>:
    425e:	fc 01       	movw	r30, r24
    4260:	20 81       	ld	r18, Z
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	02 c0       	rjmp	.+4      	; 0x426c <reg_read_bit+0xe>
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	6a 95       	dec	r22
    426e:	e2 f7       	brpl	.-8      	; 0x4268 <reg_read_bit+0xa>
    4270:	82 23       	and	r24, r18
    4272:	08 95       	ret

00004274 <reg_read_bits>:
    4274:	fc 01       	movw	r30, r24
    4276:	80 81       	ld	r24, Z
    4278:	86 23       	and	r24, r22
    427a:	08 95       	ret

0000427c <reg_set_register>:
    427c:	fc 01       	movw	r30, r24
    427e:	60 83       	st	Z, r22
    4280:	08 95       	ret

00004282 <reg_clear_register>:
    4282:	fc 01       	movw	r30, r24
    4284:	10 82       	st	Z, r1
    4286:	08 95       	ret

00004288 <reg_set_bit>:
    4288:	fc 01       	movw	r30, r24
    428a:	40 81       	ld	r20, Z
    428c:	21 e0       	ldi	r18, 0x01	; 1
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	02 c0       	rjmp	.+4      	; 0x4296 <reg_set_bit+0xe>
    4292:	22 0f       	add	r18, r18
    4294:	33 1f       	adc	r19, r19
    4296:	6a 95       	dec	r22
    4298:	e2 f7       	brpl	.-8      	; 0x4292 <reg_set_bit+0xa>
    429a:	24 2b       	or	r18, r20
    429c:	20 83       	st	Z, r18
    429e:	08 95       	ret

000042a0 <reg_set_bits>:
    42a0:	fc 01       	movw	r30, r24
    42a2:	20 81       	ld	r18, Z
    42a4:	62 2b       	or	r22, r18
    42a6:	60 83       	st	Z, r22
    42a8:	08 95       	ret

000042aa <reg_toggle_bit>:
    42aa:	fc 01       	movw	r30, r24
    42ac:	40 81       	ld	r20, Z
    42ae:	21 e0       	ldi	r18, 0x01	; 1
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <reg_toggle_bit+0xe>
    42b4:	22 0f       	add	r18, r18
    42b6:	33 1f       	adc	r19, r19
    42b8:	6a 95       	dec	r22
    42ba:	e2 f7       	brpl	.-8      	; 0x42b4 <reg_toggle_bit+0xa>
    42bc:	24 27       	eor	r18, r20
    42be:	20 83       	st	Z, r18
    42c0:	08 95       	ret

000042c2 <reg_toggle_bits>:
    42c2:	fc 01       	movw	r30, r24
    42c4:	20 81       	ld	r18, Z
    42c6:	62 27       	eor	r22, r18
    42c8:	60 83       	st	Z, r22
    42ca:	08 95       	ret

000042cc <reg_clear_bit>:
    42cc:	fc 01       	movw	r30, r24
    42ce:	90 81       	ld	r25, Z
    42d0:	21 e0       	ldi	r18, 0x01	; 1
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	02 c0       	rjmp	.+4      	; 0x42da <reg_clear_bit+0xe>
    42d6:	22 0f       	add	r18, r18
    42d8:	33 1f       	adc	r19, r19
    42da:	6a 95       	dec	r22
    42dc:	e2 f7       	brpl	.-8      	; 0x42d6 <reg_clear_bit+0xa>
    42de:	20 95       	com	r18
    42e0:	29 23       	and	r18, r25
    42e2:	20 83       	st	Z, r18
    42e4:	08 95       	ret

000042e6 <reg_clear_bits>:
    42e6:	fc 01       	movw	r30, r24
    42e8:	90 81       	ld	r25, Z
    42ea:	60 95       	com	r22
    42ec:	69 23       	and	r22, r25
    42ee:	60 83       	st	Z, r22
    42f0:	08 95       	ret

000042f2 <mh_z19_take_meassuring>:
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	29 97       	sbiw	r28, 0x09	; 9
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	f8 94       	cli
    4300:	de bf       	out	0x3e, r29	; 62
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	cd bf       	out	0x3d, r28	; 61
    4306:	89 e0       	ldi	r24, 0x09	; 9
    4308:	e1 e4       	ldi	r30, 0x41	; 65
    430a:	f2 e0       	ldi	r31, 0x02	; 2
    430c:	9e 01       	movw	r18, r28
    430e:	2f 5f       	subi	r18, 0xFF	; 255
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	d9 01       	movw	r26, r18
    4314:	01 90       	ld	r0, Z+
    4316:	0d 92       	st	X+, r0
    4318:	8a 95       	dec	r24
    431a:	e1 f7       	brne	.-8      	; 0x4314 <mh_z19_take_meassuring+0x22>
    431c:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <_ppm+0x1>
    4320:	10 92 bb 19 	sts	0x19BB, r1	; 0x8019bb <_ppm>
    4324:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <_serial>
    4328:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <_serial+0x1>
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	31 f0       	breq	.+12     	; 0x433c <mh_z19_take_meassuring+0x4a>
    4330:	42 2f       	mov	r20, r18
    4332:	53 2f       	mov	r21, r19
    4334:	69 e0       	ldi	r22, 0x09	; 9
    4336:	0e d1       	rcall	.+540    	; 0x4554 <serial_send_bytes>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	01 c0       	rjmp	.+2      	; 0x433e <mh_z19_take_meassuring+0x4c>
    433c:	82 e0       	ldi	r24, 0x02	; 2
    433e:	29 96       	adiw	r28, 0x09	; 9
    4340:	0f b6       	in	r0, 0x3f	; 63
    4342:	f8 94       	cli
    4344:	de bf       	out	0x3e, r29	; 62
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	cd bf       	out	0x3d, r28	; 61
    434a:	df 91       	pop	r29
    434c:	cf 91       	pop	r28
    434e:	08 95       	ret

00004350 <mh_z19_get_co2_ppm>:
    4350:	20 91 bb 19 	lds	r18, 0x19BB	; 0x8019bb <_ppm>
    4354:	30 91 bc 19 	lds	r19, 0x19BC	; 0x8019bc <_ppm+0x1>
    4358:	21 15       	cp	r18, r1
    435a:	31 05       	cpc	r19, r1
    435c:	29 f4       	brne	.+10     	; 0x4368 <mh_z19_get_co2_ppm+0x18>
    435e:	fc 01       	movw	r30, r24
    4360:	11 82       	std	Z+1, r1	; 0x01
    4362:	10 82       	st	Z, r1
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	08 95       	ret
    4368:	fc 01       	movw	r30, r24
    436a:	31 83       	std	Z+1, r19	; 0x01
    436c:	20 83       	st	Z, r18
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	08 95       	ret

00004372 <rcServoSet>:
    4372:	65 36       	cpi	r22, 0x65	; 101
    4374:	0c f0       	brlt	.+2      	; 0x4378 <rcServoSet+0x6>
    4376:	64 e6       	ldi	r22, 0x64	; 100
    4378:	6c 39       	cpi	r22, 0x9C	; 156
    437a:	0c f4       	brge	.+2      	; 0x437e <rcServoSet+0xc>
    437c:	6c e9       	ldi	r22, 0x9C	; 156
    437e:	96 ef       	ldi	r25, 0xF6	; 246
    4380:	69 02       	muls	r22, r25
    4382:	b0 01       	movw	r22, r0
    4384:	11 24       	eor	r1, r1
    4386:	68 54       	subi	r22, 0x48	; 72
    4388:	74 4f       	sbci	r23, 0xF4	; 244
    438a:	81 11       	cpse	r24, r1
    438c:	05 c0       	rjmp	.+10     	; 0x4398 <rcServoSet+0x26>
    438e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4392:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4396:	08 95       	ret
    4398:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    439c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    43a0:	08 95       	ret

000043a2 <rcServoCreate>:
    43a2:	ea e0       	ldi	r30, 0x0A	; 10
    43a4:	f1 e0       	ldi	r31, 0x01	; 1
    43a6:	80 81       	ld	r24, Z
    43a8:	88 61       	ori	r24, 0x18	; 24
    43aa:	80 83       	st	Z, r24
    43ac:	8f e3       	ldi	r24, 0x3F	; 63
    43ae:	9c e9       	ldi	r25, 0x9C	; 156
    43b0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    43b4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	da df       	rcall	.-76     	; 0x4372 <rcServoSet>
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	d7 df       	rcall	.-82     	; 0x4372 <rcServoSet>
    43c4:	e0 e2       	ldi	r30, 0x20	; 32
    43c6:	f1 e0       	ldi	r31, 0x01	; 1
    43c8:	80 81       	ld	r24, Z
    43ca:	82 6a       	ori	r24, 0xA2	; 162
    43cc:	80 83       	st	Z, r24
    43ce:	e1 e2       	ldi	r30, 0x21	; 33
    43d0:	f1 e0       	ldi	r31, 0x01	; 1
    43d2:	80 81       	ld	r24, Z
    43d4:	8a 61       	ori	r24, 0x1A	; 26
    43d6:	80 83       	st	Z, r24
    43d8:	08 95       	ret

000043da <serial_new_instance>:
    43da:	2f 92       	push	r2
    43dc:	3f 92       	push	r3
    43de:	4f 92       	push	r4
    43e0:	5f 92       	push	r5
    43e2:	6f 92       	push	r6
    43e4:	7f 92       	push	r7
    43e6:	8f 92       	push	r8
    43e8:	9f 92       	push	r9
    43ea:	af 92       	push	r10
    43ec:	cf 92       	push	r12
    43ee:	ef 92       	push	r14
    43f0:	ff 92       	push	r15
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	f8 2e       	mov	r15, r24
    4400:	2a 01       	movw	r4, r20
    4402:	3b 01       	movw	r6, r22
    4404:	88 e0       	ldi	r24, 0x08	; 8
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0e d7       	rcall	.+3612   	; 0x5226 <malloc>
    440a:	8c 01       	movw	r16, r24
    440c:	8f 2d       	mov	r24, r15
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	fc 01       	movw	r30, r24
    4416:	e1 54       	subi	r30, 0x41	; 65
    4418:	f6 4e       	sbci	r31, 0xE6	; 230
    441a:	11 83       	std	Z+1, r17	; 0x01
    441c:	00 83       	st	Z, r16
    441e:	fc 01       	movw	r30, r24
    4420:	e6 5f       	subi	r30, 0xF6	; 246
    4422:	fd 4f       	sbci	r31, 0xFD	; 253
    4424:	80 81       	ld	r24, Z
    4426:	91 81       	ldd	r25, Z+1	; 0x01
    4428:	d8 01       	movw	r26, r16
    442a:	8d 93       	st	X+, r24
    442c:	9c 93       	st	X, r25
    442e:	6c 2d       	mov	r22, r12
    4430:	70 e0       	ldi	r23, 0x00	; 0
    4432:	84 e0       	ldi	r24, 0x04	; 4
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	dd d6       	rcall	.+3514   	; 0x51f2 <calloc>
    4438:	1c 01       	movw	r2, r24
    443a:	61 e0       	ldi	r22, 0x01	; 1
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	86 e0       	ldi	r24, 0x06	; 6
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	d7 d6       	rcall	.+3502   	; 0x51f2 <calloc>
    4444:	7c 01       	movw	r14, r24
    4446:	4c 2d       	mov	r20, r12
    4448:	b1 01       	movw	r22, r2
    444a:	2d d5       	rcall	.+2650   	; 0x4ea6 <fifo_init>
    444c:	f8 01       	movw	r30, r16
    444e:	f5 82       	std	Z+5, r15	; 0x05
    4450:	e4 82       	std	Z+4, r14	; 0x04
    4452:	6a 2d       	mov	r22, r10
    4454:	70 e0       	ldi	r23, 0x00	; 0
    4456:	84 e0       	ldi	r24, 0x04	; 4
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	cb d6       	rcall	.+3478   	; 0x51f2 <calloc>
    445c:	1c 01       	movw	r2, r24
    445e:	61 e0       	ldi	r22, 0x01	; 1
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	86 e0       	ldi	r24, 0x06	; 6
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	c5 d6       	rcall	.+3466   	; 0x51f2 <calloc>
    4468:	7c 01       	movw	r14, r24
    446a:	4a 2d       	mov	r20, r10
    446c:	b1 01       	movw	r22, r2
    446e:	1b d5       	rcall	.+2614   	; 0x4ea6 <fifo_init>
    4470:	d8 01       	movw	r26, r16
    4472:	13 96       	adiw	r26, 0x03	; 3
    4474:	fc 92       	st	X, r15
    4476:	ee 92       	st	-X, r14
    4478:	12 97       	sbiw	r26, 0x02	; 2
    447a:	17 96       	adiw	r26, 0x07	; 7
    447c:	9c 92       	st	X, r9
    447e:	8e 92       	st	-X, r8
    4480:	16 97       	sbiw	r26, 0x06	; 6
    4482:	ff b6       	in	r15, 0x3f	; 63
    4484:	f8 94       	cli
    4486:	ed 91       	ld	r30, X+
    4488:	fc 91       	ld	r31, X
    448a:	11 97       	sbiw	r26, 0x01	; 1
    448c:	36 97       	sbiw	r30, 0x06	; 6
    448e:	80 81       	ld	r24, Z
    4490:	82 60       	ori	r24, 0x02	; 2
    4492:	80 83       	st	Z, r24
    4494:	8d 90       	ld	r8, X+
    4496:	9c 90       	ld	r9, X
    4498:	c3 01       	movw	r24, r6
    449a:	b2 01       	movw	r22, r4
    449c:	0e 94 3f 1a 	call	0x347e	; 0x347e <__floatunsisf>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	51 e4       	ldi	r21, 0x41	; 65
    44a8:	14 d6       	rcall	.+3112   	; 0x50d2 <__mulsf3>
    44aa:	9b 01       	movw	r18, r22
    44ac:	ac 01       	movw	r20, r24
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	74 e2       	ldi	r23, 0x24	; 36
    44b2:	84 e7       	ldi	r24, 0x74	; 116
    44b4:	9b e4       	ldi	r25, 0x4B	; 75
    44b6:	7a d5       	rcall	.+2804   	; 0x4fac <__divsf3>
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e8       	ldi	r20, 0x80	; 128
    44be:	5f e3       	ldi	r21, 0x3F	; 63
    44c0:	0e d5       	rcall	.+2588   	; 0x4ede <__subsf3>
    44c2:	0e 94 13 1a 	call	0x3426	; 0x3426 <__fixunssfsi>
    44c6:	f4 01       	movw	r30, r8
    44c8:	32 97       	sbiw	r30, 0x02	; 2
    44ca:	60 83       	st	Z, r22
    44cc:	d8 01       	movw	r26, r16
    44ce:	ed 91       	ld	r30, X+
    44d0:	fc 91       	ld	r31, X
    44d2:	11 97       	sbiw	r26, 0x01	; 1
    44d4:	35 97       	sbiw	r30, 0x05	; 5
    44d6:	88 e9       	ldi	r24, 0x98	; 152
    44d8:	80 83       	st	Z, r24
    44da:	ed 91       	ld	r30, X+
    44dc:	fc 91       	ld	r31, X
    44de:	34 97       	sbiw	r30, 0x04	; 4
    44e0:	86 e0       	ldi	r24, 0x06	; 6
    44e2:	80 83       	st	Z, r24
    44e4:	ff be       	out	0x3f, r15	; 63
    44e6:	c8 01       	movw	r24, r16
    44e8:	df 91       	pop	r29
    44ea:	cf 91       	pop	r28
    44ec:	1f 91       	pop	r17
    44ee:	0f 91       	pop	r16
    44f0:	ff 90       	pop	r15
    44f2:	ef 90       	pop	r14
    44f4:	cf 90       	pop	r12
    44f6:	af 90       	pop	r10
    44f8:	9f 90       	pop	r9
    44fa:	8f 90       	pop	r8
    44fc:	7f 90       	pop	r7
    44fe:	6f 90       	pop	r6
    4500:	5f 90       	pop	r5
    4502:	4f 90       	pop	r4
    4504:	3f 90       	pop	r3
    4506:	2f 90       	pop	r2
    4508:	08 95       	ret

0000450a <serial_send_byte>:
    450a:	cf 93       	push	r28
    450c:	df 93       	push	r29
    450e:	ec 01       	movw	r28, r24
    4510:	ea 81       	ldd	r30, Y+2	; 0x02
    4512:	fb 81       	ldd	r31, Y+3	; 0x03
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	82 81       	ldd	r24, Z+2	; 0x02
    4518:	25 81       	ldd	r18, Z+5	; 0x05
    451a:	98 1b       	sub	r25, r24
    451c:	92 23       	and	r25, r18
    451e:	84 81       	ldd	r24, Z+4	; 0x04
    4520:	98 17       	cp	r25, r24
    4522:	a1 f0       	breq	.+40     	; 0x454c <serial_send_byte+0x42>
    4524:	93 81       	ldd	r25, Z+3	; 0x03
    4526:	26 95       	lsr	r18
    4528:	29 23       	and	r18, r25
    452a:	a0 81       	ld	r26, Z
    452c:	b1 81       	ldd	r27, Z+1	; 0x01
    452e:	a2 0f       	add	r26, r18
    4530:	b1 1d       	adc	r27, r1
    4532:	6c 93       	st	X, r22
    4534:	9f 5f       	subi	r25, 0xFF	; 255
    4536:	25 81       	ldd	r18, Z+5	; 0x05
    4538:	92 23       	and	r25, r18
    453a:	93 83       	std	Z+3, r25	; 0x03
    453c:	e8 81       	ld	r30, Y
    453e:	f9 81       	ldd	r31, Y+1	; 0x01
    4540:	35 97       	sbiw	r30, 0x05	; 5
    4542:	80 81       	ld	r24, Z
    4544:	80 62       	ori	r24, 0x20	; 32
    4546:	80 83       	st	Z, r24
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	01 c0       	rjmp	.+2      	; 0x454e <serial_send_byte+0x44>
    454c:	82 e0       	ldi	r24, 0x02	; 2
    454e:	df 91       	pop	r29
    4550:	cf 91       	pop	r28
    4552:	08 95       	ret

00004554 <serial_send_bytes>:
    4554:	ef 92       	push	r14
    4556:	ff 92       	push	r15
    4558:	0f 93       	push	r16
    455a:	1f 93       	push	r17
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	7c 01       	movw	r14, r24
    4562:	dc 01       	movw	r26, r24
    4564:	12 96       	adiw	r26, 0x02	; 2
    4566:	ed 91       	ld	r30, X+
    4568:	fc 91       	ld	r31, X
    456a:	13 97       	sbiw	r26, 0x03	; 3
    456c:	93 81       	ldd	r25, Z+3	; 0x03
    456e:	82 81       	ldd	r24, Z+2	; 0x02
    4570:	98 1b       	sub	r25, r24
    4572:	85 81       	ldd	r24, Z+5	; 0x05
    4574:	98 23       	and	r25, r24
    4576:	84 81       	ldd	r24, Z+4	; 0x04
    4578:	89 1b       	sub	r24, r25
    457a:	86 17       	cp	r24, r22
    457c:	98 f1       	brcs	.+102    	; 0x45e4 <serial_send_bytes+0x90>
    457e:	66 23       	and	r22, r22
    4580:	41 f1       	breq	.+80     	; 0x45d2 <serial_send_bytes+0x7e>
    4582:	84 2f       	mov	r24, r20
    4584:	95 2f       	mov	r25, r21
    4586:	dc 01       	movw	r26, r24
    4588:	61 50       	subi	r22, 0x01	; 1
    458a:	46 2f       	mov	r20, r22
    458c:	50 e0       	ldi	r21, 0x00	; 0
    458e:	4f 5f       	subi	r20, 0xFF	; 255
    4590:	5f 4f       	sbci	r21, 0xFF	; 255
    4592:	48 0f       	add	r20, r24
    4594:	59 1f       	adc	r21, r25
    4596:	e7 01       	movw	r28, r14
    4598:	ea 81       	ldd	r30, Y+2	; 0x02
    459a:	fb 81       	ldd	r31, Y+3	; 0x03
    459c:	93 81       	ldd	r25, Z+3	; 0x03
    459e:	82 81       	ldd	r24, Z+2	; 0x02
    45a0:	25 81       	ldd	r18, Z+5	; 0x05
    45a2:	98 1b       	sub	r25, r24
    45a4:	92 23       	and	r25, r18
    45a6:	84 81       	ldd	r24, Z+4	; 0x04
    45a8:	98 17       	cp	r25, r24
    45aa:	79 f0       	breq	.+30     	; 0x45ca <serial_send_bytes+0x76>
    45ac:	8c 91       	ld	r24, X
    45ae:	93 81       	ldd	r25, Z+3	; 0x03
    45b0:	26 95       	lsr	r18
    45b2:	29 23       	and	r18, r25
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	8b 01       	movw	r16, r22
    45ba:	02 0f       	add	r16, r18
    45bc:	11 1d       	adc	r17, r1
    45be:	e8 01       	movw	r28, r16
    45c0:	88 83       	st	Y, r24
    45c2:	9f 5f       	subi	r25, 0xFF	; 255
    45c4:	85 81       	ldd	r24, Z+5	; 0x05
    45c6:	98 23       	and	r25, r24
    45c8:	93 83       	std	Z+3, r25	; 0x03
    45ca:	11 96       	adiw	r26, 0x01	; 1
    45cc:	a4 17       	cp	r26, r20
    45ce:	b5 07       	cpc	r27, r21
    45d0:	11 f7       	brne	.-60     	; 0x4596 <serial_send_bytes+0x42>
    45d2:	d7 01       	movw	r26, r14
    45d4:	ed 91       	ld	r30, X+
    45d6:	fc 91       	ld	r31, X
    45d8:	35 97       	sbiw	r30, 0x05	; 5
    45da:	80 81       	ld	r24, Z
    45dc:	80 62       	ori	r24, 0x20	; 32
    45de:	80 83       	st	Z, r24
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	01 c0       	rjmp	.+2      	; 0x45e6 <serial_send_bytes+0x92>
    45e4:	82 e0       	ldi	r24, 0x02	; 2
    45e6:	df 91       	pop	r29
    45e8:	cf 91       	pop	r28
    45ea:	1f 91       	pop	r17
    45ec:	0f 91       	pop	r16
    45ee:	ff 90       	pop	r15
    45f0:	ef 90       	pop	r14
    45f2:	08 95       	ret

000045f4 <serial_get_byte>:
    45f4:	dc 01       	movw	r26, r24
    45f6:	14 96       	adiw	r26, 0x04	; 4
    45f8:	ed 91       	ld	r30, X+
    45fa:	fc 91       	ld	r31, X
    45fc:	15 97       	sbiw	r26, 0x05	; 5
    45fe:	93 81       	ldd	r25, Z+3	; 0x03
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	98 17       	cp	r25, r24
    4604:	89 f0       	breq	.+34     	; 0x4628 <serial_get_byte+0x34>
    4606:	92 81       	ldd	r25, Z+2	; 0x02
    4608:	85 81       	ldd	r24, Z+5	; 0x05
    460a:	86 95       	lsr	r24
    460c:	89 23       	and	r24, r25
    460e:	a0 81       	ld	r26, Z
    4610:	b1 81       	ldd	r27, Z+1	; 0x01
    4612:	a8 0f       	add	r26, r24
    4614:	b1 1d       	adc	r27, r1
    4616:	8c 91       	ld	r24, X
    4618:	db 01       	movw	r26, r22
    461a:	8c 93       	st	X, r24
    461c:	9f 5f       	subi	r25, 0xFF	; 255
    461e:	85 81       	ldd	r24, Z+5	; 0x05
    4620:	98 23       	and	r25, r24
    4622:	92 83       	std	Z+2, r25	; 0x02
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	08 95       	ret
    4628:	83 e0       	ldi	r24, 0x03	; 3
    462a:	08 95       	ret

0000462c <__vector_25>:
    462c:	1f 92       	push	r1
    462e:	0f 92       	push	r0
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	0f 92       	push	r0
    4634:	11 24       	eor	r1, r1
    4636:	0b b6       	in	r0, 0x3b	; 59
    4638:	0f 92       	push	r0
    463a:	2f 93       	push	r18
    463c:	3f 93       	push	r19
    463e:	4f 93       	push	r20
    4640:	5f 93       	push	r21
    4642:	6f 93       	push	r22
    4644:	7f 93       	push	r23
    4646:	8f 93       	push	r24
    4648:	9f 93       	push	r25
    464a:	af 93       	push	r26
    464c:	bf 93       	push	r27
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
    4652:	ef 93       	push	r30
    4654:	ff 93       	push	r31
    4656:	a0 91 bf 19 	lds	r26, 0x19BF	; 0x8019bf <_ser_handle>
    465a:	b0 91 c0 19 	lds	r27, 0x19C0	; 0x8019c0 <_ser_handle+0x1>
    465e:	10 97       	sbiw	r26, 0x00	; 0
    4660:	11 f1       	breq	.+68     	; 0x46a6 <__vector_25+0x7a>
    4662:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4666:	14 96       	adiw	r26, 0x04	; 4
    4668:	ed 91       	ld	r30, X+
    466a:	fc 91       	ld	r31, X
    466c:	15 97       	sbiw	r26, 0x05	; 5
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	82 81       	ldd	r24, Z+2	; 0x02
    4672:	25 81       	ldd	r18, Z+5	; 0x05
    4674:	98 1b       	sub	r25, r24
    4676:	92 23       	and	r25, r18
    4678:	84 81       	ldd	r24, Z+4	; 0x04
    467a:	98 17       	cp	r25, r24
    467c:	61 f0       	breq	.+24     	; 0x4696 <__vector_25+0x6a>
    467e:	83 81       	ldd	r24, Z+3	; 0x03
    4680:	26 95       	lsr	r18
    4682:	28 23       	and	r18, r24
    4684:	c0 81       	ld	r28, Z
    4686:	d1 81       	ldd	r29, Z+1	; 0x01
    4688:	c2 0f       	add	r28, r18
    468a:	d1 1d       	adc	r29, r1
    468c:	68 83       	st	Y, r22
    468e:	8f 5f       	subi	r24, 0xFF	; 255
    4690:	95 81       	ldd	r25, Z+5	; 0x05
    4692:	89 23       	and	r24, r25
    4694:	83 83       	std	Z+3, r24	; 0x03
    4696:	16 96       	adiw	r26, 0x06	; 6
    4698:	ed 91       	ld	r30, X+
    469a:	fc 91       	ld	r31, X
    469c:	17 97       	sbiw	r26, 0x07	; 7
    469e:	30 97       	sbiw	r30, 0x00	; 0
    46a0:	11 f0       	breq	.+4      	; 0x46a6 <__vector_25+0x7a>
    46a2:	cd 01       	movw	r24, r26
    46a4:	19 95       	eicall
    46a6:	ff 91       	pop	r31
    46a8:	ef 91       	pop	r30
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	bf 91       	pop	r27
    46b0:	af 91       	pop	r26
    46b2:	9f 91       	pop	r25
    46b4:	8f 91       	pop	r24
    46b6:	7f 91       	pop	r23
    46b8:	6f 91       	pop	r22
    46ba:	5f 91       	pop	r21
    46bc:	4f 91       	pop	r20
    46be:	3f 91       	pop	r19
    46c0:	2f 91       	pop	r18
    46c2:	0f 90       	pop	r0
    46c4:	0b be       	out	0x3b, r0	; 59
    46c6:	0f 90       	pop	r0
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	0f 90       	pop	r0
    46cc:	1f 90       	pop	r1
    46ce:	18 95       	reti

000046d0 <__vector_26>:
    46d0:	1f 92       	push	r1
    46d2:	0f 92       	push	r0
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	0f 92       	push	r0
    46d8:	11 24       	eor	r1, r1
    46da:	0b b6       	in	r0, 0x3b	; 59
    46dc:	0f 92       	push	r0
    46de:	2f 93       	push	r18
    46e0:	8f 93       	push	r24
    46e2:	9f 93       	push	r25
    46e4:	af 93       	push	r26
    46e6:	bf 93       	push	r27
    46e8:	ef 93       	push	r30
    46ea:	ff 93       	push	r31
    46ec:	e0 91 bf 19 	lds	r30, 0x19BF	; 0x8019bf <_ser_handle>
    46f0:	f0 91 c0 19 	lds	r31, 0x19C0	; 0x8019c0 <_ser_handle+0x1>
    46f4:	30 97       	sbiw	r30, 0x00	; 0
    46f6:	b9 f0       	breq	.+46     	; 0x4726 <__vector_26+0x56>
    46f8:	02 80       	ldd	r0, Z+2	; 0x02
    46fa:	f3 81       	ldd	r31, Z+3	; 0x03
    46fc:	e0 2d       	mov	r30, r0
    46fe:	93 81       	ldd	r25, Z+3	; 0x03
    4700:	82 81       	ldd	r24, Z+2	; 0x02
    4702:	98 17       	cp	r25, r24
    4704:	b1 f0       	breq	.+44     	; 0x4732 <__vector_26+0x62>
    4706:	92 81       	ldd	r25, Z+2	; 0x02
    4708:	85 81       	ldd	r24, Z+5	; 0x05
    470a:	28 2f       	mov	r18, r24
    470c:	26 95       	lsr	r18
    470e:	29 23       	and	r18, r25
    4710:	a0 81       	ld	r26, Z
    4712:	b1 81       	ldd	r27, Z+1	; 0x01
    4714:	a2 0f       	add	r26, r18
    4716:	b1 1d       	adc	r27, r1
    4718:	2c 91       	ld	r18, X
    471a:	9f 5f       	subi	r25, 0xFF	; 255
    471c:	89 23       	and	r24, r25
    471e:	82 83       	std	Z+2, r24	; 0x02
    4720:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4724:	0b c0       	rjmp	.+22     	; 0x473c <__vector_26+0x6c>
    4726:	e1 ec       	ldi	r30, 0xC1	; 193
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	80 81       	ld	r24, Z
    472c:	8f 7d       	andi	r24, 0xDF	; 223
    472e:	80 83       	st	Z, r24
    4730:	05 c0       	rjmp	.+10     	; 0x473c <__vector_26+0x6c>
    4732:	e1 ec       	ldi	r30, 0xC1	; 193
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	8f 7d       	andi	r24, 0xDF	; 223
    473a:	80 83       	st	Z, r24
    473c:	ff 91       	pop	r31
    473e:	ef 91       	pop	r30
    4740:	bf 91       	pop	r27
    4742:	af 91       	pop	r26
    4744:	9f 91       	pop	r25
    4746:	8f 91       	pop	r24
    4748:	2f 91       	pop	r18
    474a:	0f 90       	pop	r0
    474c:	0b be       	out	0x3b, r0	; 59
    474e:	0f 90       	pop	r0
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	0f 90       	pop	r0
    4754:	1f 90       	pop	r1
    4756:	18 95       	reti

00004758 <__vector_36>:
    4758:	1f 92       	push	r1
    475a:	0f 92       	push	r0
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	0f 92       	push	r0
    4760:	11 24       	eor	r1, r1
    4762:	0b b6       	in	r0, 0x3b	; 59
    4764:	0f 92       	push	r0
    4766:	2f 93       	push	r18
    4768:	3f 93       	push	r19
    476a:	4f 93       	push	r20
    476c:	5f 93       	push	r21
    476e:	6f 93       	push	r22
    4770:	7f 93       	push	r23
    4772:	8f 93       	push	r24
    4774:	9f 93       	push	r25
    4776:	af 93       	push	r26
    4778:	bf 93       	push	r27
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29
    477e:	ef 93       	push	r30
    4780:	ff 93       	push	r31
    4782:	a0 91 c1 19 	lds	r26, 0x19C1	; 0x8019c1 <_ser_handle+0x2>
    4786:	b0 91 c2 19 	lds	r27, 0x19C2	; 0x8019c2 <_ser_handle+0x3>
    478a:	10 97       	sbiw	r26, 0x00	; 0
    478c:	11 f1       	breq	.+68     	; 0x47d2 <__vector_36+0x7a>
    478e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4792:	14 96       	adiw	r26, 0x04	; 4
    4794:	ed 91       	ld	r30, X+
    4796:	fc 91       	ld	r31, X
    4798:	15 97       	sbiw	r26, 0x05	; 5
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	82 81       	ldd	r24, Z+2	; 0x02
    479e:	25 81       	ldd	r18, Z+5	; 0x05
    47a0:	98 1b       	sub	r25, r24
    47a2:	92 23       	and	r25, r18
    47a4:	84 81       	ldd	r24, Z+4	; 0x04
    47a6:	98 17       	cp	r25, r24
    47a8:	61 f0       	breq	.+24     	; 0x47c2 <__vector_36+0x6a>
    47aa:	83 81       	ldd	r24, Z+3	; 0x03
    47ac:	26 95       	lsr	r18
    47ae:	28 23       	and	r18, r24
    47b0:	c0 81       	ld	r28, Z
    47b2:	d1 81       	ldd	r29, Z+1	; 0x01
    47b4:	c2 0f       	add	r28, r18
    47b6:	d1 1d       	adc	r29, r1
    47b8:	68 83       	st	Y, r22
    47ba:	8f 5f       	subi	r24, 0xFF	; 255
    47bc:	95 81       	ldd	r25, Z+5	; 0x05
    47be:	89 23       	and	r24, r25
    47c0:	83 83       	std	Z+3, r24	; 0x03
    47c2:	16 96       	adiw	r26, 0x06	; 6
    47c4:	ed 91       	ld	r30, X+
    47c6:	fc 91       	ld	r31, X
    47c8:	17 97       	sbiw	r26, 0x07	; 7
    47ca:	30 97       	sbiw	r30, 0x00	; 0
    47cc:	11 f0       	breq	.+4      	; 0x47d2 <__vector_36+0x7a>
    47ce:	cd 01       	movw	r24, r26
    47d0:	19 95       	eicall
    47d2:	ff 91       	pop	r31
    47d4:	ef 91       	pop	r30
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	bf 91       	pop	r27
    47dc:	af 91       	pop	r26
    47de:	9f 91       	pop	r25
    47e0:	8f 91       	pop	r24
    47e2:	7f 91       	pop	r23
    47e4:	6f 91       	pop	r22
    47e6:	5f 91       	pop	r21
    47e8:	4f 91       	pop	r20
    47ea:	3f 91       	pop	r19
    47ec:	2f 91       	pop	r18
    47ee:	0f 90       	pop	r0
    47f0:	0b be       	out	0x3b, r0	; 59
    47f2:	0f 90       	pop	r0
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	0f 90       	pop	r0
    47f8:	1f 90       	pop	r1
    47fa:	18 95       	reti

000047fc <__vector_37>:
    47fc:	1f 92       	push	r1
    47fe:	0f 92       	push	r0
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	0f 92       	push	r0
    4804:	11 24       	eor	r1, r1
    4806:	0b b6       	in	r0, 0x3b	; 59
    4808:	0f 92       	push	r0
    480a:	2f 93       	push	r18
    480c:	8f 93       	push	r24
    480e:	9f 93       	push	r25
    4810:	af 93       	push	r26
    4812:	bf 93       	push	r27
    4814:	ef 93       	push	r30
    4816:	ff 93       	push	r31
    4818:	e0 91 c1 19 	lds	r30, 0x19C1	; 0x8019c1 <_ser_handle+0x2>
    481c:	f0 91 c2 19 	lds	r31, 0x19C2	; 0x8019c2 <_ser_handle+0x3>
    4820:	30 97       	sbiw	r30, 0x00	; 0
    4822:	b9 f0       	breq	.+46     	; 0x4852 <__vector_37+0x56>
    4824:	02 80       	ldd	r0, Z+2	; 0x02
    4826:	f3 81       	ldd	r31, Z+3	; 0x03
    4828:	e0 2d       	mov	r30, r0
    482a:	93 81       	ldd	r25, Z+3	; 0x03
    482c:	82 81       	ldd	r24, Z+2	; 0x02
    482e:	98 17       	cp	r25, r24
    4830:	b1 f0       	breq	.+44     	; 0x485e <__vector_37+0x62>
    4832:	92 81       	ldd	r25, Z+2	; 0x02
    4834:	85 81       	ldd	r24, Z+5	; 0x05
    4836:	28 2f       	mov	r18, r24
    4838:	26 95       	lsr	r18
    483a:	29 23       	and	r18, r25
    483c:	a0 81       	ld	r26, Z
    483e:	b1 81       	ldd	r27, Z+1	; 0x01
    4840:	a2 0f       	add	r26, r18
    4842:	b1 1d       	adc	r27, r1
    4844:	2c 91       	ld	r18, X
    4846:	9f 5f       	subi	r25, 0xFF	; 255
    4848:	89 23       	and	r24, r25
    484a:	82 83       	std	Z+2, r24	; 0x02
    484c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4850:	0b c0       	rjmp	.+22     	; 0x4868 <__vector_37+0x6c>
    4852:	e9 ec       	ldi	r30, 0xC9	; 201
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	80 81       	ld	r24, Z
    4858:	8f 7d       	andi	r24, 0xDF	; 223
    485a:	80 83       	st	Z, r24
    485c:	05 c0       	rjmp	.+10     	; 0x4868 <__vector_37+0x6c>
    485e:	e9 ec       	ldi	r30, 0xC9	; 201
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	8f 7d       	andi	r24, 0xDF	; 223
    4866:	80 83       	st	Z, r24
    4868:	ff 91       	pop	r31
    486a:	ef 91       	pop	r30
    486c:	bf 91       	pop	r27
    486e:	af 91       	pop	r26
    4870:	9f 91       	pop	r25
    4872:	8f 91       	pop	r24
    4874:	2f 91       	pop	r18
    4876:	0f 90       	pop	r0
    4878:	0b be       	out	0x3b, r0	; 59
    487a:	0f 90       	pop	r0
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	0f 90       	pop	r0
    4880:	1f 90       	pop	r1
    4882:	18 95       	reti

00004884 <__vector_51>:
    4884:	1f 92       	push	r1
    4886:	0f 92       	push	r0
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	0f 92       	push	r0
    488c:	11 24       	eor	r1, r1
    488e:	0b b6       	in	r0, 0x3b	; 59
    4890:	0f 92       	push	r0
    4892:	2f 93       	push	r18
    4894:	3f 93       	push	r19
    4896:	4f 93       	push	r20
    4898:	5f 93       	push	r21
    489a:	6f 93       	push	r22
    489c:	7f 93       	push	r23
    489e:	8f 93       	push	r24
    48a0:	9f 93       	push	r25
    48a2:	af 93       	push	r26
    48a4:	bf 93       	push	r27
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	ef 93       	push	r30
    48ac:	ff 93       	push	r31
    48ae:	a0 91 c3 19 	lds	r26, 0x19C3	; 0x8019c3 <_ser_handle+0x4>
    48b2:	b0 91 c4 19 	lds	r27, 0x19C4	; 0x8019c4 <_ser_handle+0x5>
    48b6:	10 97       	sbiw	r26, 0x00	; 0
    48b8:	11 f1       	breq	.+68     	; 0x48fe <__vector_51+0x7a>
    48ba:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    48be:	14 96       	adiw	r26, 0x04	; 4
    48c0:	ed 91       	ld	r30, X+
    48c2:	fc 91       	ld	r31, X
    48c4:	15 97       	sbiw	r26, 0x05	; 5
    48c6:	93 81       	ldd	r25, Z+3	; 0x03
    48c8:	82 81       	ldd	r24, Z+2	; 0x02
    48ca:	25 81       	ldd	r18, Z+5	; 0x05
    48cc:	98 1b       	sub	r25, r24
    48ce:	92 23       	and	r25, r18
    48d0:	84 81       	ldd	r24, Z+4	; 0x04
    48d2:	98 17       	cp	r25, r24
    48d4:	61 f0       	breq	.+24     	; 0x48ee <__vector_51+0x6a>
    48d6:	83 81       	ldd	r24, Z+3	; 0x03
    48d8:	26 95       	lsr	r18
    48da:	28 23       	and	r18, r24
    48dc:	c0 81       	ld	r28, Z
    48de:	d1 81       	ldd	r29, Z+1	; 0x01
    48e0:	c2 0f       	add	r28, r18
    48e2:	d1 1d       	adc	r29, r1
    48e4:	68 83       	st	Y, r22
    48e6:	8f 5f       	subi	r24, 0xFF	; 255
    48e8:	95 81       	ldd	r25, Z+5	; 0x05
    48ea:	89 23       	and	r24, r25
    48ec:	83 83       	std	Z+3, r24	; 0x03
    48ee:	16 96       	adiw	r26, 0x06	; 6
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	17 97       	sbiw	r26, 0x07	; 7
    48f6:	30 97       	sbiw	r30, 0x00	; 0
    48f8:	11 f0       	breq	.+4      	; 0x48fe <__vector_51+0x7a>
    48fa:	cd 01       	movw	r24, r26
    48fc:	19 95       	eicall
    48fe:	ff 91       	pop	r31
    4900:	ef 91       	pop	r30
    4902:	df 91       	pop	r29
    4904:	cf 91       	pop	r28
    4906:	bf 91       	pop	r27
    4908:	af 91       	pop	r26
    490a:	9f 91       	pop	r25
    490c:	8f 91       	pop	r24
    490e:	7f 91       	pop	r23
    4910:	6f 91       	pop	r22
    4912:	5f 91       	pop	r21
    4914:	4f 91       	pop	r20
    4916:	3f 91       	pop	r19
    4918:	2f 91       	pop	r18
    491a:	0f 90       	pop	r0
    491c:	0b be       	out	0x3b, r0	; 59
    491e:	0f 90       	pop	r0
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	0f 90       	pop	r0
    4924:	1f 90       	pop	r1
    4926:	18 95       	reti

00004928 <__vector_52>:
    4928:	1f 92       	push	r1
    492a:	0f 92       	push	r0
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	0f 92       	push	r0
    4930:	11 24       	eor	r1, r1
    4932:	0b b6       	in	r0, 0x3b	; 59
    4934:	0f 92       	push	r0
    4936:	2f 93       	push	r18
    4938:	8f 93       	push	r24
    493a:	9f 93       	push	r25
    493c:	af 93       	push	r26
    493e:	bf 93       	push	r27
    4940:	ef 93       	push	r30
    4942:	ff 93       	push	r31
    4944:	e0 91 c3 19 	lds	r30, 0x19C3	; 0x8019c3 <_ser_handle+0x4>
    4948:	f0 91 c4 19 	lds	r31, 0x19C4	; 0x8019c4 <_ser_handle+0x5>
    494c:	30 97       	sbiw	r30, 0x00	; 0
    494e:	b9 f0       	breq	.+46     	; 0x497e <__vector_52+0x56>
    4950:	02 80       	ldd	r0, Z+2	; 0x02
    4952:	f3 81       	ldd	r31, Z+3	; 0x03
    4954:	e0 2d       	mov	r30, r0
    4956:	93 81       	ldd	r25, Z+3	; 0x03
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	98 17       	cp	r25, r24
    495c:	b1 f0       	breq	.+44     	; 0x498a <__vector_52+0x62>
    495e:	92 81       	ldd	r25, Z+2	; 0x02
    4960:	85 81       	ldd	r24, Z+5	; 0x05
    4962:	28 2f       	mov	r18, r24
    4964:	26 95       	lsr	r18
    4966:	29 23       	and	r18, r25
    4968:	a0 81       	ld	r26, Z
    496a:	b1 81       	ldd	r27, Z+1	; 0x01
    496c:	a2 0f       	add	r26, r18
    496e:	b1 1d       	adc	r27, r1
    4970:	2c 91       	ld	r18, X
    4972:	9f 5f       	subi	r25, 0xFF	; 255
    4974:	89 23       	and	r24, r25
    4976:	82 83       	std	Z+2, r24	; 0x02
    4978:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    497c:	0b c0       	rjmp	.+22     	; 0x4994 <__vector_52+0x6c>
    497e:	e1 ed       	ldi	r30, 0xD1	; 209
    4980:	f0 e0       	ldi	r31, 0x00	; 0
    4982:	80 81       	ld	r24, Z
    4984:	8f 7d       	andi	r24, 0xDF	; 223
    4986:	80 83       	st	Z, r24
    4988:	05 c0       	rjmp	.+10     	; 0x4994 <__vector_52+0x6c>
    498a:	e1 ed       	ldi	r30, 0xD1	; 209
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	80 81       	ld	r24, Z
    4990:	8f 7d       	andi	r24, 0xDF	; 223
    4992:	80 83       	st	Z, r24
    4994:	ff 91       	pop	r31
    4996:	ef 91       	pop	r30
    4998:	bf 91       	pop	r27
    499a:	af 91       	pop	r26
    499c:	9f 91       	pop	r25
    499e:	8f 91       	pop	r24
    49a0:	2f 91       	pop	r18
    49a2:	0f 90       	pop	r0
    49a4:	0b be       	out	0x3b, r0	; 59
    49a6:	0f 90       	pop	r0
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	0f 90       	pop	r0
    49ac:	1f 90       	pop	r1
    49ae:	18 95       	reti

000049b0 <__vector_54>:
    49b0:	1f 92       	push	r1
    49b2:	0f 92       	push	r0
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	0f 92       	push	r0
    49b8:	11 24       	eor	r1, r1
    49ba:	0b b6       	in	r0, 0x3b	; 59
    49bc:	0f 92       	push	r0
    49be:	2f 93       	push	r18
    49c0:	3f 93       	push	r19
    49c2:	4f 93       	push	r20
    49c4:	5f 93       	push	r21
    49c6:	6f 93       	push	r22
    49c8:	7f 93       	push	r23
    49ca:	8f 93       	push	r24
    49cc:	9f 93       	push	r25
    49ce:	af 93       	push	r26
    49d0:	bf 93       	push	r27
    49d2:	cf 93       	push	r28
    49d4:	df 93       	push	r29
    49d6:	ef 93       	push	r30
    49d8:	ff 93       	push	r31
    49da:	a0 91 c5 19 	lds	r26, 0x19C5	; 0x8019c5 <_ser_handle+0x6>
    49de:	b0 91 c6 19 	lds	r27, 0x19C6	; 0x8019c6 <_ser_handle+0x7>
    49e2:	10 97       	sbiw	r26, 0x00	; 0
    49e4:	11 f1       	breq	.+68     	; 0x4a2a <__vector_54+0x7a>
    49e6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    49ea:	14 96       	adiw	r26, 0x04	; 4
    49ec:	ed 91       	ld	r30, X+
    49ee:	fc 91       	ld	r31, X
    49f0:	15 97       	sbiw	r26, 0x05	; 5
    49f2:	93 81       	ldd	r25, Z+3	; 0x03
    49f4:	82 81       	ldd	r24, Z+2	; 0x02
    49f6:	25 81       	ldd	r18, Z+5	; 0x05
    49f8:	98 1b       	sub	r25, r24
    49fa:	92 23       	and	r25, r18
    49fc:	84 81       	ldd	r24, Z+4	; 0x04
    49fe:	98 17       	cp	r25, r24
    4a00:	61 f0       	breq	.+24     	; 0x4a1a <__vector_54+0x6a>
    4a02:	83 81       	ldd	r24, Z+3	; 0x03
    4a04:	26 95       	lsr	r18
    4a06:	28 23       	and	r18, r24
    4a08:	c0 81       	ld	r28, Z
    4a0a:	d1 81       	ldd	r29, Z+1	; 0x01
    4a0c:	c2 0f       	add	r28, r18
    4a0e:	d1 1d       	adc	r29, r1
    4a10:	68 83       	st	Y, r22
    4a12:	8f 5f       	subi	r24, 0xFF	; 255
    4a14:	95 81       	ldd	r25, Z+5	; 0x05
    4a16:	89 23       	and	r24, r25
    4a18:	83 83       	std	Z+3, r24	; 0x03
    4a1a:	16 96       	adiw	r26, 0x06	; 6
    4a1c:	ed 91       	ld	r30, X+
    4a1e:	fc 91       	ld	r31, X
    4a20:	17 97       	sbiw	r26, 0x07	; 7
    4a22:	30 97       	sbiw	r30, 0x00	; 0
    4a24:	11 f0       	breq	.+4      	; 0x4a2a <__vector_54+0x7a>
    4a26:	cd 01       	movw	r24, r26
    4a28:	19 95       	eicall
    4a2a:	ff 91       	pop	r31
    4a2c:	ef 91       	pop	r30
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	bf 91       	pop	r27
    4a34:	af 91       	pop	r26
    4a36:	9f 91       	pop	r25
    4a38:	8f 91       	pop	r24
    4a3a:	7f 91       	pop	r23
    4a3c:	6f 91       	pop	r22
    4a3e:	5f 91       	pop	r21
    4a40:	4f 91       	pop	r20
    4a42:	3f 91       	pop	r19
    4a44:	2f 91       	pop	r18
    4a46:	0f 90       	pop	r0
    4a48:	0b be       	out	0x3b, r0	; 59
    4a4a:	0f 90       	pop	r0
    4a4c:	0f be       	out	0x3f, r0	; 63
    4a4e:	0f 90       	pop	r0
    4a50:	1f 90       	pop	r1
    4a52:	18 95       	reti

00004a54 <__vector_55>:
    4a54:	1f 92       	push	r1
    4a56:	0f 92       	push	r0
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	0f 92       	push	r0
    4a5c:	11 24       	eor	r1, r1
    4a5e:	0b b6       	in	r0, 0x3b	; 59
    4a60:	0f 92       	push	r0
    4a62:	2f 93       	push	r18
    4a64:	8f 93       	push	r24
    4a66:	9f 93       	push	r25
    4a68:	af 93       	push	r26
    4a6a:	bf 93       	push	r27
    4a6c:	ef 93       	push	r30
    4a6e:	ff 93       	push	r31
    4a70:	e0 91 c5 19 	lds	r30, 0x19C5	; 0x8019c5 <_ser_handle+0x6>
    4a74:	f0 91 c6 19 	lds	r31, 0x19C6	; 0x8019c6 <_ser_handle+0x7>
    4a78:	30 97       	sbiw	r30, 0x00	; 0
    4a7a:	b9 f0       	breq	.+46     	; 0x4aaa <__vector_55+0x56>
    4a7c:	02 80       	ldd	r0, Z+2	; 0x02
    4a7e:	f3 81       	ldd	r31, Z+3	; 0x03
    4a80:	e0 2d       	mov	r30, r0
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	82 81       	ldd	r24, Z+2	; 0x02
    4a86:	98 17       	cp	r25, r24
    4a88:	b1 f0       	breq	.+44     	; 0x4ab6 <__vector_55+0x62>
    4a8a:	92 81       	ldd	r25, Z+2	; 0x02
    4a8c:	85 81       	ldd	r24, Z+5	; 0x05
    4a8e:	28 2f       	mov	r18, r24
    4a90:	26 95       	lsr	r18
    4a92:	29 23       	and	r18, r25
    4a94:	a0 81       	ld	r26, Z
    4a96:	b1 81       	ldd	r27, Z+1	; 0x01
    4a98:	a2 0f       	add	r26, r18
    4a9a:	b1 1d       	adc	r27, r1
    4a9c:	2c 91       	ld	r18, X
    4a9e:	9f 5f       	subi	r25, 0xFF	; 255
    4aa0:	89 23       	and	r24, r25
    4aa2:	82 83       	std	Z+2, r24	; 0x02
    4aa4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4aa8:	0b c0       	rjmp	.+22     	; 0x4ac0 <__vector_55+0x6c>
    4aaa:	e1 e3       	ldi	r30, 0x31	; 49
    4aac:	f1 e0       	ldi	r31, 0x01	; 1
    4aae:	80 81       	ld	r24, Z
    4ab0:	8f 7d       	andi	r24, 0xDF	; 223
    4ab2:	80 83       	st	Z, r24
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <__vector_55+0x6c>
    4ab6:	e1 e3       	ldi	r30, 0x31	; 49
    4ab8:	f1 e0       	ldi	r31, 0x01	; 1
    4aba:	80 81       	ld	r24, Z
    4abc:	8f 7d       	andi	r24, 0xDF	; 223
    4abe:	80 83       	st	Z, r24
    4ac0:	ff 91       	pop	r31
    4ac2:	ef 91       	pop	r30
    4ac4:	bf 91       	pop	r27
    4ac6:	af 91       	pop	r26
    4ac8:	9f 91       	pop	r25
    4aca:	8f 91       	pop	r24
    4acc:	2f 91       	pop	r18
    4ace:	0f 90       	pop	r0
    4ad0:	0b be       	out	0x3b, r0	; 59
    4ad2:	0f 90       	pop	r0
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	0f 90       	pop	r0
    4ad8:	1f 90       	pop	r1
    4ada:	18 95       	reti

00004adc <usart_getchar>:
    4adc:	cf 93       	push	r28
    4ade:	df 93       	push	r29
    4ae0:	1f 92       	push	r1
    4ae2:	cd b7       	in	r28, 0x3d	; 61
    4ae4:	de b7       	in	r29, 0x3e	; 62
    4ae6:	be 01       	movw	r22, r28
    4ae8:	6f 5f       	subi	r22, 0xFF	; 255
    4aea:	7f 4f       	sbci	r23, 0xFF	; 255
    4aec:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <_com_serial_instance>
    4af0:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <_com_serial_instance+0x1>
    4af4:	7f dd       	rcall	.-1282   	; 0x45f4 <serial_get_byte>
    4af6:	81 11       	cpse	r24, r1
    4af8:	f6 cf       	rjmp	.-20     	; 0x4ae6 <usart_getchar+0xa>
    4afa:	89 81       	ldd	r24, Y+1	; 0x01
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	0f 90       	pop	r0
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	08 95       	ret

00004b06 <usart_putchar>:
    4b06:	68 2f       	mov	r22, r24
    4b08:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <_com_serial_instance>
    4b0c:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <_com_serial_instance+0x1>
    4b10:	fc dc       	rcall	.-1544   	; 0x450a <serial_send_byte>
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	08 95       	ret

00004b18 <stdioCreate>:
    4b18:	8f 92       	push	r8
    4b1a:	9f 92       	push	r9
    4b1c:	af 92       	push	r10
    4b1e:	cf 92       	push	r12
    4b20:	ef 92       	push	r14
    4b22:	0f 93       	push	r16
    4b24:	81 2c       	mov	r8, r1
    4b26:	91 2c       	mov	r9, r1
    4b28:	68 94       	set
    4b2a:	aa 24       	eor	r10, r10
    4b2c:	a7 f8       	bld	r10, 7
    4b2e:	68 94       	set
    4b30:	cc 24       	eor	r12, r12
    4b32:	c7 f8       	bld	r12, 7
    4b34:	e1 2c       	mov	r14, r1
    4b36:	00 e0       	ldi	r16, 0x00	; 0
    4b38:	23 e0       	ldi	r18, 0x03	; 3
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	51 ee       	ldi	r21, 0xE1	; 225
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	4b dc       	rcall	.-1898   	; 0x43da <serial_new_instance>
    4b44:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <_com_serial_instance+0x1>
    4b48:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <_com_serial_instance>
    4b4c:	e5 e0       	ldi	r30, 0x05	; 5
    4b4e:	fa e1       	ldi	r31, 0x1A	; 26
    4b50:	82 e1       	ldi	r24, 0x12	; 18
    4b52:	92 e0       	ldi	r25, 0x02	; 2
    4b54:	91 83       	std	Z+1, r25	; 0x01
    4b56:	80 83       	st	Z, r24
    4b58:	93 83       	std	Z+3, r25	; 0x03
    4b5a:	82 83       	std	Z+2, r24	; 0x02
    4b5c:	0f 91       	pop	r16
    4b5e:	ef 90       	pop	r14
    4b60:	cf 90       	pop	r12
    4b62:	af 90       	pop	r10
    4b64:	9f 90       	pop	r9
    4b66:	8f 90       	pop	r8
    4b68:	08 95       	ret

00004b6a <_initTwiInterface>:
    4b6a:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_twiIsInitiated>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	0c c0       	rjmp	.+24     	; 0x4b8a <_initTwiInterface+0x20>
    4b72:	8c e0       	ldi	r24, 0x0C	; 12
    4b74:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4b78:	8f ef       	ldi	r24, 0xFF	; 255
    4b7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4b7e:	84 e0       	ldi	r24, 0x04	; 4
    4b80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <_twiIsInitiated>
    4b8a:	08 95       	ret

00004b8c <twiCreate>:
    4b8c:	af 92       	push	r10
    4b8e:	bf 92       	push	r11
    4b90:	cf 92       	push	r12
    4b92:	df 92       	push	r13
    4b94:	ef 92       	push	r14
    4b96:	ff 92       	push	r15
    4b98:	0f 93       	push	r16
    4b9a:	1f 93       	push	r17
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	a8 2e       	mov	r10, r24
    4ba2:	b6 2e       	mov	r11, r22
    4ba4:	69 01       	movw	r12, r18
    4ba6:	7a 01       	movw	r14, r20
    4ba8:	84 e0       	ldi	r24, 0x04	; 4
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	3c d3       	rcall	.+1656   	; 0x5226 <malloc>
    4bae:	ec 01       	movw	r28, r24
    4bb0:	89 2b       	or	r24, r25
    4bb2:	61 f1       	breq	.+88     	; 0x4c0c <twiCreate+0x80>
    4bb4:	a8 82       	st	Y, r10
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	b8 12       	cpse	r11, r24
    4bba:	12 c0       	rjmp	.+36     	; 0x4be0 <twiCreate+0x54>
    4bbc:	c7 01       	movw	r24, r14
    4bbe:	b6 01       	movw	r22, r12
    4bc0:	20 ea       	ldi	r18, 0xA0	; 160
    4bc2:	36 e8       	ldi	r19, 0x86	; 134
    4bc4:	41 e0       	ldi	r20, 0x01	; 1
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	ea d2       	rcall	.+1492   	; 0x519e <__udivmodsi4>
    4bca:	da 01       	movw	r26, r20
    4bcc:	c9 01       	movw	r24, r18
    4bce:	40 97       	sbiw	r24, 0x10	; 16
    4bd0:	a1 09       	sbc	r26, r1
    4bd2:	b1 09       	sbc	r27, r1
    4bd4:	b6 95       	lsr	r27
    4bd6:	a7 95       	ror	r26
    4bd8:	97 95       	ror	r25
    4bda:	87 95       	ror	r24
    4bdc:	89 83       	std	Y+1, r24	; 0x01
    4bde:	11 c0       	rjmp	.+34     	; 0x4c02 <twiCreate+0x76>
    4be0:	c7 01       	movw	r24, r14
    4be2:	b6 01       	movw	r22, r12
    4be4:	20 e8       	ldi	r18, 0x80	; 128
    4be6:	3a e1       	ldi	r19, 0x1A	; 26
    4be8:	46 e0       	ldi	r20, 0x06	; 6
    4bea:	50 e0       	ldi	r21, 0x00	; 0
    4bec:	d8 d2       	rcall	.+1456   	; 0x519e <__udivmodsi4>
    4bee:	da 01       	movw	r26, r20
    4bf0:	c9 01       	movw	r24, r18
    4bf2:	40 97       	sbiw	r24, 0x10	; 16
    4bf4:	a1 09       	sbc	r26, r1
    4bf6:	b1 09       	sbc	r27, r1
    4bf8:	b6 95       	lsr	r27
    4bfa:	a7 95       	ror	r26
    4bfc:	97 95       	ror	r25
    4bfe:	87 95       	ror	r24
    4c00:	89 83       	std	Y+1, r24	; 0x01
    4c02:	1b 83       	std	Y+3, r17	; 0x03
    4c04:	0a 83       	std	Y+2, r16	; 0x02
    4c06:	8c 2f       	mov	r24, r28
    4c08:	9d 2f       	mov	r25, r29
    4c0a:	02 c0       	rjmp	.+4      	; 0x4c10 <twiCreate+0x84>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	1f 91       	pop	r17
    4c16:	0f 91       	pop	r16
    4c18:	ff 90       	pop	r15
    4c1a:	ef 90       	pop	r14
    4c1c:	df 90       	pop	r13
    4c1e:	cf 90       	pop	r12
    4c20:	bf 90       	pop	r11
    4c22:	af 90       	pop	r10
    4c24:	08 95       	ret

00004c26 <twiIsBusy>:
    4c26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c2a:	81 70       	andi	r24, 0x01	; 1
    4c2c:	08 95       	ret

00004c2e <twiTransmit>:
    4c2e:	ff 92       	push	r15
    4c30:	0f 93       	push	r16
    4c32:	1f 93       	push	r17
    4c34:	cf 93       	push	r28
    4c36:	df 93       	push	r29
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	d1 f1       	breq	.+116    	; 0x4cb0 <twiTransmit+0x82>
    4c3c:	4a 30       	cpi	r20, 0x0A	; 10
    4c3e:	d0 f5       	brcc	.+116    	; 0x4cb4 <twiTransmit+0x86>
    4c40:	f4 2e       	mov	r15, r20
    4c42:	8b 01       	movw	r16, r22
    4c44:	ec 01       	movw	r28, r24
    4c46:	ef df       	rcall	.-34     	; 0x4c26 <twiIsBusy>
    4c48:	81 11       	cpse	r24, r1
    4c4a:	36 c0       	rjmp	.+108    	; 0x4cb8 <twiTransmit+0x8a>
    4c4c:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <_twiCurrentHandler>
    4c50:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <_twiCurrentHandler+0x1>
    4c54:	c8 17       	cp	r28, r24
    4c56:	d9 07       	cpc	r29, r25
    4c58:	41 f0       	breq	.+16     	; 0x4c6a <twiTransmit+0x3c>
    4c5a:	87 df       	rcall	.-242    	; 0x4b6a <_initTwiInterface>
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4c62:	d0 93 cb 19 	sts	0x19CB, r29	; 0x8019cb <_twiCurrentHandler+0x1>
    4c66:	c0 93 ca 19 	sts	0x19CA, r28	; 0x8019ca <_twiCurrentHandler>
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	8f 0d       	add	r24, r15
    4c6e:	80 93 cc 19 	sts	0x19CC, r24	; 0x8019cc <_twiMessageLen>
    4c72:	88 81       	ld	r24, Y
    4c74:	88 0f       	add	r24, r24
    4c76:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <_twiMessageBuffer>
    4c7a:	ff 20       	and	r15, r15
    4c7c:	89 f0       	breq	.+34     	; 0x4ca0 <twiTransmit+0x72>
    4c7e:	f8 01       	movw	r30, r16
    4c80:	ae ec       	ldi	r26, 0xCE	; 206
    4c82:	b9 e1       	ldi	r27, 0x19	; 25
    4c84:	4f ef       	ldi	r20, 0xFF	; 255
    4c86:	4f 0d       	add	r20, r15
    4c88:	64 2f       	mov	r22, r20
    4c8a:	70 e0       	ldi	r23, 0x00	; 0
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	01 96       	adiw	r24, 0x01	; 1
    4c90:	b8 01       	movw	r22, r16
    4c92:	68 0f       	add	r22, r24
    4c94:	79 1f       	adc	r23, r25
    4c96:	81 91       	ld	r24, Z+
    4c98:	8d 93       	st	X+, r24
    4c9a:	e6 17       	cp	r30, r22
    4c9c:	f7 07       	cpc	r31, r23
    4c9e:	d9 f7       	brne	.-10     	; 0x4c96 <twiTransmit+0x68>
    4ca0:	88 ef       	ldi	r24, 0xF8	; 248
    4ca2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4ca6:	85 ea       	ldi	r24, 0xA5	; 165
    4ca8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4cac:	84 e0       	ldi	r24, 0x04	; 4
    4cae:	05 c0       	rjmp	.+10     	; 0x4cba <twiTransmit+0x8c>
    4cb0:	86 e0       	ldi	r24, 0x06	; 6
    4cb2:	03 c0       	rjmp	.+6      	; 0x4cba <twiTransmit+0x8c>
    4cb4:	87 e0       	ldi	r24, 0x07	; 7
    4cb6:	01 c0       	rjmp	.+2      	; 0x4cba <twiTransmit+0x8c>
    4cb8:	82 e0       	ldi	r24, 0x02	; 2
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
    4cbe:	1f 91       	pop	r17
    4cc0:	0f 91       	pop	r16
    4cc2:	ff 90       	pop	r15
    4cc4:	08 95       	ret

00004cc6 <twiReceive>:
    4cc6:	1f 93       	push	r17
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	00 97       	sbiw	r24, 0x00	; 0
    4cce:	29 f1       	breq	.+74     	; 0x4d1a <twiReceive+0x54>
    4cd0:	6b 30       	cpi	r22, 0x0B	; 11
    4cd2:	28 f5       	brcc	.+74     	; 0x4d1e <twiReceive+0x58>
    4cd4:	16 2f       	mov	r17, r22
    4cd6:	ec 01       	movw	r28, r24
    4cd8:	a6 df       	rcall	.-180    	; 0x4c26 <twiIsBusy>
    4cda:	81 11       	cpse	r24, r1
    4cdc:	22 c0       	rjmp	.+68     	; 0x4d22 <twiReceive+0x5c>
    4cde:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <_twiCurrentHandler>
    4ce2:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <_twiCurrentHandler+0x1>
    4ce6:	c8 17       	cp	r28, r24
    4ce8:	d9 07       	cpc	r29, r25
    4cea:	41 f0       	breq	.+16     	; 0x4cfc <twiReceive+0x36>
    4cec:	3e df       	rcall	.-388    	; 0x4b6a <_initTwiInterface>
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4cf4:	d0 93 cb 19 	sts	0x19CB, r29	; 0x8019cb <_twiCurrentHandler+0x1>
    4cf8:	c0 93 ca 19 	sts	0x19CA, r28	; 0x8019ca <_twiCurrentHandler>
    4cfc:	10 93 cc 19 	sts	0x19CC, r17	; 0x8019cc <_twiMessageLen>
    4d00:	88 81       	ld	r24, Y
    4d02:	88 0f       	add	r24, r24
    4d04:	81 60       	ori	r24, 0x01	; 1
    4d06:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <_twiMessageBuffer>
    4d0a:	88 ef       	ldi	r24, 0xF8	; 248
    4d0c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4d10:	85 ea       	ldi	r24, 0xA5	; 165
    4d12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d16:	85 e0       	ldi	r24, 0x05	; 5
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <twiReceive+0x5e>
    4d1a:	86 e0       	ldi	r24, 0x06	; 6
    4d1c:	03 c0       	rjmp	.+6      	; 0x4d24 <twiReceive+0x5e>
    4d1e:	87 e0       	ldi	r24, 0x07	; 7
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <twiReceive+0x5e>
    4d22:	82 e0       	ldi	r24, 0x02	; 2
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	1f 91       	pop	r17
    4d2a:	08 95       	ret

00004d2c <__vector_39>:
    4d2c:	1f 92       	push	r1
    4d2e:	0f 92       	push	r0
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	0f 92       	push	r0
    4d34:	11 24       	eor	r1, r1
    4d36:	0b b6       	in	r0, 0x3b	; 59
    4d38:	0f 92       	push	r0
    4d3a:	2f 93       	push	r18
    4d3c:	3f 93       	push	r19
    4d3e:	4f 93       	push	r20
    4d40:	5f 93       	push	r21
    4d42:	6f 93       	push	r22
    4d44:	7f 93       	push	r23
    4d46:	8f 93       	push	r24
    4d48:	9f 93       	push	r25
    4d4a:	af 93       	push	r26
    4d4c:	bf 93       	push	r27
    4d4e:	ef 93       	push	r30
    4d50:	ff 93       	push	r31
    4d52:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4d56:	8e 2f       	mov	r24, r30
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	38 97       	sbiw	r30, 0x08	; 8
    4d5e:	e1 35       	cpi	r30, 0x51	; 81
    4d60:	f1 05       	cpc	r31, r1
    4d62:	08 f0       	brcs	.+2      	; 0x4d66 <__vector_39+0x3a>
    4d64:	75 c0       	rjmp	.+234    	; 0x4e50 <__vector_39+0x124>
    4d66:	88 27       	eor	r24, r24
    4d68:	e4 58       	subi	r30, 0x84	; 132
    4d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d6e:	39 c2       	rjmp	.+1138   	; 0x51e2 <__tablejump2__>
    4d70:	10 92 c9 19 	sts	0x19C9, r1	; 0x8019c9 <_index.1885>
    4d74:	e0 91 c9 19 	lds	r30, 0x19C9	; 0x8019c9 <_index.1885>
    4d78:	80 91 cc 19 	lds	r24, 0x19CC	; 0x8019cc <_twiMessageLen>
    4d7c:	e8 17       	cp	r30, r24
    4d7e:	70 f4       	brcc	.+28     	; 0x4d9c <__vector_39+0x70>
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	8e 0f       	add	r24, r30
    4d84:	80 93 c9 19 	sts	0x19C9, r24	; 0x8019c9 <_index.1885>
    4d88:	f0 e0       	ldi	r31, 0x00	; 0
    4d8a:	e3 53       	subi	r30, 0x33	; 51
    4d8c:	f6 4e       	sbci	r31, 0xE6	; 230
    4d8e:	80 81       	ld	r24, Z
    4d90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4d94:	85 e8       	ldi	r24, 0x85	; 133
    4d96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d9a:	72 c0       	rjmp	.+228    	; 0x4e80 <__vector_39+0x154>
    4d9c:	84 e9       	ldi	r24, 0x94	; 148
    4d9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4da2:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <_twiCurrentHandler>
    4da6:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <_twiCurrentHandler+0x1>
    4daa:	dc 01       	movw	r26, r24
    4dac:	12 96       	adiw	r26, 0x02	; 2
    4dae:	ed 91       	ld	r30, X+
    4db0:	fc 91       	ld	r31, X
    4db2:	13 97       	sbiw	r26, 0x03	; 3
    4db4:	30 97       	sbiw	r30, 0x00	; 0
    4db6:	09 f4       	brne	.+2      	; 0x4dba <__vector_39+0x8e>
    4db8:	63 c0       	rjmp	.+198    	; 0x4e80 <__vector_39+0x154>
    4dba:	20 e0       	ldi	r18, 0x00	; 0
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	64 e0       	ldi	r22, 0x04	; 4
    4dc2:	19 95       	eicall
    4dc4:	5d c0       	rjmp	.+186    	; 0x4e80 <__vector_39+0x154>
    4dc6:	e0 91 c9 19 	lds	r30, 0x19C9	; 0x8019c9 <_index.1885>
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	8e 0f       	add	r24, r30
    4dce:	80 93 c9 19 	sts	0x19C9, r24	; 0x8019c9 <_index.1885>
    4dd2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4dd6:	f0 e0       	ldi	r31, 0x00	; 0
    4dd8:	e3 53       	subi	r30, 0x33	; 51
    4dda:	f6 4e       	sbci	r31, 0xE6	; 230
    4ddc:	80 83       	st	Z, r24
    4dde:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4de2:	80 34       	cpi	r24, 0x40	; 64
    4de4:	11 f4       	brne	.+4      	; 0x4dea <__vector_39+0xbe>
    4de6:	10 92 c9 19 	sts	0x19C9, r1	; 0x8019c9 <_index.1885>
    4dea:	20 91 c9 19 	lds	r18, 0x19C9	; 0x8019c9 <_index.1885>
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	80 91 cc 19 	lds	r24, 0x19CC	; 0x8019cc <_twiMessageLen>
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	28 17       	cp	r18, r24
    4dfa:	39 07       	cpc	r19, r25
    4dfc:	24 f4       	brge	.+8      	; 0x4e06 <__vector_39+0xda>
    4dfe:	85 ec       	ldi	r24, 0xC5	; 197
    4e00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e04:	3d c0       	rjmp	.+122    	; 0x4e80 <__vector_39+0x154>
    4e06:	85 e8       	ldi	r24, 0x85	; 133
    4e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e0c:	39 c0       	rjmp	.+114    	; 0x4e80 <__vector_39+0x154>
    4e0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4e12:	e0 91 c9 19 	lds	r30, 0x19C9	; 0x8019c9 <_index.1885>
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	e3 53       	subi	r30, 0x33	; 51
    4e1a:	f6 4e       	sbci	r31, 0xE6	; 230
    4e1c:	80 83       	st	Z, r24
    4e1e:	84 e9       	ldi	r24, 0x94	; 148
    4e20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e24:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <_twiCurrentHandler>
    4e28:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <_twiCurrentHandler+0x1>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	12 96       	adiw	r26, 0x02	; 2
    4e30:	ed 91       	ld	r30, X+
    4e32:	fc 91       	ld	r31, X
    4e34:	13 97       	sbiw	r26, 0x03	; 3
    4e36:	30 97       	sbiw	r30, 0x00	; 0
    4e38:	19 f1       	breq	.+70     	; 0x4e80 <__vector_39+0x154>
    4e3a:	20 91 cc 19 	lds	r18, 0x19CC	; 0x8019cc <_twiMessageLen>
    4e3e:	4d ec       	ldi	r20, 0xCD	; 205
    4e40:	59 e1       	ldi	r21, 0x19	; 25
    4e42:	65 e0       	ldi	r22, 0x05	; 5
    4e44:	19 95       	eicall
    4e46:	1c c0       	rjmp	.+56     	; 0x4e80 <__vector_39+0x154>
    4e48:	85 ea       	ldi	r24, 0xA5	; 165
    4e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e4e:	18 c0       	rjmp	.+48     	; 0x4e80 <__vector_39+0x154>
    4e50:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4e54:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4e5e:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <_twiCurrentHandler>
    4e62:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <_twiCurrentHandler+0x1>
    4e66:	dc 01       	movw	r26, r24
    4e68:	12 96       	adiw	r26, 0x02	; 2
    4e6a:	ed 91       	ld	r30, X+
    4e6c:	fc 91       	ld	r31, X
    4e6e:	13 97       	sbiw	r26, 0x03	; 3
    4e70:	30 97       	sbiw	r30, 0x00	; 0
    4e72:	31 f0       	breq	.+12     	; 0x4e80 <__vector_39+0x154>
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	40 e0       	ldi	r20, 0x00	; 0
    4e78:	50 e0       	ldi	r21, 0x00	; 0
    4e7a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4e7e:	19 95       	eicall
    4e80:	ff 91       	pop	r31
    4e82:	ef 91       	pop	r30
    4e84:	bf 91       	pop	r27
    4e86:	af 91       	pop	r26
    4e88:	9f 91       	pop	r25
    4e8a:	8f 91       	pop	r24
    4e8c:	7f 91       	pop	r23
    4e8e:	6f 91       	pop	r22
    4e90:	5f 91       	pop	r21
    4e92:	4f 91       	pop	r20
    4e94:	3f 91       	pop	r19
    4e96:	2f 91       	pop	r18
    4e98:	0f 90       	pop	r0
    4e9a:	0b be       	out	0x3b, r0	; 59
    4e9c:	0f 90       	pop	r0
    4e9e:	0f be       	out	0x3f, r0	; 63
    4ea0:	0f 90       	pop	r0
    4ea2:	1f 90       	pop	r1
    4ea4:	18 95       	reti

00004ea6 <fifo_init>:
    4ea6:	fc 01       	movw	r30, r24
    4ea8:	41 11       	cpse	r20, r1
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <fifo_init+0x8>
    4eac:	dd d2       	rcall	.+1466   	; 0x5468 <abort>
    4eae:	84 2f       	mov	r24, r20
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	9c 01       	movw	r18, r24
    4eb4:	21 50       	subi	r18, 0x01	; 1
    4eb6:	31 09       	sbc	r19, r1
    4eb8:	82 23       	and	r24, r18
    4eba:	93 23       	and	r25, r19
    4ebc:	89 2b       	or	r24, r25
    4ebe:	09 f0       	breq	.+2      	; 0x4ec2 <fifo_init+0x1c>
    4ec0:	d3 d2       	rcall	.+1446   	; 0x5468 <abort>
    4ec2:	41 38       	cpi	r20, 0x81	; 129
    4ec4:	08 f0       	brcs	.+2      	; 0x4ec8 <fifo_init+0x22>
    4ec6:	d0 d2       	rcall	.+1440   	; 0x5468 <abort>
    4ec8:	12 82       	std	Z+2, r1	; 0x02
    4eca:	13 82       	std	Z+3, r1	; 0x03
    4ecc:	44 83       	std	Z+4, r20	; 0x04
    4ece:	44 0f       	add	r20, r20
    4ed0:	41 50       	subi	r20, 0x01	; 1
    4ed2:	45 83       	std	Z+5, r20	; 0x05
    4ed4:	71 83       	std	Z+1, r23	; 0x01
    4ed6:	60 83       	st	Z, r22
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	08 95       	ret

00004ede <__subsf3>:
    4ede:	50 58       	subi	r21, 0x80	; 128

00004ee0 <__addsf3>:
    4ee0:	bb 27       	eor	r27, r27
    4ee2:	aa 27       	eor	r26, r26
    4ee4:	0e d0       	rcall	.+28     	; 0x4f02 <__addsf3x>
    4ee6:	e4 c0       	rjmp	.+456    	; 0x50b0 <__fp_round>
    4ee8:	d5 d0       	rcall	.+426    	; 0x5094 <__fp_pscA>
    4eea:	30 f0       	brcs	.+12     	; 0x4ef8 <__addsf3+0x18>
    4eec:	da d0       	rcall	.+436    	; 0x50a2 <__fp_pscB>
    4eee:	20 f0       	brcs	.+8      	; 0x4ef8 <__addsf3+0x18>
    4ef0:	31 f4       	brne	.+12     	; 0x4efe <__addsf3+0x1e>
    4ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    4ef4:	11 f4       	brne	.+4      	; 0x4efa <__addsf3+0x1a>
    4ef6:	1e f4       	brtc	.+6      	; 0x4efe <__addsf3+0x1e>
    4ef8:	ca c0       	rjmp	.+404    	; 0x508e <__fp_nan>
    4efa:	0e f4       	brtc	.+2      	; 0x4efe <__addsf3+0x1e>
    4efc:	e0 95       	com	r30
    4efe:	e7 fb       	bst	r30, 7
    4f00:	c0 c0       	rjmp	.+384    	; 0x5082 <__fp_inf>

00004f02 <__addsf3x>:
    4f02:	e9 2f       	mov	r30, r25
    4f04:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__fp_split3>
    4f08:	78 f3       	brcs	.-34     	; 0x4ee8 <__addsf3+0x8>
    4f0a:	ba 17       	cp	r27, r26
    4f0c:	62 07       	cpc	r22, r18
    4f0e:	73 07       	cpc	r23, r19
    4f10:	84 07       	cpc	r24, r20
    4f12:	95 07       	cpc	r25, r21
    4f14:	20 f0       	brcs	.+8      	; 0x4f1e <__addsf3x+0x1c>
    4f16:	79 f4       	brne	.+30     	; 0x4f36 <__addsf3x+0x34>
    4f18:	a6 f5       	brtc	.+104    	; 0x4f82 <__addsf3x+0x80>
    4f1a:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__fp_zero>
    4f1e:	0e f4       	brtc	.+2      	; 0x4f22 <__addsf3x+0x20>
    4f20:	e0 95       	com	r30
    4f22:	0b 2e       	mov	r0, r27
    4f24:	ba 2f       	mov	r27, r26
    4f26:	a0 2d       	mov	r26, r0
    4f28:	0b 01       	movw	r0, r22
    4f2a:	b9 01       	movw	r22, r18
    4f2c:	90 01       	movw	r18, r0
    4f2e:	0c 01       	movw	r0, r24
    4f30:	ca 01       	movw	r24, r20
    4f32:	a0 01       	movw	r20, r0
    4f34:	11 24       	eor	r1, r1
    4f36:	ff 27       	eor	r31, r31
    4f38:	59 1b       	sub	r21, r25
    4f3a:	99 f0       	breq	.+38     	; 0x4f62 <__addsf3x+0x60>
    4f3c:	59 3f       	cpi	r21, 0xF9	; 249
    4f3e:	50 f4       	brcc	.+20     	; 0x4f54 <__addsf3x+0x52>
    4f40:	50 3e       	cpi	r21, 0xE0	; 224
    4f42:	68 f1       	brcs	.+90     	; 0x4f9e <__addsf3x+0x9c>
    4f44:	1a 16       	cp	r1, r26
    4f46:	f0 40       	sbci	r31, 0x00	; 0
    4f48:	a2 2f       	mov	r26, r18
    4f4a:	23 2f       	mov	r18, r19
    4f4c:	34 2f       	mov	r19, r20
    4f4e:	44 27       	eor	r20, r20
    4f50:	58 5f       	subi	r21, 0xF8	; 248
    4f52:	f3 cf       	rjmp	.-26     	; 0x4f3a <__addsf3x+0x38>
    4f54:	46 95       	lsr	r20
    4f56:	37 95       	ror	r19
    4f58:	27 95       	ror	r18
    4f5a:	a7 95       	ror	r26
    4f5c:	f0 40       	sbci	r31, 0x00	; 0
    4f5e:	53 95       	inc	r21
    4f60:	c9 f7       	brne	.-14     	; 0x4f54 <__addsf3x+0x52>
    4f62:	7e f4       	brtc	.+30     	; 0x4f82 <__addsf3x+0x80>
    4f64:	1f 16       	cp	r1, r31
    4f66:	ba 0b       	sbc	r27, r26
    4f68:	62 0b       	sbc	r22, r18
    4f6a:	73 0b       	sbc	r23, r19
    4f6c:	84 0b       	sbc	r24, r20
    4f6e:	ba f0       	brmi	.+46     	; 0x4f9e <__addsf3x+0x9c>
    4f70:	91 50       	subi	r25, 0x01	; 1
    4f72:	a1 f0       	breq	.+40     	; 0x4f9c <__addsf3x+0x9a>
    4f74:	ff 0f       	add	r31, r31
    4f76:	bb 1f       	adc	r27, r27
    4f78:	66 1f       	adc	r22, r22
    4f7a:	77 1f       	adc	r23, r23
    4f7c:	88 1f       	adc	r24, r24
    4f7e:	c2 f7       	brpl	.-16     	; 0x4f70 <__addsf3x+0x6e>
    4f80:	0e c0       	rjmp	.+28     	; 0x4f9e <__addsf3x+0x9c>
    4f82:	ba 0f       	add	r27, r26
    4f84:	62 1f       	adc	r22, r18
    4f86:	73 1f       	adc	r23, r19
    4f88:	84 1f       	adc	r24, r20
    4f8a:	48 f4       	brcc	.+18     	; 0x4f9e <__addsf3x+0x9c>
    4f8c:	87 95       	ror	r24
    4f8e:	77 95       	ror	r23
    4f90:	67 95       	ror	r22
    4f92:	b7 95       	ror	r27
    4f94:	f7 95       	ror	r31
    4f96:	9e 3f       	cpi	r25, 0xFE	; 254
    4f98:	08 f0       	brcs	.+2      	; 0x4f9c <__addsf3x+0x9a>
    4f9a:	b1 cf       	rjmp	.-158    	; 0x4efe <__addsf3+0x1e>
    4f9c:	93 95       	inc	r25
    4f9e:	88 0f       	add	r24, r24
    4fa0:	08 f0       	brcs	.+2      	; 0x4fa4 <__addsf3x+0xa2>
    4fa2:	99 27       	eor	r25, r25
    4fa4:	ee 0f       	add	r30, r30
    4fa6:	97 95       	ror	r25
    4fa8:	87 95       	ror	r24
    4faa:	08 95       	ret

00004fac <__divsf3>:
    4fac:	0d d0       	rcall	.+26     	; 0x4fc8 <__divsf3x>
    4fae:	80 c0       	rjmp	.+256    	; 0x50b0 <__fp_round>
    4fb0:	78 d0       	rcall	.+240    	; 0x50a2 <__fp_pscB>
    4fb2:	48 f0       	brcs	.+18     	; 0x4fc6 <__divsf3+0x1a>
    4fb4:	6f d0       	rcall	.+222    	; 0x5094 <__fp_pscA>
    4fb6:	38 f0       	brcs	.+14     	; 0x4fc6 <__divsf3+0x1a>
    4fb8:	21 f4       	brne	.+8      	; 0x4fc2 <__divsf3+0x16>
    4fba:	5f 3f       	cpi	r21, 0xFF	; 255
    4fbc:	21 f0       	breq	.+8      	; 0x4fc6 <__divsf3+0x1a>
    4fbe:	61 c0       	rjmp	.+194    	; 0x5082 <__fp_inf>
    4fc0:	51 11       	cpse	r21, r1
    4fc2:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_szero>
    4fc6:	63 c0       	rjmp	.+198    	; 0x508e <__fp_nan>

00004fc8 <__divsf3x>:
    4fc8:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__fp_split3>
    4fcc:	88 f3       	brcs	.-30     	; 0x4fb0 <__divsf3+0x4>

00004fce <__divsf3_pse>:
    4fce:	99 23       	and	r25, r25
    4fd0:	b9 f3       	breq	.-18     	; 0x4fc0 <__divsf3+0x14>
    4fd2:	55 23       	and	r21, r21
    4fd4:	a1 f3       	breq	.-24     	; 0x4fbe <__divsf3+0x12>
    4fd6:	95 1b       	sub	r25, r21
    4fd8:	55 0b       	sbc	r21, r21
    4fda:	bb 27       	eor	r27, r27
    4fdc:	aa 27       	eor	r26, r26
    4fde:	62 17       	cp	r22, r18
    4fe0:	73 07       	cpc	r23, r19
    4fe2:	84 07       	cpc	r24, r20
    4fe4:	38 f0       	brcs	.+14     	; 0x4ff4 <__divsf3_pse+0x26>
    4fe6:	9f 5f       	subi	r25, 0xFF	; 255
    4fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fea:	22 0f       	add	r18, r18
    4fec:	33 1f       	adc	r19, r19
    4fee:	44 1f       	adc	r20, r20
    4ff0:	aa 1f       	adc	r26, r26
    4ff2:	a9 f3       	breq	.-22     	; 0x4fde <__divsf3_pse+0x10>
    4ff4:	34 d0       	rcall	.+104    	; 0x505e <__divsf3_pse+0x90>
    4ff6:	0e 2e       	mov	r0, r30
    4ff8:	3a f0       	brmi	.+14     	; 0x5008 <__divsf3_pse+0x3a>
    4ffa:	e0 e8       	ldi	r30, 0x80	; 128
    4ffc:	31 d0       	rcall	.+98     	; 0x5060 <__divsf3_pse+0x92>
    4ffe:	91 50       	subi	r25, 0x01	; 1
    5000:	50 40       	sbci	r21, 0x00	; 0
    5002:	e6 95       	lsr	r30
    5004:	00 1c       	adc	r0, r0
    5006:	ca f7       	brpl	.-14     	; 0x4ffa <__divsf3_pse+0x2c>
    5008:	2a d0       	rcall	.+84     	; 0x505e <__divsf3_pse+0x90>
    500a:	fe 2f       	mov	r31, r30
    500c:	28 d0       	rcall	.+80     	; 0x505e <__divsf3_pse+0x90>
    500e:	66 0f       	add	r22, r22
    5010:	77 1f       	adc	r23, r23
    5012:	88 1f       	adc	r24, r24
    5014:	bb 1f       	adc	r27, r27
    5016:	26 17       	cp	r18, r22
    5018:	37 07       	cpc	r19, r23
    501a:	48 07       	cpc	r20, r24
    501c:	ab 07       	cpc	r26, r27
    501e:	b0 e8       	ldi	r27, 0x80	; 128
    5020:	09 f0       	breq	.+2      	; 0x5024 <__divsf3_pse+0x56>
    5022:	bb 0b       	sbc	r27, r27
    5024:	80 2d       	mov	r24, r0
    5026:	bf 01       	movw	r22, r30
    5028:	ff 27       	eor	r31, r31
    502a:	93 58       	subi	r25, 0x83	; 131
    502c:	5f 4f       	sbci	r21, 0xFF	; 255
    502e:	32 f0       	brmi	.+12     	; 0x503c <__divsf3_pse+0x6e>
    5030:	9e 3f       	cpi	r25, 0xFE	; 254
    5032:	51 05       	cpc	r21, r1
    5034:	70 f0       	brcs	.+28     	; 0x5052 <__divsf3_pse+0x84>
    5036:	25 c0       	rjmp	.+74     	; 0x5082 <__fp_inf>
    5038:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_szero>
    503c:	5f 3f       	cpi	r21, 0xFF	; 255
    503e:	e4 f3       	brlt	.-8      	; 0x5038 <__divsf3_pse+0x6a>
    5040:	98 3e       	cpi	r25, 0xE8	; 232
    5042:	d4 f3       	brlt	.-12     	; 0x5038 <__divsf3_pse+0x6a>
    5044:	86 95       	lsr	r24
    5046:	77 95       	ror	r23
    5048:	67 95       	ror	r22
    504a:	b7 95       	ror	r27
    504c:	f7 95       	ror	r31
    504e:	9f 5f       	subi	r25, 0xFF	; 255
    5050:	c9 f7       	brne	.-14     	; 0x5044 <__divsf3_pse+0x76>
    5052:	88 0f       	add	r24, r24
    5054:	91 1d       	adc	r25, r1
    5056:	96 95       	lsr	r25
    5058:	87 95       	ror	r24
    505a:	97 f9       	bld	r25, 7
    505c:	08 95       	ret
    505e:	e1 e0       	ldi	r30, 0x01	; 1
    5060:	66 0f       	add	r22, r22
    5062:	77 1f       	adc	r23, r23
    5064:	88 1f       	adc	r24, r24
    5066:	bb 1f       	adc	r27, r27
    5068:	62 17       	cp	r22, r18
    506a:	73 07       	cpc	r23, r19
    506c:	84 07       	cpc	r24, r20
    506e:	ba 07       	cpc	r27, r26
    5070:	20 f0       	brcs	.+8      	; 0x507a <__divsf3_pse+0xac>
    5072:	62 1b       	sub	r22, r18
    5074:	73 0b       	sbc	r23, r19
    5076:	84 0b       	sbc	r24, r20
    5078:	ba 0b       	sbc	r27, r26
    507a:	ee 1f       	adc	r30, r30
    507c:	88 f7       	brcc	.-30     	; 0x5060 <__divsf3_pse+0x92>
    507e:	e0 95       	com	r30
    5080:	08 95       	ret

00005082 <__fp_inf>:
    5082:	97 f9       	bld	r25, 7
    5084:	9f 67       	ori	r25, 0x7F	; 127
    5086:	80 e8       	ldi	r24, 0x80	; 128
    5088:	70 e0       	ldi	r23, 0x00	; 0
    508a:	60 e0       	ldi	r22, 0x00	; 0
    508c:	08 95       	ret

0000508e <__fp_nan>:
    508e:	9f ef       	ldi	r25, 0xFF	; 255
    5090:	80 ec       	ldi	r24, 0xC0	; 192
    5092:	08 95       	ret

00005094 <__fp_pscA>:
    5094:	00 24       	eor	r0, r0
    5096:	0a 94       	dec	r0
    5098:	16 16       	cp	r1, r22
    509a:	17 06       	cpc	r1, r23
    509c:	18 06       	cpc	r1, r24
    509e:	09 06       	cpc	r0, r25
    50a0:	08 95       	ret

000050a2 <__fp_pscB>:
    50a2:	00 24       	eor	r0, r0
    50a4:	0a 94       	dec	r0
    50a6:	12 16       	cp	r1, r18
    50a8:	13 06       	cpc	r1, r19
    50aa:	14 06       	cpc	r1, r20
    50ac:	05 06       	cpc	r0, r21
    50ae:	08 95       	ret

000050b0 <__fp_round>:
    50b0:	09 2e       	mov	r0, r25
    50b2:	03 94       	inc	r0
    50b4:	00 0c       	add	r0, r0
    50b6:	11 f4       	brne	.+4      	; 0x50bc <__fp_round+0xc>
    50b8:	88 23       	and	r24, r24
    50ba:	52 f0       	brmi	.+20     	; 0x50d0 <__fp_round+0x20>
    50bc:	bb 0f       	add	r27, r27
    50be:	40 f4       	brcc	.+16     	; 0x50d0 <__fp_round+0x20>
    50c0:	bf 2b       	or	r27, r31
    50c2:	11 f4       	brne	.+4      	; 0x50c8 <__fp_round+0x18>
    50c4:	60 ff       	sbrs	r22, 0
    50c6:	04 c0       	rjmp	.+8      	; 0x50d0 <__fp_round+0x20>
    50c8:	6f 5f       	subi	r22, 0xFF	; 255
    50ca:	7f 4f       	sbci	r23, 0xFF	; 255
    50cc:	8f 4f       	sbci	r24, 0xFF	; 255
    50ce:	9f 4f       	sbci	r25, 0xFF	; 255
    50d0:	08 95       	ret

000050d2 <__mulsf3>:
    50d2:	0c d0       	rcall	.+24     	; 0x50ec <__mulsf3x>
    50d4:	ed cf       	rjmp	.-38     	; 0x50b0 <__fp_round>
    50d6:	de df       	rcall	.-68     	; 0x5094 <__fp_pscA>
    50d8:	28 f0       	brcs	.+10     	; 0x50e4 <__mulsf3+0x12>
    50da:	e3 df       	rcall	.-58     	; 0x50a2 <__fp_pscB>
    50dc:	18 f0       	brcs	.+6      	; 0x50e4 <__mulsf3+0x12>
    50de:	95 23       	and	r25, r21
    50e0:	09 f0       	breq	.+2      	; 0x50e4 <__mulsf3+0x12>
    50e2:	cf cf       	rjmp	.-98     	; 0x5082 <__fp_inf>
    50e4:	d4 cf       	rjmp	.-88     	; 0x508e <__fp_nan>
    50e6:	11 24       	eor	r1, r1
    50e8:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_szero>

000050ec <__mulsf3x>:
    50ec:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__fp_split3>
    50f0:	90 f3       	brcs	.-28     	; 0x50d6 <__mulsf3+0x4>

000050f2 <__mulsf3_pse>:
    50f2:	95 9f       	mul	r25, r21
    50f4:	c1 f3       	breq	.-16     	; 0x50e6 <__mulsf3+0x14>
    50f6:	95 0f       	add	r25, r21
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	55 1f       	adc	r21, r21
    50fc:	62 9f       	mul	r22, r18
    50fe:	f0 01       	movw	r30, r0
    5100:	72 9f       	mul	r23, r18
    5102:	bb 27       	eor	r27, r27
    5104:	f0 0d       	add	r31, r0
    5106:	b1 1d       	adc	r27, r1
    5108:	63 9f       	mul	r22, r19
    510a:	aa 27       	eor	r26, r26
    510c:	f0 0d       	add	r31, r0
    510e:	b1 1d       	adc	r27, r1
    5110:	aa 1f       	adc	r26, r26
    5112:	64 9f       	mul	r22, r20
    5114:	66 27       	eor	r22, r22
    5116:	b0 0d       	add	r27, r0
    5118:	a1 1d       	adc	r26, r1
    511a:	66 1f       	adc	r22, r22
    511c:	82 9f       	mul	r24, r18
    511e:	22 27       	eor	r18, r18
    5120:	b0 0d       	add	r27, r0
    5122:	a1 1d       	adc	r26, r1
    5124:	62 1f       	adc	r22, r18
    5126:	73 9f       	mul	r23, r19
    5128:	b0 0d       	add	r27, r0
    512a:	a1 1d       	adc	r26, r1
    512c:	62 1f       	adc	r22, r18
    512e:	83 9f       	mul	r24, r19
    5130:	a0 0d       	add	r26, r0
    5132:	61 1d       	adc	r22, r1
    5134:	22 1f       	adc	r18, r18
    5136:	74 9f       	mul	r23, r20
    5138:	33 27       	eor	r19, r19
    513a:	a0 0d       	add	r26, r0
    513c:	61 1d       	adc	r22, r1
    513e:	23 1f       	adc	r18, r19
    5140:	84 9f       	mul	r24, r20
    5142:	60 0d       	add	r22, r0
    5144:	21 1d       	adc	r18, r1
    5146:	82 2f       	mov	r24, r18
    5148:	76 2f       	mov	r23, r22
    514a:	6a 2f       	mov	r22, r26
    514c:	11 24       	eor	r1, r1
    514e:	9f 57       	subi	r25, 0x7F	; 127
    5150:	50 40       	sbci	r21, 0x00	; 0
    5152:	92 f0       	brmi	.+36     	; 0x5178 <__mulsf3_pse+0x86>
    5154:	e9 f0       	breq	.+58     	; 0x5190 <__mulsf3_pse+0x9e>
    5156:	88 23       	and	r24, r24
    5158:	4a f0       	brmi	.+18     	; 0x516c <__mulsf3_pse+0x7a>
    515a:	ee 0f       	add	r30, r30
    515c:	ff 1f       	adc	r31, r31
    515e:	bb 1f       	adc	r27, r27
    5160:	66 1f       	adc	r22, r22
    5162:	77 1f       	adc	r23, r23
    5164:	88 1f       	adc	r24, r24
    5166:	91 50       	subi	r25, 0x01	; 1
    5168:	50 40       	sbci	r21, 0x00	; 0
    516a:	a9 f7       	brne	.-22     	; 0x5156 <__mulsf3_pse+0x64>
    516c:	9e 3f       	cpi	r25, 0xFE	; 254
    516e:	51 05       	cpc	r21, r1
    5170:	78 f0       	brcs	.+30     	; 0x5190 <__mulsf3_pse+0x9e>
    5172:	87 cf       	rjmp	.-242    	; 0x5082 <__fp_inf>
    5174:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_szero>
    5178:	5f 3f       	cpi	r21, 0xFF	; 255
    517a:	e4 f3       	brlt	.-8      	; 0x5174 <__mulsf3_pse+0x82>
    517c:	98 3e       	cpi	r25, 0xE8	; 232
    517e:	d4 f3       	brlt	.-12     	; 0x5174 <__mulsf3_pse+0x82>
    5180:	86 95       	lsr	r24
    5182:	77 95       	ror	r23
    5184:	67 95       	ror	r22
    5186:	b7 95       	ror	r27
    5188:	f7 95       	ror	r31
    518a:	e7 95       	ror	r30
    518c:	9f 5f       	subi	r25, 0xFF	; 255
    518e:	c1 f7       	brne	.-16     	; 0x5180 <__mulsf3_pse+0x8e>
    5190:	fe 2b       	or	r31, r30
    5192:	88 0f       	add	r24, r24
    5194:	91 1d       	adc	r25, r1
    5196:	96 95       	lsr	r25
    5198:	87 95       	ror	r24
    519a:	97 f9       	bld	r25, 7
    519c:	08 95       	ret

0000519e <__udivmodsi4>:
    519e:	a1 e2       	ldi	r26, 0x21	; 33
    51a0:	1a 2e       	mov	r1, r26
    51a2:	aa 1b       	sub	r26, r26
    51a4:	bb 1b       	sub	r27, r27
    51a6:	fd 01       	movw	r30, r26
    51a8:	0d c0       	rjmp	.+26     	; 0x51c4 <__udivmodsi4_ep>

000051aa <__udivmodsi4_loop>:
    51aa:	aa 1f       	adc	r26, r26
    51ac:	bb 1f       	adc	r27, r27
    51ae:	ee 1f       	adc	r30, r30
    51b0:	ff 1f       	adc	r31, r31
    51b2:	a2 17       	cp	r26, r18
    51b4:	b3 07       	cpc	r27, r19
    51b6:	e4 07       	cpc	r30, r20
    51b8:	f5 07       	cpc	r31, r21
    51ba:	20 f0       	brcs	.+8      	; 0x51c4 <__udivmodsi4_ep>
    51bc:	a2 1b       	sub	r26, r18
    51be:	b3 0b       	sbc	r27, r19
    51c0:	e4 0b       	sbc	r30, r20
    51c2:	f5 0b       	sbc	r31, r21

000051c4 <__udivmodsi4_ep>:
    51c4:	66 1f       	adc	r22, r22
    51c6:	77 1f       	adc	r23, r23
    51c8:	88 1f       	adc	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	1a 94       	dec	r1
    51ce:	69 f7       	brne	.-38     	; 0x51aa <__udivmodsi4_loop>
    51d0:	60 95       	com	r22
    51d2:	70 95       	com	r23
    51d4:	80 95       	com	r24
    51d6:	90 95       	com	r25
    51d8:	9b 01       	movw	r18, r22
    51da:	ac 01       	movw	r20, r24
    51dc:	bd 01       	movw	r22, r26
    51de:	cf 01       	movw	r24, r30
    51e0:	08 95       	ret

000051e2 <__tablejump2__>:
    51e2:	ee 0f       	add	r30, r30
    51e4:	ff 1f       	adc	r31, r31
    51e6:	88 1f       	adc	r24, r24
    51e8:	8b bf       	out	0x3b, r24	; 59
    51ea:	07 90       	elpm	r0, Z+
    51ec:	f6 91       	elpm	r31, Z
    51ee:	e0 2d       	mov	r30, r0
    51f0:	19 94       	eijmp

000051f2 <calloc>:
    51f2:	0f 93       	push	r16
    51f4:	1f 93       	push	r17
    51f6:	cf 93       	push	r28
    51f8:	df 93       	push	r29
    51fa:	86 9f       	mul	r24, r22
    51fc:	80 01       	movw	r16, r0
    51fe:	87 9f       	mul	r24, r23
    5200:	10 0d       	add	r17, r0
    5202:	96 9f       	mul	r25, r22
    5204:	10 0d       	add	r17, r0
    5206:	11 24       	eor	r1, r1
    5208:	c8 01       	movw	r24, r16
    520a:	0d d0       	rcall	.+26     	; 0x5226 <malloc>
    520c:	ec 01       	movw	r28, r24
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	21 f0       	breq	.+8      	; 0x521a <calloc+0x28>
    5212:	a8 01       	movw	r20, r16
    5214:	60 e0       	ldi	r22, 0x00	; 0
    5216:	70 e0       	ldi	r23, 0x00	; 0
    5218:	34 d1       	rcall	.+616    	; 0x5482 <memset>
    521a:	ce 01       	movw	r24, r28
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	1f 91       	pop	r17
    5222:	0f 91       	pop	r16
    5224:	08 95       	ret

00005226 <malloc>:
    5226:	0f 93       	push	r16
    5228:	1f 93       	push	r17
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	82 30       	cpi	r24, 0x02	; 2
    5230:	91 05       	cpc	r25, r1
    5232:	10 f4       	brcc	.+4      	; 0x5238 <malloc+0x12>
    5234:	82 e0       	ldi	r24, 0x02	; 2
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	e0 91 03 1a 	lds	r30, 0x1A03	; 0x801a03 <__flp>
    523c:	f0 91 04 1a 	lds	r31, 0x1A04	; 0x801a04 <__flp+0x1>
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	a0 e0       	ldi	r26, 0x00	; 0
    5246:	b0 e0       	ldi	r27, 0x00	; 0
    5248:	30 97       	sbiw	r30, 0x00	; 0
    524a:	19 f1       	breq	.+70     	; 0x5292 <malloc+0x6c>
    524c:	40 81       	ld	r20, Z
    524e:	51 81       	ldd	r21, Z+1	; 0x01
    5250:	02 81       	ldd	r16, Z+2	; 0x02
    5252:	13 81       	ldd	r17, Z+3	; 0x03
    5254:	48 17       	cp	r20, r24
    5256:	59 07       	cpc	r21, r25
    5258:	c8 f0       	brcs	.+50     	; 0x528c <malloc+0x66>
    525a:	84 17       	cp	r24, r20
    525c:	95 07       	cpc	r25, r21
    525e:	69 f4       	brne	.+26     	; 0x527a <malloc+0x54>
    5260:	10 97       	sbiw	r26, 0x00	; 0
    5262:	31 f0       	breq	.+12     	; 0x5270 <malloc+0x4a>
    5264:	12 96       	adiw	r26, 0x02	; 2
    5266:	0c 93       	st	X, r16
    5268:	12 97       	sbiw	r26, 0x02	; 2
    526a:	13 96       	adiw	r26, 0x03	; 3
    526c:	1c 93       	st	X, r17
    526e:	27 c0       	rjmp	.+78     	; 0x52be <malloc+0x98>
    5270:	00 93 03 1a 	sts	0x1A03, r16	; 0x801a03 <__flp>
    5274:	10 93 04 1a 	sts	0x1A04, r17	; 0x801a04 <__flp+0x1>
    5278:	22 c0       	rjmp	.+68     	; 0x52be <malloc+0x98>
    527a:	21 15       	cp	r18, r1
    527c:	31 05       	cpc	r19, r1
    527e:	19 f0       	breq	.+6      	; 0x5286 <malloc+0x60>
    5280:	42 17       	cp	r20, r18
    5282:	53 07       	cpc	r21, r19
    5284:	18 f4       	brcc	.+6      	; 0x528c <malloc+0x66>
    5286:	9a 01       	movw	r18, r20
    5288:	bd 01       	movw	r22, r26
    528a:	ef 01       	movw	r28, r30
    528c:	df 01       	movw	r26, r30
    528e:	f8 01       	movw	r30, r16
    5290:	db cf       	rjmp	.-74     	; 0x5248 <malloc+0x22>
    5292:	21 15       	cp	r18, r1
    5294:	31 05       	cpc	r19, r1
    5296:	f9 f0       	breq	.+62     	; 0x52d6 <malloc+0xb0>
    5298:	28 1b       	sub	r18, r24
    529a:	39 0b       	sbc	r19, r25
    529c:	24 30       	cpi	r18, 0x04	; 4
    529e:	31 05       	cpc	r19, r1
    52a0:	80 f4       	brcc	.+32     	; 0x52c2 <malloc+0x9c>
    52a2:	8a 81       	ldd	r24, Y+2	; 0x02
    52a4:	9b 81       	ldd	r25, Y+3	; 0x03
    52a6:	61 15       	cp	r22, r1
    52a8:	71 05       	cpc	r23, r1
    52aa:	21 f0       	breq	.+8      	; 0x52b4 <malloc+0x8e>
    52ac:	fb 01       	movw	r30, r22
    52ae:	93 83       	std	Z+3, r25	; 0x03
    52b0:	82 83       	std	Z+2, r24	; 0x02
    52b2:	04 c0       	rjmp	.+8      	; 0x52bc <malloc+0x96>
    52b4:	90 93 04 1a 	sts	0x1A04, r25	; 0x801a04 <__flp+0x1>
    52b8:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <__flp>
    52bc:	fe 01       	movw	r30, r28
    52be:	32 96       	adiw	r30, 0x02	; 2
    52c0:	44 c0       	rjmp	.+136    	; 0x534a <malloc+0x124>
    52c2:	fe 01       	movw	r30, r28
    52c4:	e2 0f       	add	r30, r18
    52c6:	f3 1f       	adc	r31, r19
    52c8:	81 93       	st	Z+, r24
    52ca:	91 93       	st	Z+, r25
    52cc:	22 50       	subi	r18, 0x02	; 2
    52ce:	31 09       	sbc	r19, r1
    52d0:	39 83       	std	Y+1, r19	; 0x01
    52d2:	28 83       	st	Y, r18
    52d4:	3a c0       	rjmp	.+116    	; 0x534a <malloc+0x124>
    52d6:	20 91 01 1a 	lds	r18, 0x1A01	; 0x801a01 <__brkval>
    52da:	30 91 02 1a 	lds	r19, 0x1A02	; 0x801a02 <__brkval+0x1>
    52de:	23 2b       	or	r18, r19
    52e0:	41 f4       	brne	.+16     	; 0x52f2 <malloc+0xcc>
    52e2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    52e6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    52ea:	30 93 02 1a 	sts	0x1A02, r19	; 0x801a02 <__brkval+0x1>
    52ee:	20 93 01 1a 	sts	0x1A01, r18	; 0x801a01 <__brkval>
    52f2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    52f6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    52fa:	21 15       	cp	r18, r1
    52fc:	31 05       	cpc	r19, r1
    52fe:	41 f4       	brne	.+16     	; 0x5310 <malloc+0xea>
    5300:	2d b7       	in	r18, 0x3d	; 61
    5302:	3e b7       	in	r19, 0x3e	; 62
    5304:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5308:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    530c:	24 1b       	sub	r18, r20
    530e:	35 0b       	sbc	r19, r21
    5310:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <__brkval>
    5314:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <__brkval+0x1>
    5318:	e2 17       	cp	r30, r18
    531a:	f3 07       	cpc	r31, r19
    531c:	a0 f4       	brcc	.+40     	; 0x5346 <malloc+0x120>
    531e:	2e 1b       	sub	r18, r30
    5320:	3f 0b       	sbc	r19, r31
    5322:	28 17       	cp	r18, r24
    5324:	39 07       	cpc	r19, r25
    5326:	78 f0       	brcs	.+30     	; 0x5346 <malloc+0x120>
    5328:	ac 01       	movw	r20, r24
    532a:	4e 5f       	subi	r20, 0xFE	; 254
    532c:	5f 4f       	sbci	r21, 0xFF	; 255
    532e:	24 17       	cp	r18, r20
    5330:	35 07       	cpc	r19, r21
    5332:	48 f0       	brcs	.+18     	; 0x5346 <malloc+0x120>
    5334:	4e 0f       	add	r20, r30
    5336:	5f 1f       	adc	r21, r31
    5338:	50 93 02 1a 	sts	0x1A02, r21	; 0x801a02 <__brkval+0x1>
    533c:	40 93 01 1a 	sts	0x1A01, r20	; 0x801a01 <__brkval>
    5340:	81 93       	st	Z+, r24
    5342:	91 93       	st	Z+, r25
    5344:	02 c0       	rjmp	.+4      	; 0x534a <malloc+0x124>
    5346:	e0 e0       	ldi	r30, 0x00	; 0
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	cf 01       	movw	r24, r30
    534c:	df 91       	pop	r29
    534e:	cf 91       	pop	r28
    5350:	1f 91       	pop	r17
    5352:	0f 91       	pop	r16
    5354:	08 95       	ret

00005356 <free>:
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    535a:	00 97       	sbiw	r24, 0x00	; 0
    535c:	09 f4       	brne	.+2      	; 0x5360 <free+0xa>
    535e:	81 c0       	rjmp	.+258    	; 0x5462 <free+0x10c>
    5360:	fc 01       	movw	r30, r24
    5362:	32 97       	sbiw	r30, 0x02	; 2
    5364:	13 82       	std	Z+3, r1	; 0x03
    5366:	12 82       	std	Z+2, r1	; 0x02
    5368:	a0 91 03 1a 	lds	r26, 0x1A03	; 0x801a03 <__flp>
    536c:	b0 91 04 1a 	lds	r27, 0x1A04	; 0x801a04 <__flp+0x1>
    5370:	10 97       	sbiw	r26, 0x00	; 0
    5372:	81 f4       	brne	.+32     	; 0x5394 <free+0x3e>
    5374:	20 81       	ld	r18, Z
    5376:	31 81       	ldd	r19, Z+1	; 0x01
    5378:	82 0f       	add	r24, r18
    537a:	93 1f       	adc	r25, r19
    537c:	20 91 01 1a 	lds	r18, 0x1A01	; 0x801a01 <__brkval>
    5380:	30 91 02 1a 	lds	r19, 0x1A02	; 0x801a02 <__brkval+0x1>
    5384:	28 17       	cp	r18, r24
    5386:	39 07       	cpc	r19, r25
    5388:	51 f5       	brne	.+84     	; 0x53de <free+0x88>
    538a:	f0 93 02 1a 	sts	0x1A02, r31	; 0x801a02 <__brkval+0x1>
    538e:	e0 93 01 1a 	sts	0x1A01, r30	; 0x801a01 <__brkval>
    5392:	67 c0       	rjmp	.+206    	; 0x5462 <free+0x10c>
    5394:	ed 01       	movw	r28, r26
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	ce 17       	cp	r28, r30
    539c:	df 07       	cpc	r29, r31
    539e:	40 f4       	brcc	.+16     	; 0x53b0 <free+0x5a>
    53a0:	4a 81       	ldd	r20, Y+2	; 0x02
    53a2:	5b 81       	ldd	r21, Y+3	; 0x03
    53a4:	9e 01       	movw	r18, r28
    53a6:	41 15       	cp	r20, r1
    53a8:	51 05       	cpc	r21, r1
    53aa:	f1 f0       	breq	.+60     	; 0x53e8 <free+0x92>
    53ac:	ea 01       	movw	r28, r20
    53ae:	f5 cf       	rjmp	.-22     	; 0x539a <free+0x44>
    53b0:	d3 83       	std	Z+3, r29	; 0x03
    53b2:	c2 83       	std	Z+2, r28	; 0x02
    53b4:	40 81       	ld	r20, Z
    53b6:	51 81       	ldd	r21, Z+1	; 0x01
    53b8:	84 0f       	add	r24, r20
    53ba:	95 1f       	adc	r25, r21
    53bc:	c8 17       	cp	r28, r24
    53be:	d9 07       	cpc	r29, r25
    53c0:	59 f4       	brne	.+22     	; 0x53d8 <free+0x82>
    53c2:	88 81       	ld	r24, Y
    53c4:	99 81       	ldd	r25, Y+1	; 0x01
    53c6:	84 0f       	add	r24, r20
    53c8:	95 1f       	adc	r25, r21
    53ca:	02 96       	adiw	r24, 0x02	; 2
    53cc:	91 83       	std	Z+1, r25	; 0x01
    53ce:	80 83       	st	Z, r24
    53d0:	8a 81       	ldd	r24, Y+2	; 0x02
    53d2:	9b 81       	ldd	r25, Y+3	; 0x03
    53d4:	93 83       	std	Z+3, r25	; 0x03
    53d6:	82 83       	std	Z+2, r24	; 0x02
    53d8:	21 15       	cp	r18, r1
    53da:	31 05       	cpc	r19, r1
    53dc:	29 f4       	brne	.+10     	; 0x53e8 <free+0x92>
    53de:	f0 93 04 1a 	sts	0x1A04, r31	; 0x801a04 <__flp+0x1>
    53e2:	e0 93 03 1a 	sts	0x1A03, r30	; 0x801a03 <__flp>
    53e6:	3d c0       	rjmp	.+122    	; 0x5462 <free+0x10c>
    53e8:	e9 01       	movw	r28, r18
    53ea:	fb 83       	std	Y+3, r31	; 0x03
    53ec:	ea 83       	std	Y+2, r30	; 0x02
    53ee:	49 91       	ld	r20, Y+
    53f0:	59 91       	ld	r21, Y+
    53f2:	c4 0f       	add	r28, r20
    53f4:	d5 1f       	adc	r29, r21
    53f6:	ec 17       	cp	r30, r28
    53f8:	fd 07       	cpc	r31, r29
    53fa:	61 f4       	brne	.+24     	; 0x5414 <free+0xbe>
    53fc:	80 81       	ld	r24, Z
    53fe:	91 81       	ldd	r25, Z+1	; 0x01
    5400:	84 0f       	add	r24, r20
    5402:	95 1f       	adc	r25, r21
    5404:	02 96       	adiw	r24, 0x02	; 2
    5406:	e9 01       	movw	r28, r18
    5408:	99 83       	std	Y+1, r25	; 0x01
    540a:	88 83       	st	Y, r24
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	9b 83       	std	Y+3, r25	; 0x03
    5412:	8a 83       	std	Y+2, r24	; 0x02
    5414:	e0 e0       	ldi	r30, 0x00	; 0
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	12 96       	adiw	r26, 0x02	; 2
    541a:	8d 91       	ld	r24, X+
    541c:	9c 91       	ld	r25, X
    541e:	13 97       	sbiw	r26, 0x03	; 3
    5420:	00 97       	sbiw	r24, 0x00	; 0
    5422:	19 f0       	breq	.+6      	; 0x542a <free+0xd4>
    5424:	fd 01       	movw	r30, r26
    5426:	dc 01       	movw	r26, r24
    5428:	f7 cf       	rjmp	.-18     	; 0x5418 <free+0xc2>
    542a:	8d 91       	ld	r24, X+
    542c:	9c 91       	ld	r25, X
    542e:	11 97       	sbiw	r26, 0x01	; 1
    5430:	9d 01       	movw	r18, r26
    5432:	2e 5f       	subi	r18, 0xFE	; 254
    5434:	3f 4f       	sbci	r19, 0xFF	; 255
    5436:	82 0f       	add	r24, r18
    5438:	93 1f       	adc	r25, r19
    543a:	20 91 01 1a 	lds	r18, 0x1A01	; 0x801a01 <__brkval>
    543e:	30 91 02 1a 	lds	r19, 0x1A02	; 0x801a02 <__brkval+0x1>
    5442:	28 17       	cp	r18, r24
    5444:	39 07       	cpc	r19, r25
    5446:	69 f4       	brne	.+26     	; 0x5462 <free+0x10c>
    5448:	30 97       	sbiw	r30, 0x00	; 0
    544a:	29 f4       	brne	.+10     	; 0x5456 <free+0x100>
    544c:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <__flp+0x1>
    5450:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <__flp>
    5454:	02 c0       	rjmp	.+4      	; 0x545a <free+0x104>
    5456:	13 82       	std	Z+3, r1	; 0x03
    5458:	12 82       	std	Z+2, r1	; 0x02
    545a:	b0 93 02 1a 	sts	0x1A02, r27	; 0x801a02 <__brkval+0x1>
    545e:	a0 93 01 1a 	sts	0x1A01, r26	; 0x801a01 <__brkval>
    5462:	df 91       	pop	r29
    5464:	cf 91       	pop	r28
    5466:	08 95       	ret

00005468 <abort>:
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	f8 94       	cli
    546e:	7d c3       	rjmp	.+1786   	; 0x5b6a <_exit>

00005470 <memcpy>:
    5470:	fb 01       	movw	r30, r22
    5472:	dc 01       	movw	r26, r24
    5474:	02 c0       	rjmp	.+4      	; 0x547a <memcpy+0xa>
    5476:	01 90       	ld	r0, Z+
    5478:	0d 92       	st	X+, r0
    547a:	41 50       	subi	r20, 0x01	; 1
    547c:	50 40       	sbci	r21, 0x00	; 0
    547e:	d8 f7       	brcc	.-10     	; 0x5476 <memcpy+0x6>
    5480:	08 95       	ret

00005482 <memset>:
    5482:	dc 01       	movw	r26, r24
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <memset+0x6>
    5486:	6d 93       	st	X+, r22
    5488:	41 50       	subi	r20, 0x01	; 1
    548a:	50 40       	sbci	r21, 0x00	; 0
    548c:	e0 f7       	brcc	.-8      	; 0x5486 <memset+0x4>
    548e:	08 95       	ret

00005490 <strcasestr>:
    5490:	fb 01       	movw	r30, r22
    5492:	51 91       	ld	r21, Z+
    5494:	55 23       	and	r21, r21
    5496:	b1 f0       	breq	.+44     	; 0x54c4 <strcasestr+0x34>
    5498:	bf 01       	movw	r22, r30
    549a:	dc 01       	movw	r26, r24
    549c:	05 2e       	mov	r0, r21
    549e:	4d 91       	ld	r20, X+
    54a0:	44 23       	and	r20, r20
    54a2:	69 f0       	breq	.+26     	; 0x54be <strcasestr+0x2e>
    54a4:	10 d0       	rcall	.+32     	; 0x54c6 <strcasestr+0x36>
    54a6:	d9 f7       	brne	.-10     	; 0x549e <strcasestr+0xe>
    54a8:	cd 01       	movw	r24, r26
    54aa:	01 90       	ld	r0, Z+
    54ac:	00 20       	and	r0, r0
    54ae:	49 f0       	breq	.+18     	; 0x54c2 <strcasestr+0x32>
    54b0:	4d 91       	ld	r20, X+
    54b2:	41 11       	cpse	r20, r1
    54b4:	08 d0       	rcall	.+16     	; 0x54c6 <strcasestr+0x36>
    54b6:	c9 f3       	breq	.-14     	; 0x54aa <strcasestr+0x1a>
    54b8:	fb 01       	movw	r30, r22
    54ba:	41 11       	cpse	r20, r1
    54bc:	ee cf       	rjmp	.-36     	; 0x549a <strcasestr+0xa>
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	01 97       	sbiw	r24, 0x01	; 1
    54c4:	08 95       	ret
    54c6:	40 25       	eor	r20, r0
    54c8:	39 f0       	breq	.+14     	; 0x54d8 <strcasestr+0x48>
    54ca:	40 32       	cpi	r20, 0x20	; 32
    54cc:	29 f4       	brne	.+10     	; 0x54d8 <strcasestr+0x48>
    54ce:	40 29       	or	r20, r0
    54d0:	4b 57       	subi	r20, 0x7B	; 123
    54d2:	46 5e       	subi	r20, 0xE6	; 230
    54d4:	08 f0       	brcs	.+2      	; 0x54d8 <strcasestr+0x48>
    54d6:	18 94       	sez
    54d8:	08 95       	ret

000054da <strcat>:
    54da:	fb 01       	movw	r30, r22
    54dc:	dc 01       	movw	r26, r24
    54de:	0d 90       	ld	r0, X+
    54e0:	00 20       	and	r0, r0
    54e2:	e9 f7       	brne	.-6      	; 0x54de <strcat+0x4>
    54e4:	11 97       	sbiw	r26, 0x01	; 1
    54e6:	01 90       	ld	r0, Z+
    54e8:	0d 92       	st	X+, r0
    54ea:	00 20       	and	r0, r0
    54ec:	e1 f7       	brne	.-8      	; 0x54e6 <strcat+0xc>
    54ee:	08 95       	ret

000054f0 <strcpy>:
    54f0:	fb 01       	movw	r30, r22
    54f2:	dc 01       	movw	r26, r24
    54f4:	01 90       	ld	r0, Z+
    54f6:	0d 92       	st	X+, r0
    54f8:	00 20       	and	r0, r0
    54fa:	e1 f7       	brne	.-8      	; 0x54f4 <strcpy+0x4>
    54fc:	08 95       	ret

000054fe <strncasecmp>:
    54fe:	fb 01       	movw	r30, r22
    5500:	dc 01       	movw	r26, r24
    5502:	41 50       	subi	r20, 0x01	; 1
    5504:	50 40       	sbci	r21, 0x00	; 0
    5506:	88 f0       	brcs	.+34     	; 0x552a <strncasecmp+0x2c>
    5508:	8d 91       	ld	r24, X+
    550a:	81 34       	cpi	r24, 0x41	; 65
    550c:	1c f0       	brlt	.+6      	; 0x5514 <strncasecmp+0x16>
    550e:	8b 35       	cpi	r24, 0x5B	; 91
    5510:	0c f4       	brge	.+2      	; 0x5514 <strncasecmp+0x16>
    5512:	80 5e       	subi	r24, 0xE0	; 224
    5514:	61 91       	ld	r22, Z+
    5516:	61 34       	cpi	r22, 0x41	; 65
    5518:	1c f0       	brlt	.+6      	; 0x5520 <strncasecmp+0x22>
    551a:	6b 35       	cpi	r22, 0x5B	; 91
    551c:	0c f4       	brge	.+2      	; 0x5520 <strncasecmp+0x22>
    551e:	60 5e       	subi	r22, 0xE0	; 224
    5520:	86 1b       	sub	r24, r22
    5522:	61 11       	cpse	r22, r1
    5524:	71 f3       	breq	.-36     	; 0x5502 <strncasecmp+0x4>
    5526:	99 0b       	sbc	r25, r25
    5528:	08 95       	ret
    552a:	88 1b       	sub	r24, r24
    552c:	fc cf       	rjmp	.-8      	; 0x5526 <strncasecmp+0x28>

0000552e <printf>:
    552e:	cf 93       	push	r28
    5530:	df 93       	push	r29
    5532:	cd b7       	in	r28, 0x3d	; 61
    5534:	de b7       	in	r29, 0x3e	; 62
    5536:	ae 01       	movw	r20, r28
    5538:	4a 5f       	subi	r20, 0xFA	; 250
    553a:	5f 4f       	sbci	r21, 0xFF	; 255
    553c:	fa 01       	movw	r30, r20
    553e:	61 91       	ld	r22, Z+
    5540:	71 91       	ld	r23, Z+
    5542:	af 01       	movw	r20, r30
    5544:	80 91 07 1a 	lds	r24, 0x1A07	; 0x801a07 <__iob+0x2>
    5548:	90 91 08 1a 	lds	r25, 0x1A08	; 0x801a08 <__iob+0x3>
    554c:	61 d0       	rcall	.+194    	; 0x5610 <vfprintf>
    554e:	df 91       	pop	r29
    5550:	cf 91       	pop	r28
    5552:	08 95       	ret

00005554 <puts>:
    5554:	0f 93       	push	r16
    5556:	1f 93       	push	r17
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	e0 91 07 1a 	lds	r30, 0x1A07	; 0x801a07 <__iob+0x2>
    5560:	f0 91 08 1a 	lds	r31, 0x1A08	; 0x801a08 <__iob+0x3>
    5564:	23 81       	ldd	r18, Z+3	; 0x03
    5566:	21 ff       	sbrs	r18, 1
    5568:	1b c0       	rjmp	.+54     	; 0x55a0 <puts+0x4c>
    556a:	8c 01       	movw	r16, r24
    556c:	d0 e0       	ldi	r29, 0x00	; 0
    556e:	c0 e0       	ldi	r28, 0x00	; 0
    5570:	f8 01       	movw	r30, r16
    5572:	81 91       	ld	r24, Z+
    5574:	8f 01       	movw	r16, r30
    5576:	60 91 07 1a 	lds	r22, 0x1A07	; 0x801a07 <__iob+0x2>
    557a:	70 91 08 1a 	lds	r23, 0x1A08	; 0x801a08 <__iob+0x3>
    557e:	db 01       	movw	r26, r22
    5580:	18 96       	adiw	r26, 0x08	; 8
    5582:	ed 91       	ld	r30, X+
    5584:	fc 91       	ld	r31, X
    5586:	19 97       	sbiw	r26, 0x09	; 9
    5588:	88 23       	and	r24, r24
    558a:	31 f0       	breq	.+12     	; 0x5598 <puts+0x44>
    558c:	19 95       	eicall
    558e:	89 2b       	or	r24, r25
    5590:	79 f3       	breq	.-34     	; 0x5570 <puts+0x1c>
    5592:	df ef       	ldi	r29, 0xFF	; 255
    5594:	cf ef       	ldi	r28, 0xFF	; 255
    5596:	ec cf       	rjmp	.-40     	; 0x5570 <puts+0x1c>
    5598:	8a e0       	ldi	r24, 0x0A	; 10
    559a:	19 95       	eicall
    559c:	89 2b       	or	r24, r25
    559e:	19 f0       	breq	.+6      	; 0x55a6 <puts+0x52>
    55a0:	8f ef       	ldi	r24, 0xFF	; 255
    55a2:	9f ef       	ldi	r25, 0xFF	; 255
    55a4:	02 c0       	rjmp	.+4      	; 0x55aa <puts+0x56>
    55a6:	8d 2f       	mov	r24, r29
    55a8:	9c 2f       	mov	r25, r28
    55aa:	df 91       	pop	r29
    55ac:	cf 91       	pop	r28
    55ae:	1f 91       	pop	r17
    55b0:	0f 91       	pop	r16
    55b2:	08 95       	ret

000055b4 <sprintf>:
    55b4:	0f 93       	push	r16
    55b6:	1f 93       	push	r17
    55b8:	cf 93       	push	r28
    55ba:	df 93       	push	r29
    55bc:	cd b7       	in	r28, 0x3d	; 61
    55be:	de b7       	in	r29, 0x3e	; 62
    55c0:	2e 97       	sbiw	r28, 0x0e	; 14
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	f8 94       	cli
    55c6:	de bf       	out	0x3e, r29	; 62
    55c8:	0f be       	out	0x3f, r0	; 63
    55ca:	cd bf       	out	0x3d, r28	; 61
    55cc:	0e 89       	ldd	r16, Y+22	; 0x16
    55ce:	1f 89       	ldd	r17, Y+23	; 0x17
    55d0:	86 e0       	ldi	r24, 0x06	; 6
    55d2:	8c 83       	std	Y+4, r24	; 0x04
    55d4:	1a 83       	std	Y+2, r17	; 0x02
    55d6:	09 83       	std	Y+1, r16	; 0x01
    55d8:	8f ef       	ldi	r24, 0xFF	; 255
    55da:	9f e7       	ldi	r25, 0x7F	; 127
    55dc:	9e 83       	std	Y+6, r25	; 0x06
    55de:	8d 83       	std	Y+5, r24	; 0x05
    55e0:	ae 01       	movw	r20, r28
    55e2:	46 5e       	subi	r20, 0xE6	; 230
    55e4:	5f 4f       	sbci	r21, 0xFF	; 255
    55e6:	68 8d       	ldd	r22, Y+24	; 0x18
    55e8:	79 8d       	ldd	r23, Y+25	; 0x19
    55ea:	ce 01       	movw	r24, r28
    55ec:	01 96       	adiw	r24, 0x01	; 1
    55ee:	10 d0       	rcall	.+32     	; 0x5610 <vfprintf>
    55f0:	ef 81       	ldd	r30, Y+7	; 0x07
    55f2:	f8 85       	ldd	r31, Y+8	; 0x08
    55f4:	e0 0f       	add	r30, r16
    55f6:	f1 1f       	adc	r31, r17
    55f8:	10 82       	st	Z, r1
    55fa:	2e 96       	adiw	r28, 0x0e	; 14
    55fc:	0f b6       	in	r0, 0x3f	; 63
    55fe:	f8 94       	cli
    5600:	de bf       	out	0x3e, r29	; 62
    5602:	0f be       	out	0x3f, r0	; 63
    5604:	cd bf       	out	0x3d, r28	; 61
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	1f 91       	pop	r17
    560c:	0f 91       	pop	r16
    560e:	08 95       	ret

00005610 <vfprintf>:
    5610:	2f 92       	push	r2
    5612:	3f 92       	push	r3
    5614:	4f 92       	push	r4
    5616:	5f 92       	push	r5
    5618:	6f 92       	push	r6
    561a:	7f 92       	push	r7
    561c:	8f 92       	push	r8
    561e:	9f 92       	push	r9
    5620:	af 92       	push	r10
    5622:	bf 92       	push	r11
    5624:	cf 92       	push	r12
    5626:	df 92       	push	r13
    5628:	ef 92       	push	r14
    562a:	ff 92       	push	r15
    562c:	0f 93       	push	r16
    562e:	1f 93       	push	r17
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	cd b7       	in	r28, 0x3d	; 61
    5636:	de b7       	in	r29, 0x3e	; 62
    5638:	2b 97       	sbiw	r28, 0x0b	; 11
    563a:	0f b6       	in	r0, 0x3f	; 63
    563c:	f8 94       	cli
    563e:	de bf       	out	0x3e, r29	; 62
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	cd bf       	out	0x3d, r28	; 61
    5644:	6c 01       	movw	r12, r24
    5646:	7b 01       	movw	r14, r22
    5648:	8a 01       	movw	r16, r20
    564a:	fc 01       	movw	r30, r24
    564c:	17 82       	std	Z+7, r1	; 0x07
    564e:	16 82       	std	Z+6, r1	; 0x06
    5650:	83 81       	ldd	r24, Z+3	; 0x03
    5652:	81 ff       	sbrs	r24, 1
    5654:	bf c1       	rjmp	.+894    	; 0x59d4 <vfprintf+0x3c4>
    5656:	ce 01       	movw	r24, r28
    5658:	01 96       	adiw	r24, 0x01	; 1
    565a:	3c 01       	movw	r6, r24
    565c:	f6 01       	movw	r30, r12
    565e:	93 81       	ldd	r25, Z+3	; 0x03
    5660:	f7 01       	movw	r30, r14
    5662:	93 fd       	sbrc	r25, 3
    5664:	85 91       	lpm	r24, Z+
    5666:	93 ff       	sbrs	r25, 3
    5668:	81 91       	ld	r24, Z+
    566a:	7f 01       	movw	r14, r30
    566c:	88 23       	and	r24, r24
    566e:	09 f4       	brne	.+2      	; 0x5672 <vfprintf+0x62>
    5670:	ad c1       	rjmp	.+858    	; 0x59cc <vfprintf+0x3bc>
    5672:	85 32       	cpi	r24, 0x25	; 37
    5674:	39 f4       	brne	.+14     	; 0x5684 <vfprintf+0x74>
    5676:	93 fd       	sbrc	r25, 3
    5678:	85 91       	lpm	r24, Z+
    567a:	93 ff       	sbrs	r25, 3
    567c:	81 91       	ld	r24, Z+
    567e:	7f 01       	movw	r14, r30
    5680:	85 32       	cpi	r24, 0x25	; 37
    5682:	21 f4       	brne	.+8      	; 0x568c <vfprintf+0x7c>
    5684:	b6 01       	movw	r22, r12
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	d6 d1       	rcall	.+940    	; 0x5a36 <fputc>
    568a:	e8 cf       	rjmp	.-48     	; 0x565c <vfprintf+0x4c>
    568c:	91 2c       	mov	r9, r1
    568e:	21 2c       	mov	r2, r1
    5690:	31 2c       	mov	r3, r1
    5692:	ff e1       	ldi	r31, 0x1F	; 31
    5694:	f3 15       	cp	r31, r3
    5696:	d8 f0       	brcs	.+54     	; 0x56ce <vfprintf+0xbe>
    5698:	8b 32       	cpi	r24, 0x2B	; 43
    569a:	79 f0       	breq	.+30     	; 0x56ba <vfprintf+0xaa>
    569c:	38 f4       	brcc	.+14     	; 0x56ac <vfprintf+0x9c>
    569e:	80 32       	cpi	r24, 0x20	; 32
    56a0:	79 f0       	breq	.+30     	; 0x56c0 <vfprintf+0xb0>
    56a2:	83 32       	cpi	r24, 0x23	; 35
    56a4:	a1 f4       	brne	.+40     	; 0x56ce <vfprintf+0xbe>
    56a6:	23 2d       	mov	r18, r3
    56a8:	20 61       	ori	r18, 0x10	; 16
    56aa:	1d c0       	rjmp	.+58     	; 0x56e6 <vfprintf+0xd6>
    56ac:	8d 32       	cpi	r24, 0x2D	; 45
    56ae:	61 f0       	breq	.+24     	; 0x56c8 <vfprintf+0xb8>
    56b0:	80 33       	cpi	r24, 0x30	; 48
    56b2:	69 f4       	brne	.+26     	; 0x56ce <vfprintf+0xbe>
    56b4:	23 2d       	mov	r18, r3
    56b6:	21 60       	ori	r18, 0x01	; 1
    56b8:	16 c0       	rjmp	.+44     	; 0x56e6 <vfprintf+0xd6>
    56ba:	83 2d       	mov	r24, r3
    56bc:	82 60       	ori	r24, 0x02	; 2
    56be:	38 2e       	mov	r3, r24
    56c0:	e3 2d       	mov	r30, r3
    56c2:	e4 60       	ori	r30, 0x04	; 4
    56c4:	3e 2e       	mov	r3, r30
    56c6:	2a c0       	rjmp	.+84     	; 0x571c <vfprintf+0x10c>
    56c8:	f3 2d       	mov	r31, r3
    56ca:	f8 60       	ori	r31, 0x08	; 8
    56cc:	1d c0       	rjmp	.+58     	; 0x5708 <vfprintf+0xf8>
    56ce:	37 fc       	sbrc	r3, 7
    56d0:	2d c0       	rjmp	.+90     	; 0x572c <vfprintf+0x11c>
    56d2:	20 ed       	ldi	r18, 0xD0	; 208
    56d4:	28 0f       	add	r18, r24
    56d6:	2a 30       	cpi	r18, 0x0A	; 10
    56d8:	40 f0       	brcs	.+16     	; 0x56ea <vfprintf+0xda>
    56da:	8e 32       	cpi	r24, 0x2E	; 46
    56dc:	b9 f4       	brne	.+46     	; 0x570c <vfprintf+0xfc>
    56de:	36 fc       	sbrc	r3, 6
    56e0:	75 c1       	rjmp	.+746    	; 0x59cc <vfprintf+0x3bc>
    56e2:	23 2d       	mov	r18, r3
    56e4:	20 64       	ori	r18, 0x40	; 64
    56e6:	32 2e       	mov	r3, r18
    56e8:	19 c0       	rjmp	.+50     	; 0x571c <vfprintf+0x10c>
    56ea:	36 fe       	sbrs	r3, 6
    56ec:	06 c0       	rjmp	.+12     	; 0x56fa <vfprintf+0xea>
    56ee:	8a e0       	ldi	r24, 0x0A	; 10
    56f0:	98 9e       	mul	r9, r24
    56f2:	20 0d       	add	r18, r0
    56f4:	11 24       	eor	r1, r1
    56f6:	92 2e       	mov	r9, r18
    56f8:	11 c0       	rjmp	.+34     	; 0x571c <vfprintf+0x10c>
    56fa:	ea e0       	ldi	r30, 0x0A	; 10
    56fc:	2e 9e       	mul	r2, r30
    56fe:	20 0d       	add	r18, r0
    5700:	11 24       	eor	r1, r1
    5702:	22 2e       	mov	r2, r18
    5704:	f3 2d       	mov	r31, r3
    5706:	f0 62       	ori	r31, 0x20	; 32
    5708:	3f 2e       	mov	r3, r31
    570a:	08 c0       	rjmp	.+16     	; 0x571c <vfprintf+0x10c>
    570c:	8c 36       	cpi	r24, 0x6C	; 108
    570e:	21 f4       	brne	.+8      	; 0x5718 <vfprintf+0x108>
    5710:	83 2d       	mov	r24, r3
    5712:	80 68       	ori	r24, 0x80	; 128
    5714:	38 2e       	mov	r3, r24
    5716:	02 c0       	rjmp	.+4      	; 0x571c <vfprintf+0x10c>
    5718:	88 36       	cpi	r24, 0x68	; 104
    571a:	41 f4       	brne	.+16     	; 0x572c <vfprintf+0x11c>
    571c:	f7 01       	movw	r30, r14
    571e:	93 fd       	sbrc	r25, 3
    5720:	85 91       	lpm	r24, Z+
    5722:	93 ff       	sbrs	r25, 3
    5724:	81 91       	ld	r24, Z+
    5726:	7f 01       	movw	r14, r30
    5728:	81 11       	cpse	r24, r1
    572a:	b3 cf       	rjmp	.-154    	; 0x5692 <vfprintf+0x82>
    572c:	98 2f       	mov	r25, r24
    572e:	9f 7d       	andi	r25, 0xDF	; 223
    5730:	95 54       	subi	r25, 0x45	; 69
    5732:	93 30       	cpi	r25, 0x03	; 3
    5734:	28 f4       	brcc	.+10     	; 0x5740 <vfprintf+0x130>
    5736:	0c 5f       	subi	r16, 0xFC	; 252
    5738:	1f 4f       	sbci	r17, 0xFF	; 255
    573a:	9f e3       	ldi	r25, 0x3F	; 63
    573c:	99 83       	std	Y+1, r25	; 0x01
    573e:	0d c0       	rjmp	.+26     	; 0x575a <vfprintf+0x14a>
    5740:	83 36       	cpi	r24, 0x63	; 99
    5742:	31 f0       	breq	.+12     	; 0x5750 <vfprintf+0x140>
    5744:	83 37       	cpi	r24, 0x73	; 115
    5746:	71 f0       	breq	.+28     	; 0x5764 <vfprintf+0x154>
    5748:	83 35       	cpi	r24, 0x53	; 83
    574a:	09 f0       	breq	.+2      	; 0x574e <vfprintf+0x13e>
    574c:	55 c0       	rjmp	.+170    	; 0x57f8 <vfprintf+0x1e8>
    574e:	20 c0       	rjmp	.+64     	; 0x5790 <vfprintf+0x180>
    5750:	f8 01       	movw	r30, r16
    5752:	80 81       	ld	r24, Z
    5754:	89 83       	std	Y+1, r24	; 0x01
    5756:	0e 5f       	subi	r16, 0xFE	; 254
    5758:	1f 4f       	sbci	r17, 0xFF	; 255
    575a:	88 24       	eor	r8, r8
    575c:	83 94       	inc	r8
    575e:	91 2c       	mov	r9, r1
    5760:	53 01       	movw	r10, r6
    5762:	12 c0       	rjmp	.+36     	; 0x5788 <vfprintf+0x178>
    5764:	28 01       	movw	r4, r16
    5766:	f2 e0       	ldi	r31, 0x02	; 2
    5768:	4f 0e       	add	r4, r31
    576a:	51 1c       	adc	r5, r1
    576c:	f8 01       	movw	r30, r16
    576e:	a0 80       	ld	r10, Z
    5770:	b1 80       	ldd	r11, Z+1	; 0x01
    5772:	36 fe       	sbrs	r3, 6
    5774:	03 c0       	rjmp	.+6      	; 0x577c <vfprintf+0x16c>
    5776:	69 2d       	mov	r22, r9
    5778:	70 e0       	ldi	r23, 0x00	; 0
    577a:	02 c0       	rjmp	.+4      	; 0x5780 <vfprintf+0x170>
    577c:	6f ef       	ldi	r22, 0xFF	; 255
    577e:	7f ef       	ldi	r23, 0xFF	; 255
    5780:	c5 01       	movw	r24, r10
    5782:	4e d1       	rcall	.+668    	; 0x5a20 <strnlen>
    5784:	4c 01       	movw	r8, r24
    5786:	82 01       	movw	r16, r4
    5788:	f3 2d       	mov	r31, r3
    578a:	ff 77       	andi	r31, 0x7F	; 127
    578c:	3f 2e       	mov	r3, r31
    578e:	15 c0       	rjmp	.+42     	; 0x57ba <vfprintf+0x1aa>
    5790:	28 01       	movw	r4, r16
    5792:	22 e0       	ldi	r18, 0x02	; 2
    5794:	42 0e       	add	r4, r18
    5796:	51 1c       	adc	r5, r1
    5798:	f8 01       	movw	r30, r16
    579a:	a0 80       	ld	r10, Z
    579c:	b1 80       	ldd	r11, Z+1	; 0x01
    579e:	36 fe       	sbrs	r3, 6
    57a0:	03 c0       	rjmp	.+6      	; 0x57a8 <vfprintf+0x198>
    57a2:	69 2d       	mov	r22, r9
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	02 c0       	rjmp	.+4      	; 0x57ac <vfprintf+0x19c>
    57a8:	6f ef       	ldi	r22, 0xFF	; 255
    57aa:	7f ef       	ldi	r23, 0xFF	; 255
    57ac:	c5 01       	movw	r24, r10
    57ae:	2d d1       	rcall	.+602    	; 0x5a0a <strnlen_P>
    57b0:	4c 01       	movw	r8, r24
    57b2:	f3 2d       	mov	r31, r3
    57b4:	f0 68       	ori	r31, 0x80	; 128
    57b6:	3f 2e       	mov	r3, r31
    57b8:	82 01       	movw	r16, r4
    57ba:	33 fc       	sbrc	r3, 3
    57bc:	19 c0       	rjmp	.+50     	; 0x57f0 <vfprintf+0x1e0>
    57be:	82 2d       	mov	r24, r2
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	88 16       	cp	r8, r24
    57c4:	99 06       	cpc	r9, r25
    57c6:	a0 f4       	brcc	.+40     	; 0x57f0 <vfprintf+0x1e0>
    57c8:	b6 01       	movw	r22, r12
    57ca:	80 e2       	ldi	r24, 0x20	; 32
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	33 d1       	rcall	.+614    	; 0x5a36 <fputc>
    57d0:	2a 94       	dec	r2
    57d2:	f5 cf       	rjmp	.-22     	; 0x57be <vfprintf+0x1ae>
    57d4:	f5 01       	movw	r30, r10
    57d6:	37 fc       	sbrc	r3, 7
    57d8:	85 91       	lpm	r24, Z+
    57da:	37 fe       	sbrs	r3, 7
    57dc:	81 91       	ld	r24, Z+
    57de:	5f 01       	movw	r10, r30
    57e0:	b6 01       	movw	r22, r12
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	28 d1       	rcall	.+592    	; 0x5a36 <fputc>
    57e6:	21 10       	cpse	r2, r1
    57e8:	2a 94       	dec	r2
    57ea:	21 e0       	ldi	r18, 0x01	; 1
    57ec:	82 1a       	sub	r8, r18
    57ee:	91 08       	sbc	r9, r1
    57f0:	81 14       	cp	r8, r1
    57f2:	91 04       	cpc	r9, r1
    57f4:	79 f7       	brne	.-34     	; 0x57d4 <vfprintf+0x1c4>
    57f6:	e1 c0       	rjmp	.+450    	; 0x59ba <vfprintf+0x3aa>
    57f8:	84 36       	cpi	r24, 0x64	; 100
    57fa:	11 f0       	breq	.+4      	; 0x5800 <vfprintf+0x1f0>
    57fc:	89 36       	cpi	r24, 0x69	; 105
    57fe:	39 f5       	brne	.+78     	; 0x584e <vfprintf+0x23e>
    5800:	f8 01       	movw	r30, r16
    5802:	37 fe       	sbrs	r3, 7
    5804:	07 c0       	rjmp	.+14     	; 0x5814 <vfprintf+0x204>
    5806:	60 81       	ld	r22, Z
    5808:	71 81       	ldd	r23, Z+1	; 0x01
    580a:	82 81       	ldd	r24, Z+2	; 0x02
    580c:	93 81       	ldd	r25, Z+3	; 0x03
    580e:	0c 5f       	subi	r16, 0xFC	; 252
    5810:	1f 4f       	sbci	r17, 0xFF	; 255
    5812:	08 c0       	rjmp	.+16     	; 0x5824 <vfprintf+0x214>
    5814:	60 81       	ld	r22, Z
    5816:	71 81       	ldd	r23, Z+1	; 0x01
    5818:	07 2e       	mov	r0, r23
    581a:	00 0c       	add	r0, r0
    581c:	88 0b       	sbc	r24, r24
    581e:	99 0b       	sbc	r25, r25
    5820:	0e 5f       	subi	r16, 0xFE	; 254
    5822:	1f 4f       	sbci	r17, 0xFF	; 255
    5824:	f3 2d       	mov	r31, r3
    5826:	ff 76       	andi	r31, 0x6F	; 111
    5828:	3f 2e       	mov	r3, r31
    582a:	97 ff       	sbrs	r25, 7
    582c:	09 c0       	rjmp	.+18     	; 0x5840 <vfprintf+0x230>
    582e:	90 95       	com	r25
    5830:	80 95       	com	r24
    5832:	70 95       	com	r23
    5834:	61 95       	neg	r22
    5836:	7f 4f       	sbci	r23, 0xFF	; 255
    5838:	8f 4f       	sbci	r24, 0xFF	; 255
    583a:	9f 4f       	sbci	r25, 0xFF	; 255
    583c:	f0 68       	ori	r31, 0x80	; 128
    583e:	3f 2e       	mov	r3, r31
    5840:	2a e0       	ldi	r18, 0x0A	; 10
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	a3 01       	movw	r20, r6
    5846:	33 d1       	rcall	.+614    	; 0x5aae <__ultoa_invert>
    5848:	88 2e       	mov	r8, r24
    584a:	86 18       	sub	r8, r6
    584c:	44 c0       	rjmp	.+136    	; 0x58d6 <vfprintf+0x2c6>
    584e:	85 37       	cpi	r24, 0x75	; 117
    5850:	31 f4       	brne	.+12     	; 0x585e <vfprintf+0x24e>
    5852:	23 2d       	mov	r18, r3
    5854:	2f 7e       	andi	r18, 0xEF	; 239
    5856:	b2 2e       	mov	r11, r18
    5858:	2a e0       	ldi	r18, 0x0A	; 10
    585a:	30 e0       	ldi	r19, 0x00	; 0
    585c:	25 c0       	rjmp	.+74     	; 0x58a8 <vfprintf+0x298>
    585e:	93 2d       	mov	r25, r3
    5860:	99 7f       	andi	r25, 0xF9	; 249
    5862:	b9 2e       	mov	r11, r25
    5864:	8f 36       	cpi	r24, 0x6F	; 111
    5866:	c1 f0       	breq	.+48     	; 0x5898 <vfprintf+0x288>
    5868:	18 f4       	brcc	.+6      	; 0x5870 <vfprintf+0x260>
    586a:	88 35       	cpi	r24, 0x58	; 88
    586c:	79 f0       	breq	.+30     	; 0x588c <vfprintf+0x27c>
    586e:	ae c0       	rjmp	.+348    	; 0x59cc <vfprintf+0x3bc>
    5870:	80 37       	cpi	r24, 0x70	; 112
    5872:	19 f0       	breq	.+6      	; 0x587a <vfprintf+0x26a>
    5874:	88 37       	cpi	r24, 0x78	; 120
    5876:	21 f0       	breq	.+8      	; 0x5880 <vfprintf+0x270>
    5878:	a9 c0       	rjmp	.+338    	; 0x59cc <vfprintf+0x3bc>
    587a:	e9 2f       	mov	r30, r25
    587c:	e0 61       	ori	r30, 0x10	; 16
    587e:	be 2e       	mov	r11, r30
    5880:	b4 fe       	sbrs	r11, 4
    5882:	0d c0       	rjmp	.+26     	; 0x589e <vfprintf+0x28e>
    5884:	fb 2d       	mov	r31, r11
    5886:	f4 60       	ori	r31, 0x04	; 4
    5888:	bf 2e       	mov	r11, r31
    588a:	09 c0       	rjmp	.+18     	; 0x589e <vfprintf+0x28e>
    588c:	34 fe       	sbrs	r3, 4
    588e:	0a c0       	rjmp	.+20     	; 0x58a4 <vfprintf+0x294>
    5890:	29 2f       	mov	r18, r25
    5892:	26 60       	ori	r18, 0x06	; 6
    5894:	b2 2e       	mov	r11, r18
    5896:	06 c0       	rjmp	.+12     	; 0x58a4 <vfprintf+0x294>
    5898:	28 e0       	ldi	r18, 0x08	; 8
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	05 c0       	rjmp	.+10     	; 0x58a8 <vfprintf+0x298>
    589e:	20 e1       	ldi	r18, 0x10	; 16
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	02 c0       	rjmp	.+4      	; 0x58a8 <vfprintf+0x298>
    58a4:	20 e1       	ldi	r18, 0x10	; 16
    58a6:	32 e0       	ldi	r19, 0x02	; 2
    58a8:	f8 01       	movw	r30, r16
    58aa:	b7 fe       	sbrs	r11, 7
    58ac:	07 c0       	rjmp	.+14     	; 0x58bc <vfprintf+0x2ac>
    58ae:	60 81       	ld	r22, Z
    58b0:	71 81       	ldd	r23, Z+1	; 0x01
    58b2:	82 81       	ldd	r24, Z+2	; 0x02
    58b4:	93 81       	ldd	r25, Z+3	; 0x03
    58b6:	0c 5f       	subi	r16, 0xFC	; 252
    58b8:	1f 4f       	sbci	r17, 0xFF	; 255
    58ba:	06 c0       	rjmp	.+12     	; 0x58c8 <vfprintf+0x2b8>
    58bc:	60 81       	ld	r22, Z
    58be:	71 81       	ldd	r23, Z+1	; 0x01
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	0e 5f       	subi	r16, 0xFE	; 254
    58c6:	1f 4f       	sbci	r17, 0xFF	; 255
    58c8:	a3 01       	movw	r20, r6
    58ca:	f1 d0       	rcall	.+482    	; 0x5aae <__ultoa_invert>
    58cc:	88 2e       	mov	r8, r24
    58ce:	86 18       	sub	r8, r6
    58d0:	fb 2d       	mov	r31, r11
    58d2:	ff 77       	andi	r31, 0x7F	; 127
    58d4:	3f 2e       	mov	r3, r31
    58d6:	36 fe       	sbrs	r3, 6
    58d8:	0d c0       	rjmp	.+26     	; 0x58f4 <vfprintf+0x2e4>
    58da:	23 2d       	mov	r18, r3
    58dc:	2e 7f       	andi	r18, 0xFE	; 254
    58de:	a2 2e       	mov	r10, r18
    58e0:	89 14       	cp	r8, r9
    58e2:	58 f4       	brcc	.+22     	; 0x58fa <vfprintf+0x2ea>
    58e4:	34 fe       	sbrs	r3, 4
    58e6:	0b c0       	rjmp	.+22     	; 0x58fe <vfprintf+0x2ee>
    58e8:	32 fc       	sbrc	r3, 2
    58ea:	09 c0       	rjmp	.+18     	; 0x58fe <vfprintf+0x2ee>
    58ec:	83 2d       	mov	r24, r3
    58ee:	8e 7e       	andi	r24, 0xEE	; 238
    58f0:	a8 2e       	mov	r10, r24
    58f2:	05 c0       	rjmp	.+10     	; 0x58fe <vfprintf+0x2ee>
    58f4:	b8 2c       	mov	r11, r8
    58f6:	a3 2c       	mov	r10, r3
    58f8:	03 c0       	rjmp	.+6      	; 0x5900 <vfprintf+0x2f0>
    58fa:	b8 2c       	mov	r11, r8
    58fc:	01 c0       	rjmp	.+2      	; 0x5900 <vfprintf+0x2f0>
    58fe:	b9 2c       	mov	r11, r9
    5900:	a4 fe       	sbrs	r10, 4
    5902:	0f c0       	rjmp	.+30     	; 0x5922 <vfprintf+0x312>
    5904:	fe 01       	movw	r30, r28
    5906:	e8 0d       	add	r30, r8
    5908:	f1 1d       	adc	r31, r1
    590a:	80 81       	ld	r24, Z
    590c:	80 33       	cpi	r24, 0x30	; 48
    590e:	21 f4       	brne	.+8      	; 0x5918 <vfprintf+0x308>
    5910:	9a 2d       	mov	r25, r10
    5912:	99 7e       	andi	r25, 0xE9	; 233
    5914:	a9 2e       	mov	r10, r25
    5916:	09 c0       	rjmp	.+18     	; 0x592a <vfprintf+0x31a>
    5918:	a2 fe       	sbrs	r10, 2
    591a:	06 c0       	rjmp	.+12     	; 0x5928 <vfprintf+0x318>
    591c:	b3 94       	inc	r11
    591e:	b3 94       	inc	r11
    5920:	04 c0       	rjmp	.+8      	; 0x592a <vfprintf+0x31a>
    5922:	8a 2d       	mov	r24, r10
    5924:	86 78       	andi	r24, 0x86	; 134
    5926:	09 f0       	breq	.+2      	; 0x592a <vfprintf+0x31a>
    5928:	b3 94       	inc	r11
    592a:	a3 fc       	sbrc	r10, 3
    592c:	10 c0       	rjmp	.+32     	; 0x594e <vfprintf+0x33e>
    592e:	a0 fe       	sbrs	r10, 0
    5930:	06 c0       	rjmp	.+12     	; 0x593e <vfprintf+0x32e>
    5932:	b2 14       	cp	r11, r2
    5934:	80 f4       	brcc	.+32     	; 0x5956 <vfprintf+0x346>
    5936:	28 0c       	add	r2, r8
    5938:	92 2c       	mov	r9, r2
    593a:	9b 18       	sub	r9, r11
    593c:	0d c0       	rjmp	.+26     	; 0x5958 <vfprintf+0x348>
    593e:	b2 14       	cp	r11, r2
    5940:	58 f4       	brcc	.+22     	; 0x5958 <vfprintf+0x348>
    5942:	b6 01       	movw	r22, r12
    5944:	80 e2       	ldi	r24, 0x20	; 32
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	76 d0       	rcall	.+236    	; 0x5a36 <fputc>
    594a:	b3 94       	inc	r11
    594c:	f8 cf       	rjmp	.-16     	; 0x593e <vfprintf+0x32e>
    594e:	b2 14       	cp	r11, r2
    5950:	18 f4       	brcc	.+6      	; 0x5958 <vfprintf+0x348>
    5952:	2b 18       	sub	r2, r11
    5954:	02 c0       	rjmp	.+4      	; 0x595a <vfprintf+0x34a>
    5956:	98 2c       	mov	r9, r8
    5958:	21 2c       	mov	r2, r1
    595a:	a4 fe       	sbrs	r10, 4
    595c:	0f c0       	rjmp	.+30     	; 0x597c <vfprintf+0x36c>
    595e:	b6 01       	movw	r22, r12
    5960:	80 e3       	ldi	r24, 0x30	; 48
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	68 d0       	rcall	.+208    	; 0x5a36 <fputc>
    5966:	a2 fe       	sbrs	r10, 2
    5968:	16 c0       	rjmp	.+44     	; 0x5996 <vfprintf+0x386>
    596a:	a1 fc       	sbrc	r10, 1
    596c:	03 c0       	rjmp	.+6      	; 0x5974 <vfprintf+0x364>
    596e:	88 e7       	ldi	r24, 0x78	; 120
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	02 c0       	rjmp	.+4      	; 0x5978 <vfprintf+0x368>
    5974:	88 e5       	ldi	r24, 0x58	; 88
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	b6 01       	movw	r22, r12
    597a:	0c c0       	rjmp	.+24     	; 0x5994 <vfprintf+0x384>
    597c:	8a 2d       	mov	r24, r10
    597e:	86 78       	andi	r24, 0x86	; 134
    5980:	51 f0       	breq	.+20     	; 0x5996 <vfprintf+0x386>
    5982:	a1 fe       	sbrs	r10, 1
    5984:	02 c0       	rjmp	.+4      	; 0x598a <vfprintf+0x37a>
    5986:	8b e2       	ldi	r24, 0x2B	; 43
    5988:	01 c0       	rjmp	.+2      	; 0x598c <vfprintf+0x37c>
    598a:	80 e2       	ldi	r24, 0x20	; 32
    598c:	a7 fc       	sbrc	r10, 7
    598e:	8d e2       	ldi	r24, 0x2D	; 45
    5990:	b6 01       	movw	r22, r12
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	50 d0       	rcall	.+160    	; 0x5a36 <fputc>
    5996:	89 14       	cp	r8, r9
    5998:	30 f4       	brcc	.+12     	; 0x59a6 <vfprintf+0x396>
    599a:	b6 01       	movw	r22, r12
    599c:	80 e3       	ldi	r24, 0x30	; 48
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	4a d0       	rcall	.+148    	; 0x5a36 <fputc>
    59a2:	9a 94       	dec	r9
    59a4:	f8 cf       	rjmp	.-16     	; 0x5996 <vfprintf+0x386>
    59a6:	8a 94       	dec	r8
    59a8:	f3 01       	movw	r30, r6
    59aa:	e8 0d       	add	r30, r8
    59ac:	f1 1d       	adc	r31, r1
    59ae:	80 81       	ld	r24, Z
    59b0:	b6 01       	movw	r22, r12
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	40 d0       	rcall	.+128    	; 0x5a36 <fputc>
    59b6:	81 10       	cpse	r8, r1
    59b8:	f6 cf       	rjmp	.-20     	; 0x59a6 <vfprintf+0x396>
    59ba:	22 20       	and	r2, r2
    59bc:	09 f4       	brne	.+2      	; 0x59c0 <vfprintf+0x3b0>
    59be:	4e ce       	rjmp	.-868    	; 0x565c <vfprintf+0x4c>
    59c0:	b6 01       	movw	r22, r12
    59c2:	80 e2       	ldi	r24, 0x20	; 32
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	37 d0       	rcall	.+110    	; 0x5a36 <fputc>
    59c8:	2a 94       	dec	r2
    59ca:	f7 cf       	rjmp	.-18     	; 0x59ba <vfprintf+0x3aa>
    59cc:	f6 01       	movw	r30, r12
    59ce:	86 81       	ldd	r24, Z+6	; 0x06
    59d0:	97 81       	ldd	r25, Z+7	; 0x07
    59d2:	02 c0       	rjmp	.+4      	; 0x59d8 <vfprintf+0x3c8>
    59d4:	8f ef       	ldi	r24, 0xFF	; 255
    59d6:	9f ef       	ldi	r25, 0xFF	; 255
    59d8:	2b 96       	adiw	r28, 0x0b	; 11
    59da:	0f b6       	in	r0, 0x3f	; 63
    59dc:	f8 94       	cli
    59de:	de bf       	out	0x3e, r29	; 62
    59e0:	0f be       	out	0x3f, r0	; 63
    59e2:	cd bf       	out	0x3d, r28	; 61
    59e4:	df 91       	pop	r29
    59e6:	cf 91       	pop	r28
    59e8:	1f 91       	pop	r17
    59ea:	0f 91       	pop	r16
    59ec:	ff 90       	pop	r15
    59ee:	ef 90       	pop	r14
    59f0:	df 90       	pop	r13
    59f2:	cf 90       	pop	r12
    59f4:	bf 90       	pop	r11
    59f6:	af 90       	pop	r10
    59f8:	9f 90       	pop	r9
    59fa:	8f 90       	pop	r8
    59fc:	7f 90       	pop	r7
    59fe:	6f 90       	pop	r6
    5a00:	5f 90       	pop	r5
    5a02:	4f 90       	pop	r4
    5a04:	3f 90       	pop	r3
    5a06:	2f 90       	pop	r2
    5a08:	08 95       	ret

00005a0a <strnlen_P>:
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	05 90       	lpm	r0, Z+
    5a0e:	61 50       	subi	r22, 0x01	; 1
    5a10:	70 40       	sbci	r23, 0x00	; 0
    5a12:	01 10       	cpse	r0, r1
    5a14:	d8 f7       	brcc	.-10     	; 0x5a0c <strnlen_P+0x2>
    5a16:	80 95       	com	r24
    5a18:	90 95       	com	r25
    5a1a:	8e 0f       	add	r24, r30
    5a1c:	9f 1f       	adc	r25, r31
    5a1e:	08 95       	ret

00005a20 <strnlen>:
    5a20:	fc 01       	movw	r30, r24
    5a22:	61 50       	subi	r22, 0x01	; 1
    5a24:	70 40       	sbci	r23, 0x00	; 0
    5a26:	01 90       	ld	r0, Z+
    5a28:	01 10       	cpse	r0, r1
    5a2a:	d8 f7       	brcc	.-10     	; 0x5a22 <strnlen+0x2>
    5a2c:	80 95       	com	r24
    5a2e:	90 95       	com	r25
    5a30:	8e 0f       	add	r24, r30
    5a32:	9f 1f       	adc	r25, r31
    5a34:	08 95       	ret

00005a36 <fputc>:
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	fb 01       	movw	r30, r22
    5a40:	23 81       	ldd	r18, Z+3	; 0x03
    5a42:	21 fd       	sbrc	r18, 1
    5a44:	03 c0       	rjmp	.+6      	; 0x5a4c <fputc+0x16>
    5a46:	8f ef       	ldi	r24, 0xFF	; 255
    5a48:	9f ef       	ldi	r25, 0xFF	; 255
    5a4a:	2c c0       	rjmp	.+88     	; 0x5aa4 <fputc+0x6e>
    5a4c:	22 ff       	sbrs	r18, 2
    5a4e:	16 c0       	rjmp	.+44     	; 0x5a7c <fputc+0x46>
    5a50:	46 81       	ldd	r20, Z+6	; 0x06
    5a52:	57 81       	ldd	r21, Z+7	; 0x07
    5a54:	24 81       	ldd	r18, Z+4	; 0x04
    5a56:	35 81       	ldd	r19, Z+5	; 0x05
    5a58:	42 17       	cp	r20, r18
    5a5a:	53 07       	cpc	r21, r19
    5a5c:	44 f4       	brge	.+16     	; 0x5a6e <fputc+0x38>
    5a5e:	a0 81       	ld	r26, Z
    5a60:	b1 81       	ldd	r27, Z+1	; 0x01
    5a62:	9d 01       	movw	r18, r26
    5a64:	2f 5f       	subi	r18, 0xFF	; 255
    5a66:	3f 4f       	sbci	r19, 0xFF	; 255
    5a68:	31 83       	std	Z+1, r19	; 0x01
    5a6a:	20 83       	st	Z, r18
    5a6c:	8c 93       	st	X, r24
    5a6e:	26 81       	ldd	r18, Z+6	; 0x06
    5a70:	37 81       	ldd	r19, Z+7	; 0x07
    5a72:	2f 5f       	subi	r18, 0xFF	; 255
    5a74:	3f 4f       	sbci	r19, 0xFF	; 255
    5a76:	37 83       	std	Z+7, r19	; 0x07
    5a78:	26 83       	std	Z+6, r18	; 0x06
    5a7a:	14 c0       	rjmp	.+40     	; 0x5aa4 <fputc+0x6e>
    5a7c:	8b 01       	movw	r16, r22
    5a7e:	ec 01       	movw	r28, r24
    5a80:	fb 01       	movw	r30, r22
    5a82:	00 84       	ldd	r0, Z+8	; 0x08
    5a84:	f1 85       	ldd	r31, Z+9	; 0x09
    5a86:	e0 2d       	mov	r30, r0
    5a88:	19 95       	eicall
    5a8a:	89 2b       	or	r24, r25
    5a8c:	e1 f6       	brne	.-72     	; 0x5a46 <fputc+0x10>
    5a8e:	d8 01       	movw	r26, r16
    5a90:	16 96       	adiw	r26, 0x06	; 6
    5a92:	8d 91       	ld	r24, X+
    5a94:	9c 91       	ld	r25, X
    5a96:	17 97       	sbiw	r26, 0x07	; 7
    5a98:	01 96       	adiw	r24, 0x01	; 1
    5a9a:	17 96       	adiw	r26, 0x07	; 7
    5a9c:	9c 93       	st	X, r25
    5a9e:	8e 93       	st	-X, r24
    5aa0:	16 97       	sbiw	r26, 0x06	; 6
    5aa2:	ce 01       	movw	r24, r28
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	08 95       	ret

00005aae <__ultoa_invert>:
    5aae:	fa 01       	movw	r30, r20
    5ab0:	aa 27       	eor	r26, r26
    5ab2:	28 30       	cpi	r18, 0x08	; 8
    5ab4:	51 f1       	breq	.+84     	; 0x5b0a <__ultoa_invert+0x5c>
    5ab6:	20 31       	cpi	r18, 0x10	; 16
    5ab8:	81 f1       	breq	.+96     	; 0x5b1a <__ultoa_invert+0x6c>
    5aba:	e8 94       	clt
    5abc:	6f 93       	push	r22
    5abe:	6e 7f       	andi	r22, 0xFE	; 254
    5ac0:	6e 5f       	subi	r22, 0xFE	; 254
    5ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac8:	af 4f       	sbci	r26, 0xFF	; 255
    5aca:	b1 e0       	ldi	r27, 0x01	; 1
    5acc:	3e d0       	rcall	.+124    	; 0x5b4a <__ultoa_invert+0x9c>
    5ace:	b4 e0       	ldi	r27, 0x04	; 4
    5ad0:	3c d0       	rcall	.+120    	; 0x5b4a <__ultoa_invert+0x9c>
    5ad2:	67 0f       	add	r22, r23
    5ad4:	78 1f       	adc	r23, r24
    5ad6:	89 1f       	adc	r24, r25
    5ad8:	9a 1f       	adc	r25, r26
    5ada:	a1 1d       	adc	r26, r1
    5adc:	68 0f       	add	r22, r24
    5ade:	79 1f       	adc	r23, r25
    5ae0:	8a 1f       	adc	r24, r26
    5ae2:	91 1d       	adc	r25, r1
    5ae4:	a1 1d       	adc	r26, r1
    5ae6:	6a 0f       	add	r22, r26
    5ae8:	71 1d       	adc	r23, r1
    5aea:	81 1d       	adc	r24, r1
    5aec:	91 1d       	adc	r25, r1
    5aee:	a1 1d       	adc	r26, r1
    5af0:	20 d0       	rcall	.+64     	; 0x5b32 <__ultoa_invert+0x84>
    5af2:	09 f4       	brne	.+2      	; 0x5af6 <__ultoa_invert+0x48>
    5af4:	68 94       	set
    5af6:	3f 91       	pop	r19
    5af8:	2a e0       	ldi	r18, 0x0A	; 10
    5afa:	26 9f       	mul	r18, r22
    5afc:	11 24       	eor	r1, r1
    5afe:	30 19       	sub	r19, r0
    5b00:	30 5d       	subi	r19, 0xD0	; 208
    5b02:	31 93       	st	Z+, r19
    5b04:	de f6       	brtc	.-74     	; 0x5abc <__ultoa_invert+0xe>
    5b06:	cf 01       	movw	r24, r30
    5b08:	08 95       	ret
    5b0a:	46 2f       	mov	r20, r22
    5b0c:	47 70       	andi	r20, 0x07	; 7
    5b0e:	40 5d       	subi	r20, 0xD0	; 208
    5b10:	41 93       	st	Z+, r20
    5b12:	b3 e0       	ldi	r27, 0x03	; 3
    5b14:	0f d0       	rcall	.+30     	; 0x5b34 <__ultoa_invert+0x86>
    5b16:	c9 f7       	brne	.-14     	; 0x5b0a <__ultoa_invert+0x5c>
    5b18:	f6 cf       	rjmp	.-20     	; 0x5b06 <__ultoa_invert+0x58>
    5b1a:	46 2f       	mov	r20, r22
    5b1c:	4f 70       	andi	r20, 0x0F	; 15
    5b1e:	40 5d       	subi	r20, 0xD0	; 208
    5b20:	4a 33       	cpi	r20, 0x3A	; 58
    5b22:	18 f0       	brcs	.+6      	; 0x5b2a <__ultoa_invert+0x7c>
    5b24:	49 5d       	subi	r20, 0xD9	; 217
    5b26:	31 fd       	sbrc	r19, 1
    5b28:	40 52       	subi	r20, 0x20	; 32
    5b2a:	41 93       	st	Z+, r20
    5b2c:	02 d0       	rcall	.+4      	; 0x5b32 <__ultoa_invert+0x84>
    5b2e:	a9 f7       	brne	.-22     	; 0x5b1a <__ultoa_invert+0x6c>
    5b30:	ea cf       	rjmp	.-44     	; 0x5b06 <__ultoa_invert+0x58>
    5b32:	b4 e0       	ldi	r27, 0x04	; 4
    5b34:	a6 95       	lsr	r26
    5b36:	97 95       	ror	r25
    5b38:	87 95       	ror	r24
    5b3a:	77 95       	ror	r23
    5b3c:	67 95       	ror	r22
    5b3e:	ba 95       	dec	r27
    5b40:	c9 f7       	brne	.-14     	; 0x5b34 <__ultoa_invert+0x86>
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	61 05       	cpc	r22, r1
    5b46:	71 05       	cpc	r23, r1
    5b48:	08 95       	ret
    5b4a:	9b 01       	movw	r18, r22
    5b4c:	ac 01       	movw	r20, r24
    5b4e:	0a 2e       	mov	r0, r26
    5b50:	06 94       	lsr	r0
    5b52:	57 95       	ror	r21
    5b54:	47 95       	ror	r20
    5b56:	37 95       	ror	r19
    5b58:	27 95       	ror	r18
    5b5a:	ba 95       	dec	r27
    5b5c:	c9 f7       	brne	.-14     	; 0x5b50 <__ultoa_invert+0xa2>
    5b5e:	62 0f       	add	r22, r18
    5b60:	73 1f       	adc	r23, r19
    5b62:	84 1f       	adc	r24, r20
    5b64:	95 1f       	adc	r25, r21
    5b66:	a0 1d       	adc	r26, r0
    5b68:	08 95       	ret

00005b6a <_exit>:
    5b6a:	f8 94       	cli

00005b6c <__stop_program>:
    5b6c:	ff cf       	rjmp	.-2      	; 0x5b6c <__stop_program>
